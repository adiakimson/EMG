
emg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000344c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800350c  0800350c  0001350c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003594  08003594  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003594  08003594  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003594  08003594  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003594  08003594  00013594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003598  08003598  00013598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800359c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000070  0800360c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  0800360c  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000922c  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001808  00000000  00000000  000292c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0002aad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002b230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000024b8  00000000  00000000  0002b8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009cf2  00000000  00000000  0002ddb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c473  00000000  00000000  00037aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c3f15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cd8  00000000  00000000  000c3f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080034f4 	.word	0x080034f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080034f4 	.word	0x080034f4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b083      	sub	sp, #12
 8000248:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f000 fb69 	bl	8000920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f833 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f000 f939 	bl	80004c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000256:	f000 f919 	bl	800048c <MX_DMA_Init>
  MX_ADC_Init();
 800025a:	f000 f873 	bl	8000344 <MX_ADC_Init>
  MX_USART2_UART_Init();
 800025e:	f000 f8e5 	bl	800042c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc, raw, 3);
 8000262:	490f      	ldr	r1, [pc, #60]	; (80002a0 <main+0x5c>)
 8000264:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <main+0x60>)
 8000266:	2203      	movs	r2, #3
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fcfd 	bl	8000c68 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    sprintf((char*)UartMessage, "X: %d, Y: %d\n\r", (int)raw[0], (int)raw[1], (int)raw[2]);
 800026e:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <main+0x5c>)
 8000270:	881b      	ldrh	r3, [r3, #0]
 8000272:	001a      	movs	r2, r3
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <main+0x5c>)
 8000276:	885b      	ldrh	r3, [r3, #2]
 8000278:	001c      	movs	r4, r3
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <main+0x5c>)
 800027c:	889b      	ldrh	r3, [r3, #4]
 800027e:	490a      	ldr	r1, [pc, #40]	; (80002a8 <main+0x64>)
 8000280:	480a      	ldr	r0, [pc, #40]	; (80002ac <main+0x68>)
 8000282:	9300      	str	r3, [sp, #0]
 8000284:	0023      	movs	r3, r4
 8000286:	f002 fccb 	bl	8002c20 <siprintf>
	    sprintf("Hello","\n\r");
 800028a:	4a09      	ldr	r2, [pc, #36]	; (80002b0 <main+0x6c>)
 800028c:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <main+0x70>)
 800028e:	0011      	movs	r1, r2
 8000290:	0018      	movs	r0, r3
 8000292:	f002 fcc5 	bl	8002c20 <siprintf>
	    UART2_Print(UartMessage);
 8000296:	4b05      	ldr	r3, [pc, #20]	; (80002ac <main+0x68>)
 8000298:	0018      	movs	r0, r3
 800029a:	f000 f99f 	bl	80005dc <UART2_Print>
	    sprintf((char*)UartMessage, "X: %d, Y: %d\n\r", (int)raw[0], (int)raw[1], (int)raw[2]);
 800029e:	e7e6      	b.n	800026e <main+0x2a>
 80002a0:	20000194 	.word	0x20000194
 80002a4:	2000008c 	.word	0x2000008c
 80002a8:	0800350c 	.word	0x0800350c
 80002ac:	2000019c 	.word	0x2000019c
 80002b0:	0800351c 	.word	0x0800351c
 80002b4:	08003520 	.word	0x08003520

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b093      	sub	sp, #76	; 0x4c
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	2414      	movs	r4, #20
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	0018      	movs	r0, r3
 80002c4:	2334      	movs	r3, #52	; 0x34
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f002 fca1 	bl	8002c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	0018      	movs	r0, r3
 80002d2:	2310      	movs	r3, #16
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f002 fc9a 	bl	8002c10 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002dc:	0021      	movs	r1, r4
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2212      	movs	r2, #18
 80002e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2201      	movs	r2, #1
 80002e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2201      	movs	r2, #1
 80002ee:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2210      	movs	r2, #16
 80002f4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2210      	movs	r2, #16
 80002fa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2200      	movs	r2, #0
 8000300:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000302:	187b      	adds	r3, r7, r1
 8000304:	0018      	movs	r0, r3
 8000306:	f001 fb5b 	bl	80019c0 <HAL_RCC_OscConfig>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800030e:	f000 f97b 	bl	8000608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2207      	movs	r2, #7
 8000316:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2100      	movs	r1, #0
 800032e:	0018      	movs	r0, r3
 8000330:	f001 fecc 	bl	80020cc <HAL_RCC_ClockConfig>
 8000334:	1e03      	subs	r3, r0, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000338:	f000 f966 	bl	8000608 <Error_Handler>
  }
}
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	b013      	add	sp, #76	; 0x4c
 8000342:	bd90      	pop	{r4, r7, pc}

08000344 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	0018      	movs	r0, r3
 800034e:	230c      	movs	r3, #12
 8000350:	001a      	movs	r2, r3
 8000352:	2100      	movs	r1, #0
 8000354:	f002 fc5c 	bl	8002c10 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000358:	4b32      	ldr	r3, [pc, #200]	; (8000424 <MX_ADC_Init+0xe0>)
 800035a:	4a33      	ldr	r2, [pc, #204]	; (8000428 <MX_ADC_Init+0xe4>)
 800035c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800035e:	4b31      	ldr	r3, [pc, #196]	; (8000424 <MX_ADC_Init+0xe0>)
 8000360:	2200      	movs	r2, #0
 8000362:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000364:	4b2f      	ldr	r3, [pc, #188]	; (8000424 <MX_ADC_Init+0xe0>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800036a:	4b2e      	ldr	r3, [pc, #184]	; (8000424 <MX_ADC_Init+0xe0>)
 800036c:	2200      	movs	r2, #0
 800036e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000370:	4b2c      	ldr	r3, [pc, #176]	; (8000424 <MX_ADC_Init+0xe0>)
 8000372:	2201      	movs	r2, #1
 8000374:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000376:	4b2b      	ldr	r3, [pc, #172]	; (8000424 <MX_ADC_Init+0xe0>)
 8000378:	2208      	movs	r2, #8
 800037a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800037c:	4b29      	ldr	r3, [pc, #164]	; (8000424 <MX_ADC_Init+0xe0>)
 800037e:	2200      	movs	r2, #0
 8000380:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000382:	4b28      	ldr	r3, [pc, #160]	; (8000424 <MX_ADC_Init+0xe0>)
 8000384:	2200      	movs	r2, #0
 8000386:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000388:	4b26      	ldr	r3, [pc, #152]	; (8000424 <MX_ADC_Init+0xe0>)
 800038a:	2201      	movs	r2, #1
 800038c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800038e:	4b25      	ldr	r3, [pc, #148]	; (8000424 <MX_ADC_Init+0xe0>)
 8000390:	2200      	movs	r2, #0
 8000392:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000394:	4b23      	ldr	r3, [pc, #140]	; (8000424 <MX_ADC_Init+0xe0>)
 8000396:	22c2      	movs	r2, #194	; 0xc2
 8000398:	32ff      	adds	r2, #255	; 0xff
 800039a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800039c:	4b21      	ldr	r3, [pc, #132]	; (8000424 <MX_ADC_Init+0xe0>)
 800039e:	2200      	movs	r2, #0
 80003a0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80003a2:	4b20      	ldr	r3, [pc, #128]	; (8000424 <MX_ADC_Init+0xe0>)
 80003a4:	2224      	movs	r2, #36	; 0x24
 80003a6:	2101      	movs	r1, #1
 80003a8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003aa:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <MX_ADC_Init+0xe0>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003b0:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <MX_ADC_Init+0xe0>)
 80003b2:	0018      	movs	r0, r3
 80003b4:	f000 fb18 	bl	80009e8 <HAL_ADC_Init>
 80003b8:	1e03      	subs	r3, r0, #0
 80003ba:	d001      	beq.n	80003c0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003bc:	f000 f924 	bl	8000608 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2280      	movs	r2, #128	; 0x80
 80003ca:	0152      	lsls	r2, r2, #5
 80003cc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2207      	movs	r2, #7
 80003d2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003d4:	1d3a      	adds	r2, r7, #4
 80003d6:	4b13      	ldr	r3, [pc, #76]	; (8000424 <MX_ADC_Init+0xe0>)
 80003d8:	0011      	movs	r1, r2
 80003da:	0018      	movs	r0, r3
 80003dc:	f000 fcde 	bl	8000d9c <HAL_ADC_ConfigChannel>
 80003e0:	1e03      	subs	r3, r0, #0
 80003e2:	d001      	beq.n	80003e8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80003e4:	f000 f910 	bl	8000608 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2201      	movs	r2, #1
 80003ec:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003ee:	1d3a      	adds	r2, r7, #4
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <MX_ADC_Init+0xe0>)
 80003f2:	0011      	movs	r1, r2
 80003f4:	0018      	movs	r0, r3
 80003f6:	f000 fcd1 	bl	8000d9c <HAL_ADC_ConfigChannel>
 80003fa:	1e03      	subs	r3, r0, #0
 80003fc:	d001      	beq.n	8000402 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80003fe:	f000 f903 	bl	8000608 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	2202      	movs	r2, #2
 8000406:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000408:	1d3a      	adds	r2, r7, #4
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <MX_ADC_Init+0xe0>)
 800040c:	0011      	movs	r1, r2
 800040e:	0018      	movs	r0, r3
 8000410:	f000 fcc4 	bl	8000d9c <HAL_ADC_ConfigChannel>
 8000414:	1e03      	subs	r3, r0, #0
 8000416:	d001      	beq.n	800041c <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000418:	f000 f8f6 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800041c:	46c0      	nop			; (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b004      	add	sp, #16
 8000422:	bd80      	pop	{r7, pc}
 8000424:	2000008c 	.word	0x2000008c
 8000428:	40012400 	.word	0x40012400

0800042c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000432:	4a15      	ldr	r2, [pc, #84]	; (8000488 <MX_USART2_UART_Init+0x5c>)
 8000434:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000436:	4b13      	ldr	r3, [pc, #76]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000438:	2296      	movs	r2, #150	; 0x96
 800043a:	0212      	lsls	r2, r2, #8
 800043c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800043e:	4b11      	ldr	r3, [pc, #68]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <MX_USART2_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000452:	220c      	movs	r2, #12
 8000454:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <MX_USART2_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <MX_USART2_UART_Init+0x58>)
 800046a:	2200      	movs	r2, #0
 800046c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800046e:	4b05      	ldr	r3, [pc, #20]	; (8000484 <MX_USART2_UART_Init+0x58>)
 8000470:	0018      	movs	r0, r3
 8000472:	f001 ffa5 	bl	80023c0 <HAL_UART_Init>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800047a:	f000 f8c5 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000110 	.word	0x20000110
 8000488:	40004400 	.word	0x40004400

0800048c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <MX_DMA_Init+0x38>)
 8000494:	695a      	ldr	r2, [r3, #20]
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <MX_DMA_Init+0x38>)
 8000498:	2101      	movs	r1, #1
 800049a:	430a      	orrs	r2, r1
 800049c:	615a      	str	r2, [r3, #20]
 800049e:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <MX_DMA_Init+0x38>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	2201      	movs	r2, #1
 80004a4:	4013      	ands	r3, r2
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2100      	movs	r1, #0
 80004ae:	2009      	movs	r0, #9
 80004b0:	f000 ff36 	bl	8001320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004b4:	2009      	movs	r0, #9
 80004b6:	f000 ff48 	bl	800134a <HAL_NVIC_EnableIRQ>

}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	b002      	add	sp, #8
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	40021000 	.word	0x40021000

080004c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b089      	sub	sp, #36	; 0x24
 80004cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	240c      	movs	r4, #12
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	0018      	movs	r0, r3
 80004d4:	2314      	movs	r3, #20
 80004d6:	001a      	movs	r2, r3
 80004d8:	2100      	movs	r1, #0
 80004da:	f002 fb99 	bl	8002c10 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	4b3d      	ldr	r3, [pc, #244]	; (80005d4 <MX_GPIO_Init+0x10c>)
 80004e0:	695a      	ldr	r2, [r3, #20]
 80004e2:	4b3c      	ldr	r3, [pc, #240]	; (80005d4 <MX_GPIO_Init+0x10c>)
 80004e4:	2180      	movs	r1, #128	; 0x80
 80004e6:	0289      	lsls	r1, r1, #10
 80004e8:	430a      	orrs	r2, r1
 80004ea:	615a      	str	r2, [r3, #20]
 80004ec:	4b39      	ldr	r3, [pc, #228]	; (80005d4 <MX_GPIO_Init+0x10c>)
 80004ee:	695a      	ldr	r2, [r3, #20]
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	029b      	lsls	r3, r3, #10
 80004f4:	4013      	ands	r3, r2
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fa:	4b36      	ldr	r3, [pc, #216]	; (80005d4 <MX_GPIO_Init+0x10c>)
 80004fc:	695a      	ldr	r2, [r3, #20]
 80004fe:	4b35      	ldr	r3, [pc, #212]	; (80005d4 <MX_GPIO_Init+0x10c>)
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	02c9      	lsls	r1, r1, #11
 8000504:	430a      	orrs	r2, r1
 8000506:	615a      	str	r2, [r3, #20]
 8000508:	4b32      	ldr	r3, [pc, #200]	; (80005d4 <MX_GPIO_Init+0x10c>)
 800050a:	695a      	ldr	r2, [r3, #20]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	02db      	lsls	r3, r3, #11
 8000510:	4013      	ands	r3, r2
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000516:	4b30      	ldr	r3, [pc, #192]	; (80005d8 <MX_GPIO_Init+0x110>)
 8000518:	2200      	movs	r2, #0
 800051a:	21f9      	movs	r1, #249	; 0xf9
 800051c:	0018      	movs	r0, r3
 800051e:	f001 fa31 	bl	8001984 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 8000522:	2390      	movs	r3, #144	; 0x90
 8000524:	0119      	lsls	r1, r3, #4
 8000526:	2390      	movs	r3, #144	; 0x90
 8000528:	05db      	lsls	r3, r3, #23
 800052a:	2200      	movs	r2, #0
 800052c:	0018      	movs	r0, r3
 800052e:	f001 fa29 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000532:	193b      	adds	r3, r7, r4
 8000534:	22f9      	movs	r2, #249	; 0xf9
 8000536:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2201      	movs	r2, #1
 800053c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800054a:	193b      	adds	r3, r7, r4
 800054c:	4a22      	ldr	r2, [pc, #136]	; (80005d8 <MX_GPIO_Init+0x110>)
 800054e:	0019      	movs	r1, r3
 8000550:	0010      	movs	r0, r2
 8000552:	f001 f8af 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000556:	0021      	movs	r1, r4
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2202      	movs	r2, #2
 800055c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2288      	movs	r2, #136	; 0x88
 8000562:	0352      	lsls	r2, r2, #13
 8000564:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056c:	000c      	movs	r4, r1
 800056e:	187b      	adds	r3, r7, r1
 8000570:	4a19      	ldr	r2, [pc, #100]	; (80005d8 <MX_GPIO_Init+0x110>)
 8000572:	0019      	movs	r1, r3
 8000574:	0010      	movs	r0, r2
 8000576:	f001 f89d 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800057a:	0021      	movs	r1, r4
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2290      	movs	r2, #144	; 0x90
 8000580:	0112      	lsls	r2, r2, #4
 8000582:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000584:	000c      	movs	r4, r1
 8000586:	193b      	adds	r3, r7, r4
 8000588:	2201      	movs	r2, #1
 800058a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	193b      	adds	r3, r7, r4
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	193b      	adds	r3, r7, r4
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000598:	193a      	adds	r2, r7, r4
 800059a:	2390      	movs	r3, #144	; 0x90
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	0011      	movs	r1, r2
 80005a0:	0018      	movs	r0, r3
 80005a2:	f001 f887 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 80005a6:	0021      	movs	r1, r4
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	00d2      	lsls	r2, r2, #3
 80005ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2200      	movs	r2, #0
 80005b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80005bc:	187a      	adds	r2, r7, r1
 80005be:	2390      	movs	r3, #144	; 0x90
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	0011      	movs	r1, r2
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 f875 	bl	80016b4 <HAL_GPIO_Init>

}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b009      	add	sp, #36	; 0x24
 80005d0:	bd90      	pop	{r4, r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	40021000 	.word	0x40021000
 80005d8:	48000400 	.word	0x48000400

080005dc <UART2_Print>:

/* USER CODE BEGIN 4 */
void UART2_Print(uint8_t* Message)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, Message, strlen((char*)Message), 100);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	0018      	movs	r0, r3
 80005e8:	f7ff fd8e 	bl	8000108 <strlen>
 80005ec:	0003      	movs	r3, r0
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	6879      	ldr	r1, [r7, #4]
 80005f2:	4804      	ldr	r0, [pc, #16]	; (8000604 <UART2_Print+0x28>)
 80005f4:	2364      	movs	r3, #100	; 0x64
 80005f6:	f001 ff37 	bl	8002468 <HAL_UART_Transmit>
}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b002      	add	sp, #8
 8000600:	bd80      	pop	{r7, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	20000110 	.word	0x20000110

08000608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000610:	e7fe      	b.n	8000610 <Error_Handler+0x8>
	...

08000614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <HAL_MspInit+0x44>)
 800061c:	699a      	ldr	r2, [r3, #24]
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <HAL_MspInit+0x44>)
 8000620:	2101      	movs	r1, #1
 8000622:	430a      	orrs	r2, r1
 8000624:	619a      	str	r2, [r3, #24]
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <HAL_MspInit+0x44>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	2201      	movs	r2, #1
 800062c:	4013      	ands	r3, r2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <HAL_MspInit+0x44>)
 8000634:	69da      	ldr	r2, [r3, #28]
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_MspInit+0x44>)
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	0549      	lsls	r1, r1, #21
 800063c:	430a      	orrs	r2, r1
 800063e:	61da      	str	r2, [r3, #28]
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <HAL_MspInit+0x44>)
 8000642:	69da      	ldr	r2, [r3, #28]
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	055b      	lsls	r3, r3, #21
 8000648:	4013      	ands	r3, r2
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b002      	add	sp, #8
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	40021000 	.word	0x40021000

0800065c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b08b      	sub	sp, #44	; 0x2c
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	2414      	movs	r4, #20
 8000666:	193b      	adds	r3, r7, r4
 8000668:	0018      	movs	r0, r3
 800066a:	2314      	movs	r3, #20
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f002 face 	bl	8002c10 <memset>
  if(hadc->Instance==ADC1)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a2d      	ldr	r2, [pc, #180]	; (8000730 <HAL_ADC_MspInit+0xd4>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d153      	bne.n	8000726 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800067e:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <HAL_ADC_MspInit+0xd8>)
 8000680:	699a      	ldr	r2, [r3, #24]
 8000682:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <HAL_ADC_MspInit+0xd8>)
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	0089      	lsls	r1, r1, #2
 8000688:	430a      	orrs	r2, r1
 800068a:	619a      	str	r2, [r3, #24]
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <HAL_ADC_MspInit+0xd8>)
 800068e:	699a      	ldr	r2, [r3, #24]
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4013      	ands	r3, r2
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b26      	ldr	r3, [pc, #152]	; (8000734 <HAL_ADC_MspInit+0xd8>)
 800069c:	695a      	ldr	r2, [r3, #20]
 800069e:	4b25      	ldr	r3, [pc, #148]	; (8000734 <HAL_ADC_MspInit+0xd8>)
 80006a0:	2180      	movs	r1, #128	; 0x80
 80006a2:	0289      	lsls	r1, r1, #10
 80006a4:	430a      	orrs	r2, r1
 80006a6:	615a      	str	r2, [r3, #20]
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <HAL_ADC_MspInit+0xd8>)
 80006aa:	695a      	ldr	r2, [r3, #20]
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	029b      	lsls	r3, r3, #10
 80006b0:	4013      	ands	r3, r2
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = EMG1_Pin|EMG2_Pin|EMG3_Pin;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2207      	movs	r2, #7
 80006ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2203      	movs	r2, #3
 80006c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	193a      	adds	r2, r7, r4
 80006ca:	2390      	movs	r3, #144	; 0x90
 80006cc:	05db      	lsls	r3, r3, #23
 80006ce:	0011      	movs	r1, r2
 80006d0:	0018      	movs	r0, r3
 80006d2:	f000 ffef 	bl	80016b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80006d6:	4b18      	ldr	r3, [pc, #96]	; (8000738 <HAL_ADC_MspInit+0xdc>)
 80006d8:	4a18      	ldr	r2, [pc, #96]	; (800073c <HAL_ADC_MspInit+0xe0>)
 80006da:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <HAL_ADC_MspInit+0xdc>)
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <HAL_ADC_MspInit+0xdc>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <HAL_ADC_MspInit+0xdc>)
 80006ea:	2280      	movs	r2, #128	; 0x80
 80006ec:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <HAL_ADC_MspInit+0xdc>)
 80006f0:	2280      	movs	r2, #128	; 0x80
 80006f2:	0052      	lsls	r2, r2, #1
 80006f4:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <HAL_ADC_MspInit+0xdc>)
 80006f8:	2280      	movs	r2, #128	; 0x80
 80006fa:	00d2      	lsls	r2, r2, #3
 80006fc:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <HAL_ADC_MspInit+0xdc>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <HAL_ADC_MspInit+0xdc>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <HAL_ADC_MspInit+0xdc>)
 800070c:	0018      	movs	r0, r3
 800070e:	f000 fe39 	bl	8001384 <HAL_DMA_Init>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000716:	f7ff ff77 	bl	8000608 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a06      	ldr	r2, [pc, #24]	; (8000738 <HAL_ADC_MspInit+0xdc>)
 800071e:	631a      	str	r2, [r3, #48]	; 0x30
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_ADC_MspInit+0xdc>)
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b00b      	add	sp, #44	; 0x2c
 800072c:	bd90      	pop	{r4, r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	40012400 	.word	0x40012400
 8000734:	40021000 	.word	0x40021000
 8000738:	200000cc 	.word	0x200000cc
 800073c:	40020008 	.word	0x40020008

08000740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b08b      	sub	sp, #44	; 0x2c
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	2414      	movs	r4, #20
 800074a:	193b      	adds	r3, r7, r4
 800074c:	0018      	movs	r0, r3
 800074e:	2314      	movs	r3, #20
 8000750:	001a      	movs	r2, r3
 8000752:	2100      	movs	r1, #0
 8000754:	f002 fa5c 	bl	8002c10 <memset>
  if(huart->Instance==USART2)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a1c      	ldr	r2, [pc, #112]	; (80007d0 <HAL_UART_MspInit+0x90>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d132      	bne.n	80007c8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <HAL_UART_MspInit+0x94>)
 8000764:	69da      	ldr	r2, [r3, #28]
 8000766:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <HAL_UART_MspInit+0x94>)
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	0289      	lsls	r1, r1, #10
 800076c:	430a      	orrs	r2, r1
 800076e:	61da      	str	r2, [r3, #28]
 8000770:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <HAL_UART_MspInit+0x94>)
 8000772:	69da      	ldr	r2, [r3, #28]
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	029b      	lsls	r3, r3, #10
 8000778:	4013      	ands	r3, r2
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_UART_MspInit+0x94>)
 8000780:	695a      	ldr	r2, [r3, #20]
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <HAL_UART_MspInit+0x94>)
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	0289      	lsls	r1, r1, #10
 8000788:	430a      	orrs	r2, r1
 800078a:	615a      	str	r2, [r3, #20]
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <HAL_UART_MspInit+0x94>)
 800078e:	695a      	ldr	r2, [r3, #20]
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	029b      	lsls	r3, r3, #10
 8000794:	4013      	ands	r3, r2
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA14     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_14;
 800079a:	0021      	movs	r1, r4
 800079c:	187b      	adds	r3, r7, r1
 800079e:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <HAL_UART_MspInit+0x98>)
 80007a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2202      	movs	r2, #2
 80007a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2203      	movs	r2, #3
 80007b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2201      	movs	r2, #1
 80007b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	187a      	adds	r2, r7, r1
 80007bc:	2390      	movs	r3, #144	; 0x90
 80007be:	05db      	lsls	r3, r3, #23
 80007c0:	0011      	movs	r1, r2
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 ff76 	bl	80016b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b00b      	add	sp, #44	; 0x2c
 80007ce:	bd90      	pop	{r4, r7, pc}
 80007d0:	40004400 	.word	0x40004400
 80007d4:	40021000 	.word	0x40021000
 80007d8:	00004008 	.word	0x00004008

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <NMI_Handler+0x4>

080007e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <HardFault_Handler+0x4>

080007e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000800:	f000 f8d6 	bl	80009b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <DMA1_Channel1_IRQHandler+0x14>)
 8000812:	0018      	movs	r0, r3
 8000814:	f000 fe64 	bl	80014e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	200000cc 	.word	0x200000cc

08000824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800082c:	4a14      	ldr	r2, [pc, #80]	; (8000880 <_sbrk+0x5c>)
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <_sbrk+0x60>)
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <_sbrk+0x64>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d102      	bne.n	8000846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <_sbrk+0x64>)
 8000842:	4a12      	ldr	r2, [pc, #72]	; (800088c <_sbrk+0x68>)
 8000844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <_sbrk+0x64>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	18d3      	adds	r3, r2, r3
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	429a      	cmp	r2, r3
 8000852:	d207      	bcs.n	8000864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000854:	f002 f9b2 	bl	8002bbc <__errno>
 8000858:	0003      	movs	r3, r0
 800085a:	220c      	movs	r2, #12
 800085c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800085e:	2301      	movs	r3, #1
 8000860:	425b      	negs	r3, r3
 8000862:	e009      	b.n	8000878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <_sbrk+0x64>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800086a:	4b07      	ldr	r3, [pc, #28]	; (8000888 <_sbrk+0x64>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	18d2      	adds	r2, r2, r3
 8000872:	4b05      	ldr	r3, [pc, #20]	; (8000888 <_sbrk+0x64>)
 8000874:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000876:	68fb      	ldr	r3, [r7, #12]
}
 8000878:	0018      	movs	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	b006      	add	sp, #24
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20001800 	.word	0x20001800
 8000884:	00000400 	.word	0x00000400
 8000888:	200001bc 	.word	0x200001bc
 800088c:	200001d8 	.word	0x200001d8

08000890 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800089c:	4813      	ldr	r0, [pc, #76]	; (80008ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800089e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80008a0:	4813      	ldr	r0, [pc, #76]	; (80008f0 <LoopForever+0x6>)
    LDR R1, [R0]
 80008a2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80008a4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80008a6:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <LoopForever+0xa>)
    CMP R1, R2
 80008a8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80008aa:	d105      	bne.n	80008b8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80008ac:	4812      	ldr	r0, [pc, #72]	; (80008f8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80008ae:	4913      	ldr	r1, [pc, #76]	; (80008fc <LoopForever+0x12>)
    STR R1, [R0]
 80008b0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80008b2:	4813      	ldr	r0, [pc, #76]	; (8000900 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80008b4:	4913      	ldr	r1, [pc, #76]	; (8000904 <LoopForever+0x1a>)
    STR R1, [R0]
 80008b6:	6001      	str	r1, [r0, #0]

080008b8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b8:	4813      	ldr	r0, [pc, #76]	; (8000908 <LoopForever+0x1e>)
  ldr r1, =_edata
 80008ba:	4914      	ldr	r1, [pc, #80]	; (800090c <LoopForever+0x22>)
  ldr r2, =_sidata
 80008bc:	4a14      	ldr	r2, [pc, #80]	; (8000910 <LoopForever+0x26>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a11      	ldr	r2, [pc, #68]	; (8000914 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80008d0:	4c11      	ldr	r4, [pc, #68]	; (8000918 <LoopForever+0x2e>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008de:	f7ff ffd7 	bl	8000890 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80008e2:	f002 f971 	bl	8002bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008e6:	f7ff fcad 	bl	8000244 <main>

080008ea <LoopForever>:

LoopForever:
    b LoopForever
 80008ea:	e7fe      	b.n	80008ea <LoopForever>
  ldr   r0, =_estack
 80008ec:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80008f0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80008f4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80008f8:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80008fc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000900:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000904:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800090c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000910:	0800359c 	.word	0x0800359c
  ldr r2, =_sbss
 8000914:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000918:	200001d4 	.word	0x200001d4

0800091c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800091c:	e7fe      	b.n	800091c <ADC1_IRQHandler>
	...

08000920 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <HAL_Init+0x24>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_Init+0x24>)
 800092a:	2110      	movs	r1, #16
 800092c:	430a      	orrs	r2, r1
 800092e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000930:	2003      	movs	r0, #3
 8000932:	f000 f809 	bl	8000948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000936:	f7ff fe6d 	bl	8000614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800093a:	2300      	movs	r3, #0
}
 800093c:	0018      	movs	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	40022000 	.word	0x40022000

08000948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <HAL_InitTick+0x5c>)
 8000952:	681c      	ldr	r4, [r3, #0]
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <HAL_InitTick+0x60>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	0019      	movs	r1, r3
 800095a:	23fa      	movs	r3, #250	; 0xfa
 800095c:	0098      	lsls	r0, r3, #2
 800095e:	f7ff fbe5 	bl	800012c <__udivsi3>
 8000962:	0003      	movs	r3, r0
 8000964:	0019      	movs	r1, r3
 8000966:	0020      	movs	r0, r4
 8000968:	f7ff fbe0 	bl	800012c <__udivsi3>
 800096c:	0003      	movs	r3, r0
 800096e:	0018      	movs	r0, r3
 8000970:	f000 fcfb 	bl	800136a <HAL_SYSTICK_Config>
 8000974:	1e03      	subs	r3, r0, #0
 8000976:	d001      	beq.n	800097c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000978:	2301      	movs	r3, #1
 800097a:	e00f      	b.n	800099c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b03      	cmp	r3, #3
 8000980:	d80b      	bhi.n	800099a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	2301      	movs	r3, #1
 8000986:	425b      	negs	r3, r3
 8000988:	2200      	movs	r2, #0
 800098a:	0018      	movs	r0, r3
 800098c:	f000 fcc8 	bl	8001320 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_InitTick+0x64>)
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
 8000998:	e000      	b.n	800099c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
}
 800099c:	0018      	movs	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	b003      	add	sp, #12
 80009a2:	bd90      	pop	{r4, r7, pc}
 80009a4:	20000000 	.word	0x20000000
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000004 	.word	0x20000004

080009b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <HAL_IncTick+0x1c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	001a      	movs	r2, r3
 80009ba:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <HAL_IncTick+0x20>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	18d2      	adds	r2, r2, r3
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <HAL_IncTick+0x20>)
 80009c2:	601a      	str	r2, [r3, #0]
}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	20000008 	.word	0x20000008
 80009d0:	200001c0 	.word	0x200001c0

080009d4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  return uwTick;
 80009d8:	4b02      	ldr	r3, [pc, #8]	; (80009e4 <HAL_GetTick+0x10>)
 80009da:	681b      	ldr	r3, [r3, #0]
}
 80009dc:	0018      	movs	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	200001c0 	.word	0x200001c0

080009e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009f0:	230f      	movs	r3, #15
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d101      	bne.n	8000a06 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e125      	b.n	8000c52 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d10a      	bne.n	8000a24 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2234      	movs	r2, #52	; 0x34
 8000a18:	2100      	movs	r1, #0
 8000a1a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f7ff fe1c 	bl	800065c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a28:	2210      	movs	r2, #16
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	d000      	beq.n	8000a30 <HAL_ADC_Init+0x48>
 8000a2e:	e103      	b.n	8000c38 <HAL_ADC_Init+0x250>
 8000a30:	230f      	movs	r3, #15
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d000      	beq.n	8000a3c <HAL_ADC_Init+0x54>
 8000a3a:	e0fd      	b.n	8000c38 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	2204      	movs	r2, #4
 8000a44:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000a46:	d000      	beq.n	8000a4a <HAL_ADC_Init+0x62>
 8000a48:	e0f6      	b.n	8000c38 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a4e:	4a83      	ldr	r2, [pc, #524]	; (8000c5c <HAL_ADC_Init+0x274>)
 8000a50:	4013      	ands	r3, r2
 8000a52:	2202      	movs	r2, #2
 8000a54:	431a      	orrs	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	2203      	movs	r2, #3
 8000a62:	4013      	ands	r3, r2
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d112      	bne.n	8000a8e <HAL_ADC_Init+0xa6>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4013      	ands	r3, r2
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d009      	beq.n	8000a8a <HAL_ADC_Init+0xa2>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	68da      	ldr	r2, [r3, #12]
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	021b      	lsls	r3, r3, #8
 8000a80:	401a      	ands	r2, r3
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	021b      	lsls	r3, r3, #8
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d101      	bne.n	8000a8e <HAL_ADC_Init+0xa6>
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e000      	b.n	8000a90 <HAL_ADC_Init+0xa8>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d116      	bne.n	8000ac2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	2218      	movs	r2, #24
 8000a9c:	4393      	bics	r3, r2
 8000a9e:	0019      	movs	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	689a      	ldr	r2, [r3, #8]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	691b      	ldr	r3, [r3, #16]
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	0899      	lsrs	r1, r3, #2
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	685a      	ldr	r2, [r3, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68da      	ldr	r2, [r3, #12]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4964      	ldr	r1, [pc, #400]	; (8000c60 <HAL_ADC_Init+0x278>)
 8000ace:	400a      	ands	r2, r1
 8000ad0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	7e1b      	ldrb	r3, [r3, #24]
 8000ad6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	7e5b      	ldrb	r3, [r3, #25]
 8000adc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ade:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	7e9b      	ldrb	r3, [r3, #26]
 8000ae4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000ae6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d002      	beq.n	8000af6 <HAL_ADC_Init+0x10e>
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	015b      	lsls	r3, r3, #5
 8000af4:	e000      	b.n	8000af8 <HAL_ADC_Init+0x110>
 8000af6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000af8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000afe:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	691b      	ldr	r3, [r3, #16]
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d101      	bne.n	8000b0c <HAL_ADC_Init+0x124>
 8000b08:	2304      	movs	r3, #4
 8000b0a:	e000      	b.n	8000b0e <HAL_ADC_Init+0x126>
 8000b0c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000b0e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2124      	movs	r1, #36	; 0x24
 8000b14:	5c5b      	ldrb	r3, [r3, r1]
 8000b16:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000b18:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	7edb      	ldrb	r3, [r3, #27]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d115      	bne.n	8000b54 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	7e9b      	ldrb	r3, [r3, #26]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d105      	bne.n	8000b3c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	2280      	movs	r2, #128	; 0x80
 8000b34:	0252      	lsls	r2, r2, #9
 8000b36:	4313      	orrs	r3, r2
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	e00b      	b.n	8000b54 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b40:	2220      	movs	r2, #32
 8000b42:	431a      	orrs	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	431a      	orrs	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	69da      	ldr	r2, [r3, #28]
 8000b58:	23c2      	movs	r3, #194	; 0xc2
 8000b5a:	33ff      	adds	r3, #255	; 0xff
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d007      	beq.n	8000b70 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	68d9      	ldr	r1, [r3, #12]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	055b      	lsls	r3, r3, #21
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d01b      	beq.n	8000bc4 <HAL_ADC_Init+0x1dc>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d017      	beq.n	8000bc4 <HAL_ADC_Init+0x1dc>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d013      	beq.n	8000bc4 <HAL_ADC_Init+0x1dc>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	d00f      	beq.n	8000bc4 <HAL_ADC_Init+0x1dc>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba8:	2b04      	cmp	r3, #4
 8000baa:	d00b      	beq.n	8000bc4 <HAL_ADC_Init+0x1dc>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb0:	2b05      	cmp	r3, #5
 8000bb2:	d007      	beq.n	8000bc4 <HAL_ADC_Init+0x1dc>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb8:	2b06      	cmp	r3, #6
 8000bba:	d003      	beq.n	8000bc4 <HAL_ADC_Init+0x1dc>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc0:	2b07      	cmp	r3, #7
 8000bc2:	d112      	bne.n	8000bea <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	695a      	ldr	r2, [r3, #20]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2107      	movs	r1, #7
 8000bd0:	438a      	bics	r2, r1
 8000bd2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	6959      	ldr	r1, [r3, #20]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bde:	2207      	movs	r2, #7
 8000be0:	401a      	ands	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	430a      	orrs	r2, r1
 8000be8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	4a1c      	ldr	r2, [pc, #112]	; (8000c64 <HAL_ADC_Init+0x27c>)
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	68ba      	ldr	r2, [r7, #8]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d10b      	bne.n	8000c12 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c04:	2203      	movs	r2, #3
 8000c06:	4393      	bics	r3, r2
 8000c08:	2201      	movs	r2, #1
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c10:	e01c      	b.n	8000c4c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c16:	2212      	movs	r2, #18
 8000c18:	4393      	bics	r3, r2
 8000c1a:	2210      	movs	r2, #16
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c26:	2201      	movs	r2, #1
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000c2e:	230f      	movs	r3, #15
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c36:	e009      	b.n	8000c4c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c3c:	2210      	movs	r2, #16
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000c44:	230f      	movs	r3, #15
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	2201      	movs	r2, #1
 8000c4a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	781b      	ldrb	r3, [r3, #0]
}
 8000c52:	0018      	movs	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b004      	add	sp, #16
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	fffffefd 	.word	0xfffffefd
 8000c60:	fffe0219 	.word	0xfffe0219
 8000c64:	833fffe7 	.word	0x833fffe7

08000c68 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b087      	sub	sp, #28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c74:	2317      	movs	r3, #23
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	2204      	movs	r2, #4
 8000c84:	4013      	ands	r3, r2
 8000c86:	d15e      	bne.n	8000d46 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2234      	movs	r2, #52	; 0x34
 8000c8c:	5c9b      	ldrb	r3, [r3, r2]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d101      	bne.n	8000c96 <HAL_ADC_Start_DMA+0x2e>
 8000c92:	2302      	movs	r3, #2
 8000c94:	e05e      	b.n	8000d54 <HAL_ADC_Start_DMA+0xec>
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2234      	movs	r2, #52	; 0x34
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	7e5b      	ldrb	r3, [r3, #25]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d007      	beq.n	8000cb6 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000ca6:	2317      	movs	r3, #23
 8000ca8:	18fc      	adds	r4, r7, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	0018      	movs	r0, r3
 8000cae:	f000 f983 	bl	8000fb8 <ADC_Enable>
 8000cb2:	0003      	movs	r3, r0
 8000cb4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000cb6:	2317      	movs	r3, #23
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d146      	bne.n	8000d4e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc4:	4a25      	ldr	r2, [pc, #148]	; (8000d5c <HAL_ADC_Start_DMA+0xf4>)
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	2280      	movs	r2, #128	; 0x80
 8000cca:	0052      	lsls	r2, r2, #1
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2234      	movs	r2, #52	; 0x34
 8000cdc:	2100      	movs	r1, #0
 8000cde:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	4a1e      	ldr	r2, [pc, #120]	; (8000d60 <HAL_ADC_Start_DMA+0xf8>)
 8000ce6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	4a1d      	ldr	r2, [pc, #116]	; (8000d64 <HAL_ADC_Start_DMA+0xfc>)
 8000cee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	4a1c      	ldr	r2, [pc, #112]	; (8000d68 <HAL_ADC_Start_DMA+0x100>)
 8000cf6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	221c      	movs	r2, #28
 8000cfe:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2110      	movs	r1, #16
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	68da      	ldr	r2, [r3, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	3340      	adds	r3, #64	; 0x40
 8000d2a:	0019      	movs	r1, r3
 8000d2c:	68ba      	ldr	r2, [r7, #8]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f000 fb70 	bl	8001414 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2104      	movs	r1, #4
 8000d40:	430a      	orrs	r2, r1
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	e003      	b.n	8000d4e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000d46:	2317      	movs	r3, #23
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d4e:	2317      	movs	r3, #23
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	781b      	ldrb	r3, [r3, #0]
}
 8000d54:	0018      	movs	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b007      	add	sp, #28
 8000d5a:	bd90      	pop	{r4, r7, pc}
 8000d5c:	fffff0fe 	.word	0xfffff0fe
 8000d60:	080010c1 	.word	0x080010c1
 8000d64:	08001175 	.word	0x08001175
 8000d68:	08001193 	.word	0x08001193

08000d6c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b002      	add	sp, #8
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b002      	add	sp, #8
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000d94:	46c0      	nop			; (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b002      	add	sp, #8
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000da6:	230f      	movs	r3, #15
 8000da8:	18fb      	adds	r3, r7, r3
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000db6:	2380      	movs	r3, #128	; 0x80
 8000db8:	055b      	lsls	r3, r3, #21
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d011      	beq.n	8000de2 <HAL_ADC_ConfigChannel+0x46>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d00d      	beq.n	8000de2 <HAL_ADC_ConfigChannel+0x46>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d009      	beq.n	8000de2 <HAL_ADC_ConfigChannel+0x46>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d005      	beq.n	8000de2 <HAL_ADC_ConfigChannel+0x46>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	d001      	beq.n	8000de2 <HAL_ADC_ConfigChannel+0x46>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2234      	movs	r2, #52	; 0x34
 8000de6:	5c9b      	ldrb	r3, [r3, r2]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d101      	bne.n	8000df0 <HAL_ADC_ConfigChannel+0x54>
 8000dec:	2302      	movs	r3, #2
 8000dee:	e0d0      	b.n	8000f92 <HAL_ADC_ConfigChannel+0x1f6>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2234      	movs	r2, #52	; 0x34
 8000df4:	2101      	movs	r1, #1
 8000df6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2204      	movs	r2, #4
 8000e00:	4013      	ands	r3, r2
 8000e02:	d000      	beq.n	8000e06 <HAL_ADC_ConfigChannel+0x6a>
 8000e04:	e0b4      	b.n	8000f70 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	4a64      	ldr	r2, [pc, #400]	; (8000f9c <HAL_ADC_ConfigChannel+0x200>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d100      	bne.n	8000e12 <HAL_ADC_ConfigChannel+0x76>
 8000e10:	e082      	b.n	8000f18 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	430a      	orrs	r2, r1
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	055b      	lsls	r3, r3, #21
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d037      	beq.n	8000ea4 <HAL_ADC_ConfigChannel+0x108>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d033      	beq.n	8000ea4 <HAL_ADC_ConfigChannel+0x108>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d02f      	beq.n	8000ea4 <HAL_ADC_ConfigChannel+0x108>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	d02b      	beq.n	8000ea4 <HAL_ADC_ConfigChannel+0x108>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	d027      	beq.n	8000ea4 <HAL_ADC_ConfigChannel+0x108>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e58:	2b05      	cmp	r3, #5
 8000e5a:	d023      	beq.n	8000ea4 <HAL_ADC_ConfigChannel+0x108>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e60:	2b06      	cmp	r3, #6
 8000e62:	d01f      	beq.n	8000ea4 <HAL_ADC_ConfigChannel+0x108>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e68:	2b07      	cmp	r3, #7
 8000e6a:	d01b      	beq.n	8000ea4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	2107      	movs	r1, #7
 8000e78:	400b      	ands	r3, r1
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d012      	beq.n	8000ea4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	695a      	ldr	r2, [r3, #20]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2107      	movs	r1, #7
 8000e8a:	438a      	bics	r2, r1
 8000e8c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	6959      	ldr	r1, [r3, #20]
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	2207      	movs	r2, #7
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b10      	cmp	r3, #16
 8000eaa:	d007      	beq.n	8000ebc <HAL_ADC_ConfigChannel+0x120>
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b11      	cmp	r3, #17
 8000eb2:	d003      	beq.n	8000ebc <HAL_ADC_ConfigChannel+0x120>
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b12      	cmp	r3, #18
 8000eba:	d163      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000ebc:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <HAL_ADC_ConfigChannel+0x204>)
 8000ebe:	6819      	ldr	r1, [r3, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b10      	cmp	r3, #16
 8000ec6:	d009      	beq.n	8000edc <HAL_ADC_ConfigChannel+0x140>
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b11      	cmp	r3, #17
 8000ece:	d102      	bne.n	8000ed6 <HAL_ADC_ConfigChannel+0x13a>
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	03db      	lsls	r3, r3, #15
 8000ed4:	e004      	b.n	8000ee0 <HAL_ADC_ConfigChannel+0x144>
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	045b      	lsls	r3, r3, #17
 8000eda:	e001      	b.n	8000ee0 <HAL_ADC_ConfigChannel+0x144>
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	4a2f      	ldr	r2, [pc, #188]	; (8000fa0 <HAL_ADC_ConfigChannel+0x204>)
 8000ee2:	430b      	orrs	r3, r1
 8000ee4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b10      	cmp	r3, #16
 8000eec:	d14a      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000eee:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <HAL_ADC_ConfigChannel+0x208>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	492d      	ldr	r1, [pc, #180]	; (8000fa8 <HAL_ADC_ConfigChannel+0x20c>)
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f7ff f919 	bl	800012c <__udivsi3>
 8000efa:	0003      	movs	r3, r0
 8000efc:	001a      	movs	r2, r3
 8000efe:	0013      	movs	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	189b      	adds	r3, r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f08:	e002      	b.n	8000f10 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1f9      	bne.n	8000f0a <HAL_ADC_ConfigChannel+0x16e>
 8000f16:	e035      	b.n	8000f84 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2101      	movs	r1, #1
 8000f24:	4099      	lsls	r1, r3
 8000f26:	000b      	movs	r3, r1
 8000f28:	43d9      	mvns	r1, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	400a      	ands	r2, r1
 8000f30:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b10      	cmp	r3, #16
 8000f38:	d007      	beq.n	8000f4a <HAL_ADC_ConfigChannel+0x1ae>
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b11      	cmp	r3, #17
 8000f40:	d003      	beq.n	8000f4a <HAL_ADC_ConfigChannel+0x1ae>
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b12      	cmp	r3, #18
 8000f48:	d11c      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <HAL_ADC_ConfigChannel+0x204>)
 8000f4c:	6819      	ldr	r1, [r3, #0]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b10      	cmp	r3, #16
 8000f54:	d007      	beq.n	8000f66 <HAL_ADC_ConfigChannel+0x1ca>
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b11      	cmp	r3, #17
 8000f5c:	d101      	bne.n	8000f62 <HAL_ADC_ConfigChannel+0x1c6>
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <HAL_ADC_ConfigChannel+0x210>)
 8000f60:	e002      	b.n	8000f68 <HAL_ADC_ConfigChannel+0x1cc>
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <HAL_ADC_ConfigChannel+0x214>)
 8000f64:	e000      	b.n	8000f68 <HAL_ADC_ConfigChannel+0x1cc>
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <HAL_ADC_ConfigChannel+0x218>)
 8000f68:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <HAL_ADC_ConfigChannel+0x204>)
 8000f6a:	400b      	ands	r3, r1
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	e009      	b.n	8000f84 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f74:	2220      	movs	r2, #32
 8000f76:	431a      	orrs	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	18fb      	adds	r3, r7, r3
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2234      	movs	r2, #52	; 0x34
 8000f88:	2100      	movs	r1, #0
 8000f8a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	781b      	ldrb	r3, [r3, #0]
}
 8000f92:	0018      	movs	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b004      	add	sp, #16
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	00001001 	.word	0x00001001
 8000fa0:	40012708 	.word	0x40012708
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	000f4240 	.word	0x000f4240
 8000fac:	ffbfffff 	.word	0xffbfffff
 8000fb0:	feffffff 	.word	0xfeffffff
 8000fb4:	ff7fffff 	.word	0xff7fffff

08000fb8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2203      	movs	r2, #3
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d112      	bne.n	8000ffc <ADC_Enable+0x44>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d009      	beq.n	8000ff8 <ADC_Enable+0x40>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	2380      	movs	r3, #128	; 0x80
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	401a      	ands	r2, r3
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d101      	bne.n	8000ffc <ADC_Enable+0x44>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <ADC_Enable+0x46>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d152      	bne.n	80010a8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	4a2a      	ldr	r2, [pc, #168]	; (80010b4 <ADC_Enable+0xfc>)
 800100a:	4013      	ands	r3, r2
 800100c:	d00d      	beq.n	800102a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001012:	2210      	movs	r2, #16
 8001014:	431a      	orrs	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101e:	2201      	movs	r2, #1
 8001020:	431a      	orrs	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e03f      	b.n	80010aa <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2101      	movs	r1, #1
 8001036:	430a      	orrs	r2, r1
 8001038:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800103a:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <ADC_Enable+0x100>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	491f      	ldr	r1, [pc, #124]	; (80010bc <ADC_Enable+0x104>)
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff f873 	bl	800012c <__udivsi3>
 8001046:	0003      	movs	r3, r0
 8001048:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800104a:	e002      	b.n	8001052 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	3b01      	subs	r3, #1
 8001050:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f9      	bne.n	800104c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001058:	f7ff fcbc 	bl	80009d4 <HAL_GetTick>
 800105c:	0003      	movs	r3, r0
 800105e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001060:	e01b      	b.n	800109a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001062:	f7ff fcb7 	bl	80009d4 <HAL_GetTick>
 8001066:	0002      	movs	r2, r0
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d914      	bls.n	800109a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2201      	movs	r2, #1
 8001078:	4013      	ands	r3, r2
 800107a:	2b01      	cmp	r3, #1
 800107c:	d00d      	beq.n	800109a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001082:	2210      	movs	r2, #16
 8001084:	431a      	orrs	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800108e:	2201      	movs	r2, #1
 8001090:	431a      	orrs	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e007      	b.n	80010aa <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2201      	movs	r2, #1
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d1dc      	bne.n	8001062 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	0018      	movs	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b004      	add	sp, #16
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	80000017 	.word	0x80000017
 80010b8:	20000000 	.word	0x20000000
 80010bc:	000f4240 	.word	0x000f4240

080010c0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d2:	2250      	movs	r2, #80	; 0x50
 80010d4:	4013      	ands	r3, r2
 80010d6:	d140      	bne.n	800115a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010dc:	2280      	movs	r2, #128	; 0x80
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	431a      	orrs	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	23c0      	movs	r3, #192	; 0xc0
 80010ee:	011b      	lsls	r3, r3, #4
 80010f0:	4013      	ands	r3, r2
 80010f2:	d12d      	bne.n	8001150 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d129      	bne.n	8001150 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2208      	movs	r2, #8
 8001104:	4013      	ands	r3, r2
 8001106:	2b08      	cmp	r3, #8
 8001108:	d122      	bne.n	8001150 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	2204      	movs	r2, #4
 8001112:	4013      	ands	r3, r2
 8001114:	d110      	bne.n	8001138 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	210c      	movs	r1, #12
 8001122:	438a      	bics	r2, r1
 8001124:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800112a:	4a11      	ldr	r2, [pc, #68]	; (8001170 <ADC_DMAConvCplt+0xb0>)
 800112c:	4013      	ands	r3, r2
 800112e:	2201      	movs	r2, #1
 8001130:	431a      	orrs	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	639a      	str	r2, [r3, #56]	; 0x38
 8001136:	e00b      	b.n	8001150 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800113c:	2220      	movs	r2, #32
 800113e:	431a      	orrs	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001148:	2201      	movs	r2, #1
 800114a:	431a      	orrs	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	0018      	movs	r0, r3
 8001154:	f7ff fe0a 	bl	8000d6c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001158:	e005      	b.n	8001166 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	0010      	movs	r0, r2
 8001164:	4798      	blx	r3
}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	46bd      	mov	sp, r7
 800116a:	b004      	add	sp, #16
 800116c:	bd80      	pop	{r7, pc}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	fffffefe 	.word	0xfffffefe

08001174 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	0018      	movs	r0, r3
 8001186:	f7ff fdf9 	bl	8000d7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	b004      	add	sp, #16
 8001190:	bd80      	pop	{r7, pc}

08001192 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a4:	2240      	movs	r2, #64	; 0x40
 80011a6:	431a      	orrs	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b0:	2204      	movs	r2, #4
 80011b2:	431a      	orrs	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	0018      	movs	r0, r3
 80011bc:	f7ff fde6 	bl	8000d8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80011c0:	46c0      	nop			; (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b004      	add	sp, #16
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	0002      	movs	r2, r0
 80011d0:	1dfb      	adds	r3, r7, #7
 80011d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	1dfb      	adds	r3, r7, #7
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b7f      	cmp	r3, #127	; 0x7f
 80011da:	d809      	bhi.n	80011f0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011dc:	1dfb      	adds	r3, r7, #7
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	001a      	movs	r2, r3
 80011e2:	231f      	movs	r3, #31
 80011e4:	401a      	ands	r2, r3
 80011e6:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <__NVIC_EnableIRQ+0x30>)
 80011e8:	2101      	movs	r1, #1
 80011ea:	4091      	lsls	r1, r2
 80011ec:	000a      	movs	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]
  }
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	e000e100 	.word	0xe000e100

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	0002      	movs	r2, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b7f      	cmp	r3, #127	; 0x7f
 8001210:	d828      	bhi.n	8001264 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001212:	4a2f      	ldr	r2, [pc, #188]	; (80012d0 <__NVIC_SetPriority+0xd4>)
 8001214:	1dfb      	adds	r3, r7, #7
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b25b      	sxtb	r3, r3
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	33c0      	adds	r3, #192	; 0xc0
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	589b      	ldr	r3, [r3, r2]
 8001222:	1dfa      	adds	r2, r7, #7
 8001224:	7812      	ldrb	r2, [r2, #0]
 8001226:	0011      	movs	r1, r2
 8001228:	2203      	movs	r2, #3
 800122a:	400a      	ands	r2, r1
 800122c:	00d2      	lsls	r2, r2, #3
 800122e:	21ff      	movs	r1, #255	; 0xff
 8001230:	4091      	lsls	r1, r2
 8001232:	000a      	movs	r2, r1
 8001234:	43d2      	mvns	r2, r2
 8001236:	401a      	ands	r2, r3
 8001238:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	019b      	lsls	r3, r3, #6
 800123e:	22ff      	movs	r2, #255	; 0xff
 8001240:	401a      	ands	r2, r3
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	0018      	movs	r0, r3
 8001248:	2303      	movs	r3, #3
 800124a:	4003      	ands	r3, r0
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001250:	481f      	ldr	r0, [pc, #124]	; (80012d0 <__NVIC_SetPriority+0xd4>)
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b25b      	sxtb	r3, r3
 8001258:	089b      	lsrs	r3, r3, #2
 800125a:	430a      	orrs	r2, r1
 800125c:	33c0      	adds	r3, #192	; 0xc0
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001262:	e031      	b.n	80012c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001264:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <__NVIC_SetPriority+0xd8>)
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	0019      	movs	r1, r3
 800126c:	230f      	movs	r3, #15
 800126e:	400b      	ands	r3, r1
 8001270:	3b08      	subs	r3, #8
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3306      	adds	r3, #6
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	18d3      	adds	r3, r2, r3
 800127a:	3304      	adds	r3, #4
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	1dfa      	adds	r2, r7, #7
 8001280:	7812      	ldrb	r2, [r2, #0]
 8001282:	0011      	movs	r1, r2
 8001284:	2203      	movs	r2, #3
 8001286:	400a      	ands	r2, r1
 8001288:	00d2      	lsls	r2, r2, #3
 800128a:	21ff      	movs	r1, #255	; 0xff
 800128c:	4091      	lsls	r1, r2
 800128e:	000a      	movs	r2, r1
 8001290:	43d2      	mvns	r2, r2
 8001292:	401a      	ands	r2, r3
 8001294:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	019b      	lsls	r3, r3, #6
 800129a:	22ff      	movs	r2, #255	; 0xff
 800129c:	401a      	ands	r2, r3
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	0018      	movs	r0, r3
 80012a4:	2303      	movs	r3, #3
 80012a6:	4003      	ands	r3, r0
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ac:	4809      	ldr	r0, [pc, #36]	; (80012d4 <__NVIC_SetPriority+0xd8>)
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	001c      	movs	r4, r3
 80012b4:	230f      	movs	r3, #15
 80012b6:	4023      	ands	r3, r4
 80012b8:	3b08      	subs	r3, #8
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	430a      	orrs	r2, r1
 80012be:	3306      	adds	r3, #6
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	18c3      	adds	r3, r0, r3
 80012c4:	3304      	adds	r3, #4
 80012c6:	601a      	str	r2, [r3, #0]
}
 80012c8:	46c0      	nop			; (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b003      	add	sp, #12
 80012ce:	bd90      	pop	{r4, r7, pc}
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	1e5a      	subs	r2, r3, #1
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	045b      	lsls	r3, r3, #17
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d301      	bcc.n	80012f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ec:	2301      	movs	r3, #1
 80012ee:	e010      	b.n	8001312 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <SysTick_Config+0x44>)
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	3a01      	subs	r2, #1
 80012f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f8:	2301      	movs	r3, #1
 80012fa:	425b      	negs	r3, r3
 80012fc:	2103      	movs	r1, #3
 80012fe:	0018      	movs	r0, r3
 8001300:	f7ff ff7c 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <SysTick_Config+0x44>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <SysTick_Config+0x44>)
 800130c:	2207      	movs	r2, #7
 800130e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001310:	2300      	movs	r3, #0
}
 8001312:	0018      	movs	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	b002      	add	sp, #8
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	e000e010 	.word	0xe000e010

08001320 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	210f      	movs	r1, #15
 800132c:	187b      	adds	r3, r7, r1
 800132e:	1c02      	adds	r2, r0, #0
 8001330:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	187b      	adds	r3, r7, r1
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b25b      	sxtb	r3, r3
 800133a:	0011      	movs	r1, r2
 800133c:	0018      	movs	r0, r3
 800133e:	f7ff ff5d 	bl	80011fc <__NVIC_SetPriority>
}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	b004      	add	sp, #16
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	0002      	movs	r2, r0
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b25b      	sxtb	r3, r3
 800135c:	0018      	movs	r0, r3
 800135e:	f7ff ff33 	bl	80011c8 <__NVIC_EnableIRQ>
}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	b002      	add	sp, #8
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	0018      	movs	r0, r3
 8001376:	f7ff ffaf 	bl	80012d8 <SysTick_Config>
 800137a:	0003      	movs	r3, r0
}
 800137c:	0018      	movs	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	b002      	add	sp, #8
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e036      	b.n	8001408 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2221      	movs	r2, #33	; 0x21
 800139e:	2102      	movs	r1, #2
 80013a0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4a18      	ldr	r2, [pc, #96]	; (8001410 <HAL_DMA_Init+0x8c>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80013ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	4313      	orrs	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	0018      	movs	r0, r3
 80013ec:	f000 f946 	bl	800167c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2221      	movs	r2, #33	; 0x21
 80013fa:	2101      	movs	r1, #1
 80013fc:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2220      	movs	r2, #32
 8001402:	2100      	movs	r1, #0
 8001404:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}  
 8001408:	0018      	movs	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	b004      	add	sp, #16
 800140e:	bd80      	pop	{r7, pc}
 8001410:	ffffc00f 	.word	0xffffc00f

08001414 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001422:	2317      	movs	r3, #23
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2220      	movs	r2, #32
 800142e:	5c9b      	ldrb	r3, [r3, r2]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <HAL_DMA_Start_IT+0x24>
 8001434:	2302      	movs	r3, #2
 8001436:	e04f      	b.n	80014d8 <HAL_DMA_Start_IT+0xc4>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2220      	movs	r2, #32
 800143c:	2101      	movs	r1, #1
 800143e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2221      	movs	r2, #33	; 0x21
 8001444:	5c9b      	ldrb	r3, [r3, r2]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b01      	cmp	r3, #1
 800144a:	d13a      	bne.n	80014c2 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2221      	movs	r2, #33	; 0x21
 8001450:	2102      	movs	r1, #2
 8001452:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2200      	movs	r2, #0
 8001458:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2101      	movs	r1, #1
 8001466:	438a      	bics	r2, r1
 8001468:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	68b9      	ldr	r1, [r7, #8]
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f000 f8d7 	bl	8001624 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147a:	2b00      	cmp	r3, #0
 800147c:	d008      	beq.n	8001490 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	210e      	movs	r1, #14
 800148a:	430a      	orrs	r2, r1
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	e00f      	b.n	80014b0 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	210a      	movs	r1, #10
 800149c:	430a      	orrs	r2, r1
 800149e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2104      	movs	r1, #4
 80014ac:	438a      	bics	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2101      	movs	r1, #1
 80014bc:	430a      	orrs	r2, r1
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	e007      	b.n	80014d2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2220      	movs	r2, #32
 80014c6:	2100      	movs	r1, #0
 80014c8:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80014ca:	2317      	movs	r3, #23
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	2202      	movs	r2, #2
 80014d0:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80014d2:	2317      	movs	r3, #23
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	781b      	ldrb	r3, [r3, #0]
} 
 80014d8:	0018      	movs	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	b006      	add	sp, #24
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	2204      	movs	r2, #4
 80014fe:	409a      	lsls	r2, r3
 8001500:	0013      	movs	r3, r2
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	4013      	ands	r3, r2
 8001506:	d024      	beq.n	8001552 <HAL_DMA_IRQHandler+0x72>
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	2204      	movs	r2, #4
 800150c:	4013      	ands	r3, r2
 800150e:	d020      	beq.n	8001552 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2220      	movs	r2, #32
 8001518:	4013      	ands	r3, r2
 800151a:	d107      	bne.n	800152c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2104      	movs	r1, #4
 8001528:	438a      	bics	r2, r1
 800152a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001534:	2104      	movs	r1, #4
 8001536:	4091      	lsls	r1, r2
 8001538:	000a      	movs	r2, r1
 800153a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001540:	2b00      	cmp	r3, #0
 8001542:	d100      	bne.n	8001546 <HAL_DMA_IRQHandler+0x66>
 8001544:	e06a      	b.n	800161c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	0010      	movs	r0, r2
 800154e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001550:	e064      	b.n	800161c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	2202      	movs	r2, #2
 8001558:	409a      	lsls	r2, r3
 800155a:	0013      	movs	r3, r2
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4013      	ands	r3, r2
 8001560:	d02b      	beq.n	80015ba <HAL_DMA_IRQHandler+0xda>
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	2202      	movs	r2, #2
 8001566:	4013      	ands	r3, r2
 8001568:	d027      	beq.n	80015ba <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2220      	movs	r2, #32
 8001572:	4013      	ands	r3, r2
 8001574:	d10b      	bne.n	800158e <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	210a      	movs	r1, #10
 8001582:	438a      	bics	r2, r1
 8001584:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2221      	movs	r2, #33	; 0x21
 800158a:	2101      	movs	r1, #1
 800158c:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001596:	2102      	movs	r1, #2
 8001598:	4091      	lsls	r1, r2
 800159a:	000a      	movs	r2, r1
 800159c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2220      	movs	r2, #32
 80015a2:	2100      	movs	r1, #0
 80015a4:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d036      	beq.n	800161c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	0010      	movs	r0, r2
 80015b6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80015b8:	e030      	b.n	800161c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	2208      	movs	r2, #8
 80015c0:	409a      	lsls	r2, r3
 80015c2:	0013      	movs	r3, r2
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	4013      	ands	r3, r2
 80015c8:	d028      	beq.n	800161c <HAL_DMA_IRQHandler+0x13c>
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	2208      	movs	r2, #8
 80015ce:	4013      	ands	r3, r2
 80015d0:	d024      	beq.n	800161c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	210e      	movs	r1, #14
 80015de:	438a      	bics	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ea:	2101      	movs	r1, #1
 80015ec:	4091      	lsls	r1, r2
 80015ee:	000a      	movs	r2, r1
 80015f0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2221      	movs	r2, #33	; 0x21
 80015fc:	2101      	movs	r1, #1
 80015fe:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2220      	movs	r2, #32
 8001604:	2100      	movs	r1, #0
 8001606:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	0010      	movs	r0, r2
 8001618:	4798      	blx	r3
    }
   }
}  
 800161a:	e7ff      	b.n	800161c <HAL_DMA_IRQHandler+0x13c>
 800161c:	46c0      	nop			; (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	b004      	add	sp, #16
 8001622:	bd80      	pop	{r7, pc}

08001624 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163a:	2101      	movs	r1, #1
 800163c:	4091      	lsls	r1, r2
 800163e:	000a      	movs	r2, r1
 8001640:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b10      	cmp	r3, #16
 8001650:	d108      	bne.n	8001664 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001662:	e007      	b.n	8001674 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	60da      	str	r2, [r3, #12]
}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	b004      	add	sp, #16
 800167a:	bd80      	pop	{r7, pc}

0800167c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a08      	ldr	r2, [pc, #32]	; (80016ac <DMA_CalcBaseAndBitshift+0x30>)
 800168a:	4694      	mov	ip, r2
 800168c:	4463      	add	r3, ip
 800168e:	2114      	movs	r1, #20
 8001690:	0018      	movs	r0, r3
 8001692:	f7fe fd4b 	bl	800012c <__udivsi3>
 8001696:	0003      	movs	r3, r0
 8001698:	009a      	lsls	r2, r3, #2
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a03      	ldr	r2, [pc, #12]	; (80016b0 <DMA_CalcBaseAndBitshift+0x34>)
 80016a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80016a4:	46c0      	nop			; (mov r8, r8)
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b002      	add	sp, #8
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	bffdfff8 	.word	0xbffdfff8
 80016b0:	40020000 	.word	0x40020000

080016b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c2:	e149      	b.n	8001958 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2101      	movs	r1, #1
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	4091      	lsls	r1, r2
 80016ce:	000a      	movs	r2, r1
 80016d0:	4013      	ands	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d100      	bne.n	80016dc <HAL_GPIO_Init+0x28>
 80016da:	e13a      	b.n	8001952 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2203      	movs	r2, #3
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d005      	beq.n	80016f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2203      	movs	r2, #3
 80016ee:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d130      	bne.n	8001756 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	409a      	lsls	r2, r3
 8001702:	0013      	movs	r3, r2
 8001704:	43da      	mvns	r2, r3
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	409a      	lsls	r2, r3
 8001716:	0013      	movs	r3, r2
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800172a:	2201      	movs	r2, #1
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	409a      	lsls	r2, r3
 8001730:	0013      	movs	r3, r2
 8001732:	43da      	mvns	r2, r3
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	091b      	lsrs	r3, r3, #4
 8001740:	2201      	movs	r2, #1
 8001742:	401a      	ands	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	409a      	lsls	r2, r3
 8001748:	0013      	movs	r3, r2
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2203      	movs	r2, #3
 800175c:	4013      	ands	r3, r2
 800175e:	2b03      	cmp	r3, #3
 8001760:	d017      	beq.n	8001792 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	409a      	lsls	r2, r3
 8001770:	0013      	movs	r3, r2
 8001772:	43da      	mvns	r2, r3
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	409a      	lsls	r2, r3
 8001784:	0013      	movs	r3, r2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2203      	movs	r2, #3
 8001798:	4013      	ands	r3, r2
 800179a:	2b02      	cmp	r3, #2
 800179c:	d123      	bne.n	80017e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	08da      	lsrs	r2, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3208      	adds	r2, #8
 80017a6:	0092      	lsls	r2, r2, #2
 80017a8:	58d3      	ldr	r3, [r2, r3]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	2207      	movs	r2, #7
 80017b0:	4013      	ands	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	220f      	movs	r2, #15
 80017b6:	409a      	lsls	r2, r3
 80017b8:	0013      	movs	r3, r2
 80017ba:	43da      	mvns	r2, r3
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	691a      	ldr	r2, [r3, #16]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2107      	movs	r1, #7
 80017ca:	400b      	ands	r3, r1
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	409a      	lsls	r2, r3
 80017d0:	0013      	movs	r3, r2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	08da      	lsrs	r2, r3, #3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3208      	adds	r2, #8
 80017e0:	0092      	lsls	r2, r2, #2
 80017e2:	6939      	ldr	r1, [r7, #16]
 80017e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	2203      	movs	r2, #3
 80017f2:	409a      	lsls	r2, r3
 80017f4:	0013      	movs	r3, r2
 80017f6:	43da      	mvns	r2, r3
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2203      	movs	r2, #3
 8001804:	401a      	ands	r2, r3
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	409a      	lsls	r2, r3
 800180c:	0013      	movs	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	23c0      	movs	r3, #192	; 0xc0
 8001820:	029b      	lsls	r3, r3, #10
 8001822:	4013      	ands	r3, r2
 8001824:	d100      	bne.n	8001828 <HAL_GPIO_Init+0x174>
 8001826:	e094      	b.n	8001952 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001828:	4b51      	ldr	r3, [pc, #324]	; (8001970 <HAL_GPIO_Init+0x2bc>)
 800182a:	699a      	ldr	r2, [r3, #24]
 800182c:	4b50      	ldr	r3, [pc, #320]	; (8001970 <HAL_GPIO_Init+0x2bc>)
 800182e:	2101      	movs	r1, #1
 8001830:	430a      	orrs	r2, r1
 8001832:	619a      	str	r2, [r3, #24]
 8001834:	4b4e      	ldr	r3, [pc, #312]	; (8001970 <HAL_GPIO_Init+0x2bc>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	2201      	movs	r2, #1
 800183a:	4013      	ands	r3, r2
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001840:	4a4c      	ldr	r2, [pc, #304]	; (8001974 <HAL_GPIO_Init+0x2c0>)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	089b      	lsrs	r3, r3, #2
 8001846:	3302      	adds	r3, #2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	589b      	ldr	r3, [r3, r2]
 800184c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	2203      	movs	r2, #3
 8001852:	4013      	ands	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	220f      	movs	r2, #15
 8001858:	409a      	lsls	r2, r3
 800185a:	0013      	movs	r3, r2
 800185c:	43da      	mvns	r2, r3
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	2390      	movs	r3, #144	; 0x90
 8001868:	05db      	lsls	r3, r3, #23
 800186a:	429a      	cmp	r2, r3
 800186c:	d00d      	beq.n	800188a <HAL_GPIO_Init+0x1d6>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a41      	ldr	r2, [pc, #260]	; (8001978 <HAL_GPIO_Init+0x2c4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d007      	beq.n	8001886 <HAL_GPIO_Init+0x1d2>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a40      	ldr	r2, [pc, #256]	; (800197c <HAL_GPIO_Init+0x2c8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d101      	bne.n	8001882 <HAL_GPIO_Init+0x1ce>
 800187e:	2302      	movs	r3, #2
 8001880:	e004      	b.n	800188c <HAL_GPIO_Init+0x1d8>
 8001882:	2305      	movs	r3, #5
 8001884:	e002      	b.n	800188c <HAL_GPIO_Init+0x1d8>
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <HAL_GPIO_Init+0x1d8>
 800188a:	2300      	movs	r3, #0
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	2103      	movs	r1, #3
 8001890:	400a      	ands	r2, r1
 8001892:	0092      	lsls	r2, r2, #2
 8001894:	4093      	lsls	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800189c:	4935      	ldr	r1, [pc, #212]	; (8001974 <HAL_GPIO_Init+0x2c0>)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	3302      	adds	r3, #2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018aa:	4b35      	ldr	r3, [pc, #212]	; (8001980 <HAL_GPIO_Init+0x2cc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43da      	mvns	r2, r3
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	025b      	lsls	r3, r3, #9
 80018c2:	4013      	ands	r3, r2
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018ce:	4b2c      	ldr	r3, [pc, #176]	; (8001980 <HAL_GPIO_Init+0x2cc>)
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80018d4:	4b2a      	ldr	r3, [pc, #168]	; (8001980 <HAL_GPIO_Init+0x2cc>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	43da      	mvns	r2, r3
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	029b      	lsls	r3, r3, #10
 80018ec:	4013      	ands	r3, r2
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018f8:	4b21      	ldr	r3, [pc, #132]	; (8001980 <HAL_GPIO_Init+0x2cc>)
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018fe:	4b20      	ldr	r3, [pc, #128]	; (8001980 <HAL_GPIO_Init+0x2cc>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	43da      	mvns	r2, r3
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	035b      	lsls	r3, r3, #13
 8001916:	4013      	ands	r3, r2
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <HAL_GPIO_Init+0x2cc>)
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_GPIO_Init+0x2cc>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	43da      	mvns	r2, r3
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	039b      	lsls	r3, r3, #14
 8001940:	4013      	ands	r3, r2
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <HAL_GPIO_Init+0x2cc>)
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3301      	adds	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	40da      	lsrs	r2, r3
 8001960:	1e13      	subs	r3, r2, #0
 8001962:	d000      	beq.n	8001966 <HAL_GPIO_Init+0x2b2>
 8001964:	e6ae      	b.n	80016c4 <HAL_GPIO_Init+0x10>
  } 
}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	46c0      	nop			; (mov r8, r8)
 800196a:	46bd      	mov	sp, r7
 800196c:	b006      	add	sp, #24
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40021000 	.word	0x40021000
 8001974:	40010000 	.word	0x40010000
 8001978:	48000400 	.word	0x48000400
 800197c:	48000800 	.word	0x48000800
 8001980:	40010400 	.word	0x40010400

08001984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	0008      	movs	r0, r1
 800198e:	0011      	movs	r1, r2
 8001990:	1cbb      	adds	r3, r7, #2
 8001992:	1c02      	adds	r2, r0, #0
 8001994:	801a      	strh	r2, [r3, #0]
 8001996:	1c7b      	adds	r3, r7, #1
 8001998:	1c0a      	adds	r2, r1, #0
 800199a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800199c:	1c7b      	adds	r3, r7, #1
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d004      	beq.n	80019ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019a4:	1cbb      	adds	r3, r7, #2
 80019a6:	881a      	ldrh	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019ac:	e003      	b.n	80019b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ae:	1cbb      	adds	r3, r7, #2
 80019b0:	881a      	ldrh	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b002      	add	sp, #8
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d102      	bne.n	80019d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	f000 fb76 	bl	80020c0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2201      	movs	r2, #1
 80019da:	4013      	ands	r3, r2
 80019dc:	d100      	bne.n	80019e0 <HAL_RCC_OscConfig+0x20>
 80019de:	e08e      	b.n	8001afe <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019e0:	4bc5      	ldr	r3, [pc, #788]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	220c      	movs	r2, #12
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d00e      	beq.n	8001a0a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019ec:	4bc2      	ldr	r3, [pc, #776]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	220c      	movs	r2, #12
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d117      	bne.n	8001a28 <HAL_RCC_OscConfig+0x68>
 80019f8:	4bbf      	ldr	r3, [pc, #764]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	23c0      	movs	r3, #192	; 0xc0
 80019fe:	025b      	lsls	r3, r3, #9
 8001a00:	401a      	ands	r2, r3
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	025b      	lsls	r3, r3, #9
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d10e      	bne.n	8001a28 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0a:	4bbb      	ldr	r3, [pc, #748]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	029b      	lsls	r3, r3, #10
 8001a12:	4013      	ands	r3, r2
 8001a14:	d100      	bne.n	8001a18 <HAL_RCC_OscConfig+0x58>
 8001a16:	e071      	b.n	8001afc <HAL_RCC_OscConfig+0x13c>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d000      	beq.n	8001a22 <HAL_RCC_OscConfig+0x62>
 8001a20:	e06c      	b.n	8001afc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	f000 fb4c 	bl	80020c0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d107      	bne.n	8001a40 <HAL_RCC_OscConfig+0x80>
 8001a30:	4bb1      	ldr	r3, [pc, #708]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4bb0      	ldr	r3, [pc, #704]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001a36:	2180      	movs	r1, #128	; 0x80
 8001a38:	0249      	lsls	r1, r1, #9
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e02f      	b.n	8001aa0 <HAL_RCC_OscConfig+0xe0>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10c      	bne.n	8001a62 <HAL_RCC_OscConfig+0xa2>
 8001a48:	4bab      	ldr	r3, [pc, #684]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4baa      	ldr	r3, [pc, #680]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001a4e:	49ab      	ldr	r1, [pc, #684]	; (8001cfc <HAL_RCC_OscConfig+0x33c>)
 8001a50:	400a      	ands	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	4ba8      	ldr	r3, [pc, #672]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4ba7      	ldr	r3, [pc, #668]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001a5a:	49a9      	ldr	r1, [pc, #676]	; (8001d00 <HAL_RCC_OscConfig+0x340>)
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	e01e      	b.n	8001aa0 <HAL_RCC_OscConfig+0xe0>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b05      	cmp	r3, #5
 8001a68:	d10e      	bne.n	8001a88 <HAL_RCC_OscConfig+0xc8>
 8001a6a:	4ba3      	ldr	r3, [pc, #652]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	4ba2      	ldr	r3, [pc, #648]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001a70:	2180      	movs	r1, #128	; 0x80
 8001a72:	02c9      	lsls	r1, r1, #11
 8001a74:	430a      	orrs	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	4b9f      	ldr	r3, [pc, #636]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b9e      	ldr	r3, [pc, #632]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001a7e:	2180      	movs	r1, #128	; 0x80
 8001a80:	0249      	lsls	r1, r1, #9
 8001a82:	430a      	orrs	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	e00b      	b.n	8001aa0 <HAL_RCC_OscConfig+0xe0>
 8001a88:	4b9b      	ldr	r3, [pc, #620]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b9a      	ldr	r3, [pc, #616]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001a8e:	499b      	ldr	r1, [pc, #620]	; (8001cfc <HAL_RCC_OscConfig+0x33c>)
 8001a90:	400a      	ands	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	4b98      	ldr	r3, [pc, #608]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b97      	ldr	r3, [pc, #604]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001a9a:	4999      	ldr	r1, [pc, #612]	; (8001d00 <HAL_RCC_OscConfig+0x340>)
 8001a9c:	400a      	ands	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d014      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7fe ff94 	bl	80009d4 <HAL_GetTick>
 8001aac:	0003      	movs	r3, r0
 8001aae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab2:	f7fe ff8f 	bl	80009d4 <HAL_GetTick>
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b64      	cmp	r3, #100	; 0x64
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e2fd      	b.n	80020c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac4:	4b8c      	ldr	r3, [pc, #560]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	029b      	lsls	r3, r3, #10
 8001acc:	4013      	ands	r3, r2
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0xf2>
 8001ad0:	e015      	b.n	8001afe <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7fe ff7f 	bl	80009d4 <HAL_GetTick>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001adc:	f7fe ff7a 	bl	80009d4 <HAL_GetTick>
 8001ae0:	0002      	movs	r2, r0
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b64      	cmp	r3, #100	; 0x64
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e2e8      	b.n	80020c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aee:	4b82      	ldr	r3, [pc, #520]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	029b      	lsls	r3, r3, #10
 8001af6:	4013      	ands	r3, r2
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x11c>
 8001afa:	e000      	b.n	8001afe <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2202      	movs	r2, #2
 8001b04:	4013      	ands	r3, r2
 8001b06:	d100      	bne.n	8001b0a <HAL_RCC_OscConfig+0x14a>
 8001b08:	e06c      	b.n	8001be4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b0a:	4b7b      	ldr	r3, [pc, #492]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	220c      	movs	r2, #12
 8001b10:	4013      	ands	r3, r2
 8001b12:	d00e      	beq.n	8001b32 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b14:	4b78      	ldr	r3, [pc, #480]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	220c      	movs	r2, #12
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d11f      	bne.n	8001b60 <HAL_RCC_OscConfig+0x1a0>
 8001b20:	4b75      	ldr	r3, [pc, #468]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	23c0      	movs	r3, #192	; 0xc0
 8001b26:	025b      	lsls	r3, r3, #9
 8001b28:	401a      	ands	r2, r3
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	021b      	lsls	r3, r3, #8
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d116      	bne.n	8001b60 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b32:	4b71      	ldr	r3, [pc, #452]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2202      	movs	r2, #2
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_OscConfig+0x188>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d001      	beq.n	8001b48 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e2bb      	b.n	80020c0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b48:	4b6b      	ldr	r3, [pc, #428]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	22f8      	movs	r2, #248	; 0xf8
 8001b4e:	4393      	bics	r3, r2
 8001b50:	0019      	movs	r1, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	00da      	lsls	r2, r3, #3
 8001b58:	4b67      	ldr	r3, [pc, #412]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5e:	e041      	b.n	8001be4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d024      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b68:	4b63      	ldr	r3, [pc, #396]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b62      	ldr	r3, [pc, #392]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001b6e:	2101      	movs	r1, #1
 8001b70:	430a      	orrs	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7fe ff2e 	bl	80009d4 <HAL_GetTick>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b7e:	f7fe ff29 	bl	80009d4 <HAL_GetTick>
 8001b82:	0002      	movs	r2, r0
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e297      	b.n	80020c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b90:	4b59      	ldr	r3, [pc, #356]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2202      	movs	r2, #2
 8001b96:	4013      	ands	r3, r2
 8001b98:	d0f1      	beq.n	8001b7e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9a:	4b57      	ldr	r3, [pc, #348]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	22f8      	movs	r2, #248	; 0xf8
 8001ba0:	4393      	bics	r3, r2
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	00da      	lsls	r2, r3, #3
 8001baa:	4b53      	ldr	r3, [pc, #332]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001bac:	430a      	orrs	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	e018      	b.n	8001be4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb2:	4b51      	ldr	r3, [pc, #324]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	4b50      	ldr	r3, [pc, #320]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001bb8:	2101      	movs	r1, #1
 8001bba:	438a      	bics	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbe:	f7fe ff09 	bl	80009d4 <HAL_GetTick>
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc8:	f7fe ff04 	bl	80009d4 <HAL_GetTick>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e272      	b.n	80020c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bda:	4b47      	ldr	r3, [pc, #284]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2202      	movs	r2, #2
 8001be0:	4013      	ands	r3, r2
 8001be2:	d1f1      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2208      	movs	r2, #8
 8001bea:	4013      	ands	r3, r2
 8001bec:	d036      	beq.n	8001c5c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d019      	beq.n	8001c2a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf6:	4b40      	ldr	r3, [pc, #256]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bfa:	4b3f      	ldr	r3, [pc, #252]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c02:	f7fe fee7 	bl	80009d4 <HAL_GetTick>
 8001c06:	0003      	movs	r3, r0
 8001c08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c0c:	f7fe fee2 	bl	80009d4 <HAL_GetTick>
 8001c10:	0002      	movs	r2, r0
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e250      	b.n	80020c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1e:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	2202      	movs	r2, #2
 8001c24:	4013      	ands	r3, r2
 8001c26:	d0f1      	beq.n	8001c0c <HAL_RCC_OscConfig+0x24c>
 8001c28:	e018      	b.n	8001c5c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c2a:	4b33      	ldr	r3, [pc, #204]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001c2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c2e:	4b32      	ldr	r3, [pc, #200]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001c30:	2101      	movs	r1, #1
 8001c32:	438a      	bics	r2, r1
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c36:	f7fe fecd 	bl	80009d4 <HAL_GetTick>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c40:	f7fe fec8 	bl	80009d4 <HAL_GetTick>
 8001c44:	0002      	movs	r2, r0
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e236      	b.n	80020c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c52:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	2202      	movs	r2, #2
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d1f1      	bne.n	8001c40 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2204      	movs	r2, #4
 8001c62:	4013      	ands	r3, r2
 8001c64:	d100      	bne.n	8001c68 <HAL_RCC_OscConfig+0x2a8>
 8001c66:	e0b5      	b.n	8001dd4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c68:	201f      	movs	r0, #31
 8001c6a:	183b      	adds	r3, r7, r0
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c70:	4b21      	ldr	r3, [pc, #132]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001c72:	69da      	ldr	r2, [r3, #28]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	055b      	lsls	r3, r3, #21
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d110      	bne.n	8001c9e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7c:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001c7e:	69da      	ldr	r2, [r3, #28]
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001c82:	2180      	movs	r1, #128	; 0x80
 8001c84:	0549      	lsls	r1, r1, #21
 8001c86:	430a      	orrs	r2, r1
 8001c88:	61da      	str	r2, [r3, #28]
 8001c8a:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001c8c:	69da      	ldr	r2, [r3, #28]
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	055b      	lsls	r3, r3, #21
 8001c92:	4013      	ands	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c98:	183b      	adds	r3, r7, r0
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9e:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <HAL_RCC_OscConfig+0x344>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d11a      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001caa:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <HAL_RCC_OscConfig+0x344>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_RCC_OscConfig+0x344>)
 8001cb0:	2180      	movs	r1, #128	; 0x80
 8001cb2:	0049      	lsls	r1, r1, #1
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb8:	f7fe fe8c 	bl	80009d4 <HAL_GetTick>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc2:	f7fe fe87 	bl	80009d4 <HAL_GetTick>
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b64      	cmp	r3, #100	; 0x64
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e1f5      	b.n	80020c0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_RCC_OscConfig+0x344>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d10f      	bne.n	8001d08 <HAL_RCC_OscConfig+0x348>
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001cea:	6a1a      	ldr	r2, [r3, #32]
 8001cec:	4b02      	ldr	r3, [pc, #8]	; (8001cf8 <HAL_RCC_OscConfig+0x338>)
 8001cee:	2101      	movs	r1, #1
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	621a      	str	r2, [r3, #32]
 8001cf4:	e036      	b.n	8001d64 <HAL_RCC_OscConfig+0x3a4>
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	fffeffff 	.word	0xfffeffff
 8001d00:	fffbffff 	.word	0xfffbffff
 8001d04:	40007000 	.word	0x40007000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10c      	bne.n	8001d2a <HAL_RCC_OscConfig+0x36a>
 8001d10:	4bca      	ldr	r3, [pc, #808]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001d12:	6a1a      	ldr	r2, [r3, #32]
 8001d14:	4bc9      	ldr	r3, [pc, #804]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001d16:	2101      	movs	r1, #1
 8001d18:	438a      	bics	r2, r1
 8001d1a:	621a      	str	r2, [r3, #32]
 8001d1c:	4bc7      	ldr	r3, [pc, #796]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001d1e:	6a1a      	ldr	r2, [r3, #32]
 8001d20:	4bc6      	ldr	r3, [pc, #792]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001d22:	2104      	movs	r1, #4
 8001d24:	438a      	bics	r2, r1
 8001d26:	621a      	str	r2, [r3, #32]
 8001d28:	e01c      	b.n	8001d64 <HAL_RCC_OscConfig+0x3a4>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2b05      	cmp	r3, #5
 8001d30:	d10c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x38c>
 8001d32:	4bc2      	ldr	r3, [pc, #776]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001d34:	6a1a      	ldr	r2, [r3, #32]
 8001d36:	4bc1      	ldr	r3, [pc, #772]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001d38:	2104      	movs	r1, #4
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	621a      	str	r2, [r3, #32]
 8001d3e:	4bbf      	ldr	r3, [pc, #764]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001d40:	6a1a      	ldr	r2, [r3, #32]
 8001d42:	4bbe      	ldr	r3, [pc, #760]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001d44:	2101      	movs	r1, #1
 8001d46:	430a      	orrs	r2, r1
 8001d48:	621a      	str	r2, [r3, #32]
 8001d4a:	e00b      	b.n	8001d64 <HAL_RCC_OscConfig+0x3a4>
 8001d4c:	4bbb      	ldr	r3, [pc, #748]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001d4e:	6a1a      	ldr	r2, [r3, #32]
 8001d50:	4bba      	ldr	r3, [pc, #744]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001d52:	2101      	movs	r1, #1
 8001d54:	438a      	bics	r2, r1
 8001d56:	621a      	str	r2, [r3, #32]
 8001d58:	4bb8      	ldr	r3, [pc, #736]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001d5a:	6a1a      	ldr	r2, [r3, #32]
 8001d5c:	4bb7      	ldr	r3, [pc, #732]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001d5e:	2104      	movs	r1, #4
 8001d60:	438a      	bics	r2, r1
 8001d62:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d014      	beq.n	8001d96 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6c:	f7fe fe32 	bl	80009d4 <HAL_GetTick>
 8001d70:	0003      	movs	r3, r0
 8001d72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d74:	e009      	b.n	8001d8a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d76:	f7fe fe2d 	bl	80009d4 <HAL_GetTick>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	4aaf      	ldr	r2, [pc, #700]	; (8002040 <HAL_RCC_OscConfig+0x680>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e19a      	b.n	80020c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8a:	4bac      	ldr	r3, [pc, #688]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	4013      	ands	r3, r2
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x3b6>
 8001d94:	e013      	b.n	8001dbe <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d96:	f7fe fe1d 	bl	80009d4 <HAL_GetTick>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d9e:	e009      	b.n	8001db4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da0:	f7fe fe18 	bl	80009d4 <HAL_GetTick>
 8001da4:	0002      	movs	r2, r0
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	4aa5      	ldr	r2, [pc, #660]	; (8002040 <HAL_RCC_OscConfig+0x680>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e185      	b.n	80020c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db4:	4ba1      	ldr	r3, [pc, #644]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	2202      	movs	r2, #2
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dbe:	231f      	movs	r3, #31
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d105      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc8:	4b9c      	ldr	r3, [pc, #624]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001dca:	69da      	ldr	r2, [r3, #28]
 8001dcc:	4b9b      	ldr	r3, [pc, #620]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001dce:	499d      	ldr	r1, [pc, #628]	; (8002044 <HAL_RCC_OscConfig+0x684>)
 8001dd0:	400a      	ands	r2, r1
 8001dd2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2210      	movs	r2, #16
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d063      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d12a      	bne.n	8001e3c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001de6:	4b95      	ldr	r3, [pc, #596]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dea:	4b94      	ldr	r3, [pc, #592]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001dec:	2104      	movs	r1, #4
 8001dee:	430a      	orrs	r2, r1
 8001df0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001df2:	4b92      	ldr	r3, [pc, #584]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df6:	4b91      	ldr	r3, [pc, #580]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001df8:	2101      	movs	r1, #1
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfe:	f7fe fde9 	bl	80009d4 <HAL_GetTick>
 8001e02:	0003      	movs	r3, r0
 8001e04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e08:	f7fe fde4 	bl	80009d4 <HAL_GetTick>
 8001e0c:	0002      	movs	r2, r0
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e152      	b.n	80020c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e1a:	4b88      	ldr	r3, [pc, #544]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1e:	2202      	movs	r2, #2
 8001e20:	4013      	ands	r3, r2
 8001e22:	d0f1      	beq.n	8001e08 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e24:	4b85      	ldr	r3, [pc, #532]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e28:	22f8      	movs	r2, #248	; 0xf8
 8001e2a:	4393      	bics	r3, r2
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	00da      	lsls	r2, r3, #3
 8001e34:	4b81      	ldr	r3, [pc, #516]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001e36:	430a      	orrs	r2, r1
 8001e38:	635a      	str	r2, [r3, #52]	; 0x34
 8001e3a:	e034      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	3305      	adds	r3, #5
 8001e42:	d111      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e44:	4b7d      	ldr	r3, [pc, #500]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e48:	4b7c      	ldr	r3, [pc, #496]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001e4a:	2104      	movs	r1, #4
 8001e4c:	438a      	bics	r2, r1
 8001e4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e50:	4b7a      	ldr	r3, [pc, #488]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e54:	22f8      	movs	r2, #248	; 0xf8
 8001e56:	4393      	bics	r3, r2
 8001e58:	0019      	movs	r1, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	00da      	lsls	r2, r3, #3
 8001e60:	4b76      	ldr	r3, [pc, #472]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001e62:	430a      	orrs	r2, r1
 8001e64:	635a      	str	r2, [r3, #52]	; 0x34
 8001e66:	e01e      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e68:	4b74      	ldr	r3, [pc, #464]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e6c:	4b73      	ldr	r3, [pc, #460]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001e6e:	2104      	movs	r1, #4
 8001e70:	430a      	orrs	r2, r1
 8001e72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e74:	4b71      	ldr	r3, [pc, #452]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e78:	4b70      	ldr	r3, [pc, #448]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	438a      	bics	r2, r1
 8001e7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e80:	f7fe fda8 	bl	80009d4 <HAL_GetTick>
 8001e84:	0003      	movs	r3, r0
 8001e86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e8a:	f7fe fda3 	bl	80009d4 <HAL_GetTick>
 8001e8e:	0002      	movs	r2, r0
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e111      	b.n	80020c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e9c:	4b67      	ldr	r3, [pc, #412]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d1f1      	bne.n	8001e8a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	4013      	ands	r3, r2
 8001eae:	d05c      	beq.n	8001f6a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001eb0:	4b62      	ldr	r3, [pc, #392]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	220c      	movs	r2, #12
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b0c      	cmp	r3, #12
 8001eba:	d00e      	beq.n	8001eda <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001ebc:	4b5f      	ldr	r3, [pc, #380]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	220c      	movs	r2, #12
 8001ec2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d114      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001ec8:	4b5c      	ldr	r3, [pc, #368]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	23c0      	movs	r3, #192	; 0xc0
 8001ece:	025b      	lsls	r3, r3, #9
 8001ed0:	401a      	ands	r2, r3
 8001ed2:	23c0      	movs	r3, #192	; 0xc0
 8001ed4:	025b      	lsls	r3, r3, #9
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d10b      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001eda:	4b58      	ldr	r3, [pc, #352]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	025b      	lsls	r3, r3, #9
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d040      	beq.n	8001f68 <HAL_RCC_OscConfig+0x5a8>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d03c      	beq.n	8001f68 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e0e6      	b.n	80020c0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d01b      	beq.n	8001f32 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001efa:	4b50      	ldr	r3, [pc, #320]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001efe:	4b4f      	ldr	r3, [pc, #316]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001f00:	2180      	movs	r1, #128	; 0x80
 8001f02:	0249      	lsls	r1, r1, #9
 8001f04:	430a      	orrs	r2, r1
 8001f06:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7fe fd64 	bl	80009d4 <HAL_GetTick>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f12:	f7fe fd5f 	bl	80009d4 <HAL_GetTick>
 8001f16:	0002      	movs	r2, r0
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e0cd      	b.n	80020c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f24:	4b45      	ldr	r3, [pc, #276]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	025b      	lsls	r3, r3, #9
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d0f0      	beq.n	8001f12 <HAL_RCC_OscConfig+0x552>
 8001f30:	e01b      	b.n	8001f6a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001f32:	4b42      	ldr	r3, [pc, #264]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f36:	4b41      	ldr	r3, [pc, #260]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001f38:	4943      	ldr	r1, [pc, #268]	; (8002048 <HAL_RCC_OscConfig+0x688>)
 8001f3a:	400a      	ands	r2, r1
 8001f3c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7fe fd49 	bl	80009d4 <HAL_GetTick>
 8001f42:	0003      	movs	r3, r0
 8001f44:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f48:	f7fe fd44 	bl	80009d4 <HAL_GetTick>
 8001f4c:	0002      	movs	r2, r0
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e0b2      	b.n	80020c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001f5a:	4b38      	ldr	r3, [pc, #224]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	025b      	lsls	r3, r3, #9
 8001f62:	4013      	ands	r3, r2
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x588>
 8001f66:	e000      	b.n	8001f6a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001f68:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d100      	bne.n	8001f74 <HAL_RCC_OscConfig+0x5b4>
 8001f72:	e0a4      	b.n	80020be <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f74:	4b31      	ldr	r3, [pc, #196]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	220c      	movs	r2, #12
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d100      	bne.n	8001f82 <HAL_RCC_OscConfig+0x5c2>
 8001f80:	e078      	b.n	8002074 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d14c      	bne.n	8002024 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8a:	4b2c      	ldr	r3, [pc, #176]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	4b2b      	ldr	r3, [pc, #172]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001f90:	492e      	ldr	r1, [pc, #184]	; (800204c <HAL_RCC_OscConfig+0x68c>)
 8001f92:	400a      	ands	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7fe fd1d 	bl	80009d4 <HAL_GetTick>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7fe fd18 	bl	80009d4 <HAL_GetTick>
 8001fa4:	0002      	movs	r2, r0
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e086      	b.n	80020c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb2:	4b22      	ldr	r3, [pc, #136]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	049b      	lsls	r3, r3, #18
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fbe:	4b1f      	ldr	r3, [pc, #124]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc2:	220f      	movs	r2, #15
 8001fc4:	4393      	bics	r3, r2
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4a1e      	ldr	r2, [pc, #120]	; (8002050 <HAL_RCC_OscConfig+0x690>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	0019      	movs	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fec:	4b13      	ldr	r3, [pc, #76]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8001ff2:	2180      	movs	r1, #128	; 0x80
 8001ff4:	0449      	lsls	r1, r1, #17
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffa:	f7fe fceb 	bl	80009d4 <HAL_GetTick>
 8001ffe:	0003      	movs	r3, r0
 8002000:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002004:	f7fe fce6 	bl	80009d4 <HAL_GetTick>
 8002008:	0002      	movs	r2, r0
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e054      	b.n	80020c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	049b      	lsls	r3, r3, #18
 800201e:	4013      	ands	r3, r2
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x644>
 8002022:	e04c      	b.n	80020be <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <HAL_RCC_OscConfig+0x67c>)
 800202a:	4908      	ldr	r1, [pc, #32]	; (800204c <HAL_RCC_OscConfig+0x68c>)
 800202c:	400a      	ands	r2, r1
 800202e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7fe fcd0 	bl	80009d4 <HAL_GetTick>
 8002034:	0003      	movs	r3, r0
 8002036:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002038:	e015      	b.n	8002066 <HAL_RCC_OscConfig+0x6a6>
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	40021000 	.word	0x40021000
 8002040:	00001388 	.word	0x00001388
 8002044:	efffffff 	.word	0xefffffff
 8002048:	fffeffff 	.word	0xfffeffff
 800204c:	feffffff 	.word	0xfeffffff
 8002050:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002054:	f7fe fcbe 	bl	80009d4 <HAL_GetTick>
 8002058:	0002      	movs	r2, r0
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e02c      	b.n	80020c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002066:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <HAL_RCC_OscConfig+0x708>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	2380      	movs	r3, #128	; 0x80
 800206c:	049b      	lsls	r3, r3, #18
 800206e:	4013      	ands	r3, r2
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x694>
 8002072:	e024      	b.n	80020be <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e01f      	b.n	80020c0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_RCC_OscConfig+0x708>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HAL_RCC_OscConfig+0x708>)
 8002088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	23c0      	movs	r3, #192	; 0xc0
 8002090:	025b      	lsls	r3, r3, #9
 8002092:	401a      	ands	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	429a      	cmp	r2, r3
 800209a:	d10e      	bne.n	80020ba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	220f      	movs	r2, #15
 80020a0:	401a      	ands	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	23f0      	movs	r3, #240	; 0xf0
 80020ae:	039b      	lsls	r3, r3, #14
 80020b0:	401a      	ands	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d001      	beq.n	80020be <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	0018      	movs	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b008      	add	sp, #32
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000

080020cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0bf      	b.n	8002260 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020e0:	4b61      	ldr	r3, [pc, #388]	; (8002268 <HAL_RCC_ClockConfig+0x19c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2201      	movs	r2, #1
 80020e6:	4013      	ands	r3, r2
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d911      	bls.n	8002112 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b5e      	ldr	r3, [pc, #376]	; (8002268 <HAL_RCC_ClockConfig+0x19c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2201      	movs	r2, #1
 80020f4:	4393      	bics	r3, r2
 80020f6:	0019      	movs	r1, r3
 80020f8:	4b5b      	ldr	r3, [pc, #364]	; (8002268 <HAL_RCC_ClockConfig+0x19c>)
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002100:	4b59      	ldr	r3, [pc, #356]	; (8002268 <HAL_RCC_ClockConfig+0x19c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2201      	movs	r2, #1
 8002106:	4013      	ands	r3, r2
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d001      	beq.n	8002112 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e0a6      	b.n	8002260 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2202      	movs	r2, #2
 8002118:	4013      	ands	r3, r2
 800211a:	d015      	beq.n	8002148 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2204      	movs	r2, #4
 8002122:	4013      	ands	r3, r2
 8002124:	d006      	beq.n	8002134 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002126:	4b51      	ldr	r3, [pc, #324]	; (800226c <HAL_RCC_ClockConfig+0x1a0>)
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	4b50      	ldr	r3, [pc, #320]	; (800226c <HAL_RCC_ClockConfig+0x1a0>)
 800212c:	21e0      	movs	r1, #224	; 0xe0
 800212e:	00c9      	lsls	r1, r1, #3
 8002130:	430a      	orrs	r2, r1
 8002132:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002134:	4b4d      	ldr	r3, [pc, #308]	; (800226c <HAL_RCC_ClockConfig+0x1a0>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	22f0      	movs	r2, #240	; 0xf0
 800213a:	4393      	bics	r3, r2
 800213c:	0019      	movs	r1, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	4b4a      	ldr	r3, [pc, #296]	; (800226c <HAL_RCC_ClockConfig+0x1a0>)
 8002144:	430a      	orrs	r2, r1
 8002146:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2201      	movs	r2, #1
 800214e:	4013      	ands	r3, r2
 8002150:	d04c      	beq.n	80021ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	4b44      	ldr	r3, [pc, #272]	; (800226c <HAL_RCC_ClockConfig+0x1a0>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	029b      	lsls	r3, r3, #10
 8002162:	4013      	ands	r3, r2
 8002164:	d120      	bne.n	80021a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e07a      	b.n	8002260 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d107      	bne.n	8002182 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002172:	4b3e      	ldr	r3, [pc, #248]	; (800226c <HAL_RCC_ClockConfig+0x1a0>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	049b      	lsls	r3, r3, #18
 800217a:	4013      	ands	r3, r2
 800217c:	d114      	bne.n	80021a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e06e      	b.n	8002260 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b03      	cmp	r3, #3
 8002188:	d107      	bne.n	800219a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800218a:	4b38      	ldr	r3, [pc, #224]	; (800226c <HAL_RCC_ClockConfig+0x1a0>)
 800218c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	025b      	lsls	r3, r3, #9
 8002192:	4013      	ands	r3, r2
 8002194:	d108      	bne.n	80021a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e062      	b.n	8002260 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219a:	4b34      	ldr	r3, [pc, #208]	; (800226c <HAL_RCC_ClockConfig+0x1a0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2202      	movs	r2, #2
 80021a0:	4013      	ands	r3, r2
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e05b      	b.n	8002260 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021a8:	4b30      	ldr	r3, [pc, #192]	; (800226c <HAL_RCC_ClockConfig+0x1a0>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2203      	movs	r2, #3
 80021ae:	4393      	bics	r3, r2
 80021b0:	0019      	movs	r1, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	4b2d      	ldr	r3, [pc, #180]	; (800226c <HAL_RCC_ClockConfig+0x1a0>)
 80021b8:	430a      	orrs	r2, r1
 80021ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021bc:	f7fe fc0a 	bl	80009d4 <HAL_GetTick>
 80021c0:	0003      	movs	r3, r0
 80021c2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c4:	e009      	b.n	80021da <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c6:	f7fe fc05 	bl	80009d4 <HAL_GetTick>
 80021ca:	0002      	movs	r2, r0
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	4a27      	ldr	r2, [pc, #156]	; (8002270 <HAL_RCC_ClockConfig+0x1a4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e042      	b.n	8002260 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	4b24      	ldr	r3, [pc, #144]	; (800226c <HAL_RCC_ClockConfig+0x1a0>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	220c      	movs	r2, #12
 80021e0:	401a      	ands	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d1ec      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ec:	4b1e      	ldr	r3, [pc, #120]	; (8002268 <HAL_RCC_ClockConfig+0x19c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2201      	movs	r2, #1
 80021f2:	4013      	ands	r3, r2
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d211      	bcs.n	800221e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_RCC_ClockConfig+0x19c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2201      	movs	r2, #1
 8002200:	4393      	bics	r3, r2
 8002202:	0019      	movs	r1, r3
 8002204:	4b18      	ldr	r3, [pc, #96]	; (8002268 <HAL_RCC_ClockConfig+0x19c>)
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220c:	4b16      	ldr	r3, [pc, #88]	; (8002268 <HAL_RCC_ClockConfig+0x19c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2201      	movs	r2, #1
 8002212:	4013      	ands	r3, r2
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d001      	beq.n	800221e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e020      	b.n	8002260 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2204      	movs	r2, #4
 8002224:	4013      	ands	r3, r2
 8002226:	d009      	beq.n	800223c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002228:	4b10      	ldr	r3, [pc, #64]	; (800226c <HAL_RCC_ClockConfig+0x1a0>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4a11      	ldr	r2, [pc, #68]	; (8002274 <HAL_RCC_ClockConfig+0x1a8>)
 800222e:	4013      	ands	r3, r2
 8002230:	0019      	movs	r1, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <HAL_RCC_ClockConfig+0x1a0>)
 8002238:	430a      	orrs	r2, r1
 800223a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800223c:	f000 f820 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 8002240:	0001      	movs	r1, r0
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <HAL_RCC_ClockConfig+0x1a0>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	091b      	lsrs	r3, r3, #4
 8002248:	220f      	movs	r2, #15
 800224a:	4013      	ands	r3, r2
 800224c:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <HAL_RCC_ClockConfig+0x1ac>)
 800224e:	5cd3      	ldrb	r3, [r2, r3]
 8002250:	000a      	movs	r2, r1
 8002252:	40da      	lsrs	r2, r3
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_RCC_ClockConfig+0x1b0>)
 8002256:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002258:	2003      	movs	r0, #3
 800225a:	f7fe fb75 	bl	8000948 <HAL_InitTick>
  
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b004      	add	sp, #16
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40022000 	.word	0x40022000
 800226c:	40021000 	.word	0x40021000
 8002270:	00001388 	.word	0x00001388
 8002274:	fffff8ff 	.word	0xfffff8ff
 8002278:	08003548 	.word	0x08003548
 800227c:	20000000 	.word	0x20000000

08002280 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b08f      	sub	sp, #60	; 0x3c
 8002284:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002286:	2314      	movs	r3, #20
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	4a38      	ldr	r2, [pc, #224]	; (800236c <HAL_RCC_GetSysClockFreq+0xec>)
 800228c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800228e:	c313      	stmia	r3!, {r0, r1, r4}
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	4a36      	ldr	r2, [pc, #216]	; (8002370 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002298:	ca13      	ldmia	r2!, {r0, r1, r4}
 800229a:	c313      	stmia	r3!, {r0, r1, r4}
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022a4:	2300      	movs	r3, #0
 80022a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022a8:	2300      	movs	r3, #0
 80022aa:	637b      	str	r3, [r7, #52]	; 0x34
 80022ac:	2300      	movs	r3, #0
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80022b4:	4b2f      	ldr	r3, [pc, #188]	; (8002374 <HAL_RCC_GetSysClockFreq+0xf4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022bc:	220c      	movs	r2, #12
 80022be:	4013      	ands	r3, r2
 80022c0:	2b0c      	cmp	r3, #12
 80022c2:	d047      	beq.n	8002354 <HAL_RCC_GetSysClockFreq+0xd4>
 80022c4:	d849      	bhi.n	800235a <HAL_RCC_GetSysClockFreq+0xda>
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d002      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0x50>
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d003      	beq.n	80022d6 <HAL_RCC_GetSysClockFreq+0x56>
 80022ce:	e044      	b.n	800235a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022d0:	4b29      	ldr	r3, [pc, #164]	; (8002378 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022d4:	e044      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	0c9b      	lsrs	r3, r3, #18
 80022da:	220f      	movs	r2, #15
 80022dc:	4013      	ands	r3, r2
 80022de:	2214      	movs	r2, #20
 80022e0:	18ba      	adds	r2, r7, r2
 80022e2:	5cd3      	ldrb	r3, [r2, r3]
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80022e6:	4b23      	ldr	r3, [pc, #140]	; (8002374 <HAL_RCC_GetSysClockFreq+0xf4>)
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ea:	220f      	movs	r2, #15
 80022ec:	4013      	ands	r3, r2
 80022ee:	1d3a      	adds	r2, r7, #4
 80022f0:	5cd3      	ldrb	r3, [r2, r3]
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80022f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022f6:	23c0      	movs	r3, #192	; 0xc0
 80022f8:	025b      	lsls	r3, r3, #9
 80022fa:	401a      	ands	r2, r3
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	025b      	lsls	r3, r3, #9
 8002300:	429a      	cmp	r2, r3
 8002302:	d109      	bne.n	8002318 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002306:	481c      	ldr	r0, [pc, #112]	; (8002378 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002308:	f7fd ff10 	bl	800012c <__udivsi3>
 800230c:	0003      	movs	r3, r0
 800230e:	001a      	movs	r2, r3
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	4353      	muls	r3, r2
 8002314:	637b      	str	r3, [r7, #52]	; 0x34
 8002316:	e01a      	b.n	800234e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800231a:	23c0      	movs	r3, #192	; 0xc0
 800231c:	025b      	lsls	r3, r3, #9
 800231e:	401a      	ands	r2, r3
 8002320:	23c0      	movs	r3, #192	; 0xc0
 8002322:	025b      	lsls	r3, r3, #9
 8002324:	429a      	cmp	r2, r3
 8002326:	d109      	bne.n	800233c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800232a:	4814      	ldr	r0, [pc, #80]	; (800237c <HAL_RCC_GetSysClockFreq+0xfc>)
 800232c:	f7fd fefe 	bl	800012c <__udivsi3>
 8002330:	0003      	movs	r3, r0
 8002332:	001a      	movs	r2, r3
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	4353      	muls	r3, r2
 8002338:	637b      	str	r3, [r7, #52]	; 0x34
 800233a:	e008      	b.n	800234e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800233c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800233e:	480e      	ldr	r0, [pc, #56]	; (8002378 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002340:	f7fd fef4 	bl	800012c <__udivsi3>
 8002344:	0003      	movs	r3, r0
 8002346:	001a      	movs	r2, r3
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	4353      	muls	r3, r2
 800234c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800234e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002350:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002352:	e005      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002356:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002358:	e002      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <HAL_RCC_GetSysClockFreq+0xf8>)
 800235c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800235e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002362:	0018      	movs	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	b00f      	add	sp, #60	; 0x3c
 8002368:	bd90      	pop	{r4, r7, pc}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	08003528 	.word	0x08003528
 8002370:	08003538 	.word	0x08003538
 8002374:	40021000 	.word	0x40021000
 8002378:	007a1200 	.word	0x007a1200
 800237c:	02dc6c00 	.word	0x02dc6c00

08002380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002384:	4b02      	ldr	r3, [pc, #8]	; (8002390 <HAL_RCC_GetHCLKFreq+0x10>)
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	0018      	movs	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	20000000 	.word	0x20000000

08002394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002398:	f7ff fff2 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 800239c:	0001      	movs	r1, r0
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	0a1b      	lsrs	r3, r3, #8
 80023a4:	2207      	movs	r2, #7
 80023a6:	4013      	ands	r3, r2
 80023a8:	4a04      	ldr	r2, [pc, #16]	; (80023bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80023aa:	5cd3      	ldrb	r3, [r2, r3]
 80023ac:	40d9      	lsrs	r1, r3
 80023ae:	000b      	movs	r3, r1
}    
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	40021000 	.word	0x40021000
 80023bc:	08003558 	.word	0x08003558

080023c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e044      	b.n	800245c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d107      	bne.n	80023ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2274      	movs	r2, #116	; 0x74
 80023de:	2100      	movs	r1, #0
 80023e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	0018      	movs	r0, r3
 80023e6:	f7fe f9ab 	bl	8000740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2224      	movs	r2, #36	; 0x24
 80023ee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2101      	movs	r1, #1
 80023fc:	438a      	bics	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	0018      	movs	r0, r3
 8002404:	f000 f8da 	bl	80025bc <UART_SetConfig>
 8002408:	0003      	movs	r3, r0
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e024      	b.n	800245c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	0018      	movs	r0, r3
 800241e:	f000 fa0d 	bl	800283c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	490d      	ldr	r1, [pc, #52]	; (8002464 <HAL_UART_Init+0xa4>)
 800242e:	400a      	ands	r2, r1
 8002430:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	212a      	movs	r1, #42	; 0x2a
 800243e:	438a      	bics	r2, r1
 8002440:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2101      	movs	r1, #1
 800244e:	430a      	orrs	r2, r1
 8002450:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	0018      	movs	r0, r3
 8002456:	f000 faa5 	bl	80029a4 <UART_CheckIdleState>
 800245a:	0003      	movs	r3, r0
}
 800245c:	0018      	movs	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	b002      	add	sp, #8
 8002462:	bd80      	pop	{r7, pc}
 8002464:	ffffb7ff 	.word	0xffffb7ff

08002468 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08a      	sub	sp, #40	; 0x28
 800246c:	af02      	add	r7, sp, #8
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	1dbb      	adds	r3, r7, #6
 8002476:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800247c:	2b20      	cmp	r3, #32
 800247e:	d000      	beq.n	8002482 <HAL_UART_Transmit+0x1a>
 8002480:	e096      	b.n	80025b0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_UART_Transmit+0x28>
 8002488:	1dbb      	adds	r3, r7, #6
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e08e      	b.n	80025b2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	015b      	lsls	r3, r3, #5
 800249c:	429a      	cmp	r2, r3
 800249e:	d109      	bne.n	80024b4 <HAL_UART_Transmit+0x4c>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d105      	bne.n	80024b4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2201      	movs	r2, #1
 80024ac:	4013      	ands	r3, r2
 80024ae:	d001      	beq.n	80024b4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e07e      	b.n	80025b2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2274      	movs	r2, #116	; 0x74
 80024b8:	5c9b      	ldrb	r3, [r3, r2]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_UART_Transmit+0x5a>
 80024be:	2302      	movs	r3, #2
 80024c0:	e077      	b.n	80025b2 <HAL_UART_Transmit+0x14a>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2274      	movs	r2, #116	; 0x74
 80024c6:	2101      	movs	r1, #1
 80024c8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2280      	movs	r2, #128	; 0x80
 80024ce:	2100      	movs	r1, #0
 80024d0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2221      	movs	r2, #33	; 0x21
 80024d6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024d8:	f7fe fa7c 	bl	80009d4 <HAL_GetTick>
 80024dc:	0003      	movs	r3, r0
 80024de:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1dba      	adds	r2, r7, #6
 80024e4:	2150      	movs	r1, #80	; 0x50
 80024e6:	8812      	ldrh	r2, [r2, #0]
 80024e8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1dba      	adds	r2, r7, #6
 80024ee:	2152      	movs	r1, #82	; 0x52
 80024f0:	8812      	ldrh	r2, [r2, #0]
 80024f2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	015b      	lsls	r3, r3, #5
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d108      	bne.n	8002512 <HAL_UART_Transmit+0xaa>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d104      	bne.n	8002512 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002508:	2300      	movs	r3, #0
 800250a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	e003      	b.n	800251a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2274      	movs	r2, #116	; 0x74
 800251e:	2100      	movs	r1, #0
 8002520:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002522:	e02d      	b.n	8002580 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	0013      	movs	r3, r2
 800252e:	2200      	movs	r2, #0
 8002530:	2180      	movs	r1, #128	; 0x80
 8002532:	f000 fa7f 	bl	8002a34 <UART_WaitOnFlagUntilTimeout>
 8002536:	1e03      	subs	r3, r0, #0
 8002538:	d001      	beq.n	800253e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e039      	b.n	80025b2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10b      	bne.n	800255c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	881a      	ldrh	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	05d2      	lsls	r2, r2, #23
 800254e:	0dd2      	lsrs	r2, r2, #23
 8002550:	b292      	uxth	r2, r2
 8002552:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	3302      	adds	r3, #2
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	e008      	b.n	800256e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	781a      	ldrb	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	b292      	uxth	r2, r2
 8002566:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	3301      	adds	r3, #1
 800256c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2252      	movs	r2, #82	; 0x52
 8002572:	5a9b      	ldrh	r3, [r3, r2]
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b299      	uxth	r1, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2252      	movs	r2, #82	; 0x52
 800257e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2252      	movs	r2, #82	; 0x52
 8002584:	5a9b      	ldrh	r3, [r3, r2]
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1cb      	bne.n	8002524 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	0013      	movs	r3, r2
 8002596:	2200      	movs	r2, #0
 8002598:	2140      	movs	r1, #64	; 0x40
 800259a:	f000 fa4b 	bl	8002a34 <UART_WaitOnFlagUntilTimeout>
 800259e:	1e03      	subs	r3, r0, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e005      	b.n	80025b2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2220      	movs	r2, #32
 80025aa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	e000      	b.n	80025b2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80025b0:	2302      	movs	r3, #2
  }
}
 80025b2:	0018      	movs	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b008      	add	sp, #32
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025c4:	231e      	movs	r3, #30
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a8d      	ldr	r2, [pc, #564]	; (8002820 <UART_SetConfig+0x264>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	0019      	movs	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4a88      	ldr	r2, [pc, #544]	; (8002824 <UART_SetConfig+0x268>)
 8002602:	4013      	ands	r3, r2
 8002604:	0019      	movs	r1, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4a7f      	ldr	r2, [pc, #508]	; (8002828 <UART_SetConfig+0x26c>)
 800262a:	4013      	ands	r3, r2
 800262c:	0019      	movs	r1, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	430a      	orrs	r2, r1
 8002636:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a7b      	ldr	r2, [pc, #492]	; (800282c <UART_SetConfig+0x270>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d127      	bne.n	8002692 <UART_SetConfig+0xd6>
 8002642:	4b7b      	ldr	r3, [pc, #492]	; (8002830 <UART_SetConfig+0x274>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	2203      	movs	r2, #3
 8002648:	4013      	ands	r3, r2
 800264a:	2b03      	cmp	r3, #3
 800264c:	d00d      	beq.n	800266a <UART_SetConfig+0xae>
 800264e:	d81b      	bhi.n	8002688 <UART_SetConfig+0xcc>
 8002650:	2b02      	cmp	r3, #2
 8002652:	d014      	beq.n	800267e <UART_SetConfig+0xc2>
 8002654:	d818      	bhi.n	8002688 <UART_SetConfig+0xcc>
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <UART_SetConfig+0xa4>
 800265a:	2b01      	cmp	r3, #1
 800265c:	d00a      	beq.n	8002674 <UART_SetConfig+0xb8>
 800265e:	e013      	b.n	8002688 <UART_SetConfig+0xcc>
 8002660:	231f      	movs	r3, #31
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
 8002668:	e021      	b.n	80026ae <UART_SetConfig+0xf2>
 800266a:	231f      	movs	r3, #31
 800266c:	18fb      	adds	r3, r7, r3
 800266e:	2202      	movs	r2, #2
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	e01c      	b.n	80026ae <UART_SetConfig+0xf2>
 8002674:	231f      	movs	r3, #31
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	2204      	movs	r2, #4
 800267a:	701a      	strb	r2, [r3, #0]
 800267c:	e017      	b.n	80026ae <UART_SetConfig+0xf2>
 800267e:	231f      	movs	r3, #31
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	2208      	movs	r2, #8
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	e012      	b.n	80026ae <UART_SetConfig+0xf2>
 8002688:	231f      	movs	r3, #31
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	2210      	movs	r2, #16
 800268e:	701a      	strb	r2, [r3, #0]
 8002690:	e00d      	b.n	80026ae <UART_SetConfig+0xf2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a67      	ldr	r2, [pc, #412]	; (8002834 <UART_SetConfig+0x278>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d104      	bne.n	80026a6 <UART_SetConfig+0xea>
 800269c:	231f      	movs	r3, #31
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
 80026a4:	e003      	b.n	80026ae <UART_SetConfig+0xf2>
 80026a6:	231f      	movs	r3, #31
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	2210      	movs	r2, #16
 80026ac:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69da      	ldr	r2, [r3, #28]
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d15d      	bne.n	8002776 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80026ba:	231f      	movs	r3, #31
 80026bc:	18fb      	adds	r3, r7, r3
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d015      	beq.n	80026f0 <UART_SetConfig+0x134>
 80026c4:	dc18      	bgt.n	80026f8 <UART_SetConfig+0x13c>
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d00d      	beq.n	80026e6 <UART_SetConfig+0x12a>
 80026ca:	dc15      	bgt.n	80026f8 <UART_SetConfig+0x13c>
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <UART_SetConfig+0x11a>
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d005      	beq.n	80026e0 <UART_SetConfig+0x124>
 80026d4:	e010      	b.n	80026f8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026d6:	f7ff fe5d 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 80026da:	0003      	movs	r3, r0
 80026dc:	61bb      	str	r3, [r7, #24]
        break;
 80026de:	e012      	b.n	8002706 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026e0:	4b55      	ldr	r3, [pc, #340]	; (8002838 <UART_SetConfig+0x27c>)
 80026e2:	61bb      	str	r3, [r7, #24]
        break;
 80026e4:	e00f      	b.n	8002706 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026e6:	f7ff fdcb 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 80026ea:	0003      	movs	r3, r0
 80026ec:	61bb      	str	r3, [r7, #24]
        break;
 80026ee:	e00a      	b.n	8002706 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026f0:	2380      	movs	r3, #128	; 0x80
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	61bb      	str	r3, [r7, #24]
        break;
 80026f6:	e006      	b.n	8002706 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026fc:	231e      	movs	r3, #30
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	2201      	movs	r2, #1
 8002702:	701a      	strb	r2, [r3, #0]
        break;
 8002704:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d100      	bne.n	800270e <UART_SetConfig+0x152>
 800270c:	e07b      	b.n	8002806 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	005a      	lsls	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	085b      	lsrs	r3, r3, #1
 8002718:	18d2      	adds	r2, r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	0019      	movs	r1, r3
 8002720:	0010      	movs	r0, r2
 8002722:	f7fd fd03 	bl	800012c <__udivsi3>
 8002726:	0003      	movs	r3, r0
 8002728:	b29b      	uxth	r3, r3
 800272a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	2b0f      	cmp	r3, #15
 8002730:	d91c      	bls.n	800276c <UART_SetConfig+0x1b0>
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	025b      	lsls	r3, r3, #9
 8002738:	429a      	cmp	r2, r3
 800273a:	d217      	bcs.n	800276c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	b29a      	uxth	r2, r3
 8002740:	200e      	movs	r0, #14
 8002742:	183b      	adds	r3, r7, r0
 8002744:	210f      	movs	r1, #15
 8002746:	438a      	bics	r2, r1
 8002748:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	085b      	lsrs	r3, r3, #1
 800274e:	b29b      	uxth	r3, r3
 8002750:	2207      	movs	r2, #7
 8002752:	4013      	ands	r3, r2
 8002754:	b299      	uxth	r1, r3
 8002756:	183b      	adds	r3, r7, r0
 8002758:	183a      	adds	r2, r7, r0
 800275a:	8812      	ldrh	r2, [r2, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	183a      	adds	r2, r7, r0
 8002766:	8812      	ldrh	r2, [r2, #0]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	e04c      	b.n	8002806 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800276c:	231e      	movs	r3, #30
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	2201      	movs	r2, #1
 8002772:	701a      	strb	r2, [r3, #0]
 8002774:	e047      	b.n	8002806 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002776:	231f      	movs	r3, #31
 8002778:	18fb      	adds	r3, r7, r3
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b08      	cmp	r3, #8
 800277e:	d015      	beq.n	80027ac <UART_SetConfig+0x1f0>
 8002780:	dc18      	bgt.n	80027b4 <UART_SetConfig+0x1f8>
 8002782:	2b04      	cmp	r3, #4
 8002784:	d00d      	beq.n	80027a2 <UART_SetConfig+0x1e6>
 8002786:	dc15      	bgt.n	80027b4 <UART_SetConfig+0x1f8>
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <UART_SetConfig+0x1d6>
 800278c:	2b02      	cmp	r3, #2
 800278e:	d005      	beq.n	800279c <UART_SetConfig+0x1e0>
 8002790:	e010      	b.n	80027b4 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002792:	f7ff fdff 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 8002796:	0003      	movs	r3, r0
 8002798:	61bb      	str	r3, [r7, #24]
        break;
 800279a:	e012      	b.n	80027c2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800279c:	4b26      	ldr	r3, [pc, #152]	; (8002838 <UART_SetConfig+0x27c>)
 800279e:	61bb      	str	r3, [r7, #24]
        break;
 80027a0:	e00f      	b.n	80027c2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027a2:	f7ff fd6d 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 80027a6:	0003      	movs	r3, r0
 80027a8:	61bb      	str	r3, [r7, #24]
        break;
 80027aa:	e00a      	b.n	80027c2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	61bb      	str	r3, [r7, #24]
        break;
 80027b2:	e006      	b.n	80027c2 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027b8:	231e      	movs	r3, #30
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
        break;
 80027c0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d01e      	beq.n	8002806 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	085a      	lsrs	r2, r3, #1
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	18d2      	adds	r2, r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	0019      	movs	r1, r3
 80027d8:	0010      	movs	r0, r2
 80027da:	f7fd fca7 	bl	800012c <__udivsi3>
 80027de:	0003      	movs	r3, r0
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	2b0f      	cmp	r3, #15
 80027e8:	d909      	bls.n	80027fe <UART_SetConfig+0x242>
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	025b      	lsls	r3, r3, #9
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d204      	bcs.n	80027fe <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	60da      	str	r2, [r3, #12]
 80027fc:	e003      	b.n	8002806 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80027fe:	231e      	movs	r3, #30
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	2201      	movs	r2, #1
 8002804:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002812:	231e      	movs	r3, #30
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	781b      	ldrb	r3, [r3, #0]
}
 8002818:	0018      	movs	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	b008      	add	sp, #32
 800281e:	bd80      	pop	{r7, pc}
 8002820:	efff69f3 	.word	0xefff69f3
 8002824:	ffffcfff 	.word	0xffffcfff
 8002828:	fffff4ff 	.word	0xfffff4ff
 800282c:	40013800 	.word	0x40013800
 8002830:	40021000 	.word	0x40021000
 8002834:	40004400 	.word	0x40004400
 8002838:	007a1200 	.word	0x007a1200

0800283c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	2201      	movs	r2, #1
 800284a:	4013      	ands	r3, r2
 800284c:	d00b      	beq.n	8002866 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4a4a      	ldr	r2, [pc, #296]	; (8002980 <UART_AdvFeatureConfig+0x144>)
 8002856:	4013      	ands	r3, r2
 8002858:	0019      	movs	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	2202      	movs	r2, #2
 800286c:	4013      	ands	r3, r2
 800286e:	d00b      	beq.n	8002888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4a43      	ldr	r2, [pc, #268]	; (8002984 <UART_AdvFeatureConfig+0x148>)
 8002878:	4013      	ands	r3, r2
 800287a:	0019      	movs	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	2204      	movs	r2, #4
 800288e:	4013      	ands	r3, r2
 8002890:	d00b      	beq.n	80028aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4a3b      	ldr	r2, [pc, #236]	; (8002988 <UART_AdvFeatureConfig+0x14c>)
 800289a:	4013      	ands	r3, r2
 800289c:	0019      	movs	r1, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	2208      	movs	r2, #8
 80028b0:	4013      	ands	r3, r2
 80028b2:	d00b      	beq.n	80028cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4a34      	ldr	r2, [pc, #208]	; (800298c <UART_AdvFeatureConfig+0x150>)
 80028bc:	4013      	ands	r3, r2
 80028be:	0019      	movs	r1, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	2210      	movs	r2, #16
 80028d2:	4013      	ands	r3, r2
 80028d4:	d00b      	beq.n	80028ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	4a2c      	ldr	r2, [pc, #176]	; (8002990 <UART_AdvFeatureConfig+0x154>)
 80028de:	4013      	ands	r3, r2
 80028e0:	0019      	movs	r1, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	2220      	movs	r2, #32
 80028f4:	4013      	ands	r3, r2
 80028f6:	d00b      	beq.n	8002910 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	4a25      	ldr	r2, [pc, #148]	; (8002994 <UART_AdvFeatureConfig+0x158>)
 8002900:	4013      	ands	r3, r2
 8002902:	0019      	movs	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	2240      	movs	r2, #64	; 0x40
 8002916:	4013      	ands	r3, r2
 8002918:	d01d      	beq.n	8002956 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4a1d      	ldr	r2, [pc, #116]	; (8002998 <UART_AdvFeatureConfig+0x15c>)
 8002922:	4013      	ands	r3, r2
 8002924:	0019      	movs	r1, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	035b      	lsls	r3, r3, #13
 800293a:	429a      	cmp	r2, r3
 800293c:	d10b      	bne.n	8002956 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a15      	ldr	r2, [pc, #84]	; (800299c <UART_AdvFeatureConfig+0x160>)
 8002946:	4013      	ands	r3, r2
 8002948:	0019      	movs	r1, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	2280      	movs	r2, #128	; 0x80
 800295c:	4013      	ands	r3, r2
 800295e:	d00b      	beq.n	8002978 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4a0e      	ldr	r2, [pc, #56]	; (80029a0 <UART_AdvFeatureConfig+0x164>)
 8002968:	4013      	ands	r3, r2
 800296a:	0019      	movs	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	605a      	str	r2, [r3, #4]
  }
}
 8002978:	46c0      	nop			; (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	b002      	add	sp, #8
 800297e:	bd80      	pop	{r7, pc}
 8002980:	fffdffff 	.word	0xfffdffff
 8002984:	fffeffff 	.word	0xfffeffff
 8002988:	fffbffff 	.word	0xfffbffff
 800298c:	ffff7fff 	.word	0xffff7fff
 8002990:	ffffefff 	.word	0xffffefff
 8002994:	ffffdfff 	.word	0xffffdfff
 8002998:	ffefffff 	.word	0xffefffff
 800299c:	ff9fffff 	.word	0xff9fffff
 80029a0:	fff7ffff 	.word	0xfff7ffff

080029a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2280      	movs	r2, #128	; 0x80
 80029b0:	2100      	movs	r1, #0
 80029b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029b4:	f7fe f80e 	bl	80009d4 <HAL_GetTick>
 80029b8:	0003      	movs	r3, r0
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2208      	movs	r2, #8
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d10c      	bne.n	80029e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2280      	movs	r2, #128	; 0x80
 80029ce:	0391      	lsls	r1, r2, #14
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <UART_CheckIdleState+0x8c>)
 80029d4:	9200      	str	r2, [sp, #0]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f000 f82c 	bl	8002a34 <UART_WaitOnFlagUntilTimeout>
 80029dc:	1e03      	subs	r3, r0, #0
 80029de:	d001      	beq.n	80029e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e021      	b.n	8002a28 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2204      	movs	r2, #4
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d10c      	bne.n	8002a0c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	03d1      	lsls	r1, r2, #15
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	4a0d      	ldr	r2, [pc, #52]	; (8002a30 <UART_CheckIdleState+0x8c>)
 80029fc:	9200      	str	r2, [sp, #0]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f000 f818 	bl	8002a34 <UART_WaitOnFlagUntilTimeout>
 8002a04:	1e03      	subs	r3, r0, #0
 8002a06:	d001      	beq.n	8002a0c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e00d      	b.n	8002a28 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2220      	movs	r2, #32
 8002a16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2274      	movs	r2, #116	; 0x74
 8002a22:	2100      	movs	r1, #0
 8002a24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	0018      	movs	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b004      	add	sp, #16
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	01ffffff 	.word	0x01ffffff

08002a34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b094      	sub	sp, #80	; 0x50
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	1dfb      	adds	r3, r7, #7
 8002a42:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a44:	e0a3      	b.n	8002b8e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a48:	3301      	adds	r3, #1
 8002a4a:	d100      	bne.n	8002a4e <UART_WaitOnFlagUntilTimeout+0x1a>
 8002a4c:	e09f      	b.n	8002b8e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a4e:	f7fd ffc1 	bl	80009d4 <HAL_GetTick>
 8002a52:	0002      	movs	r2, r0
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d302      	bcc.n	8002a64 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d13d      	bne.n	8002ae0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a64:	f3ef 8310 	mrs	r3, PRIMASK
 8002a68:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a6c:	647b      	str	r3, [r7, #68]	; 0x44
 8002a6e:	2301      	movs	r3, #1
 8002a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a74:	f383 8810 	msr	PRIMASK, r3
}
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	494c      	ldr	r1, [pc, #304]	; (8002bb8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002a86:	400a      	ands	r2, r1
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a8c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	f383 8810 	msr	PRIMASK, r3
}
 8002a94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a96:	f3ef 8310 	mrs	r3, PRIMASK
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a9e:	643b      	str	r3, [r7, #64]	; 0x40
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa6:	f383 8810 	msr	PRIMASK, r3
}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	438a      	bics	r2, r1
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ac2:	f383 8810 	msr	PRIMASK, r3
}
 8002ac6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2274      	movs	r2, #116	; 0x74
 8002ad8:	2100      	movs	r1, #0
 8002ada:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e067      	b.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d050      	beq.n	8002b8e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	401a      	ands	r2, r3
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d146      	bne.n	8002b8e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2280      	movs	r2, #128	; 0x80
 8002b06:	0112      	lsls	r2, r2, #4
 8002b08:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b0e:	613b      	str	r3, [r7, #16]
  return(result);
 8002b10:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b14:	2301      	movs	r3, #1
 8002b16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f383 8810 	msr	PRIMASK, r3
}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4923      	ldr	r1, [pc, #140]	; (8002bb8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002b2c:	400a      	ands	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b32:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f383 8810 	msr	PRIMASK, r3
}
 8002b3a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b40:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b42:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b44:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b46:	2301      	movs	r3, #1
 8002b48:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	f383 8810 	msr	PRIMASK, r3
}
 8002b50:	46c0      	nop			; (mov r8, r8)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	438a      	bics	r2, r1
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	f383 8810 	msr	PRIMASK, r3
}
 8002b6c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2220      	movs	r2, #32
 8002b72:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2280      	movs	r2, #128	; 0x80
 8002b7e:	2120      	movs	r1, #32
 8002b80:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2274      	movs	r2, #116	; 0x74
 8002b86:	2100      	movs	r1, #0
 8002b88:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e010      	b.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	4013      	ands	r3, r2
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	425a      	negs	r2, r3
 8002b9e:	4153      	adcs	r3, r2
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	001a      	movs	r2, r3
 8002ba4:	1dfb      	adds	r3, r7, #7
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d100      	bne.n	8002bae <UART_WaitOnFlagUntilTimeout+0x17a>
 8002bac:	e74b      	b.n	8002a46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b014      	add	sp, #80	; 0x50
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	fffffe5f 	.word	0xfffffe5f

08002bbc <__errno>:
 8002bbc:	4b01      	ldr	r3, [pc, #4]	; (8002bc4 <__errno+0x8>)
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	4770      	bx	lr
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	2000000c 	.word	0x2000000c

08002bc8 <__libc_init_array>:
 8002bc8:	b570      	push	{r4, r5, r6, lr}
 8002bca:	2600      	movs	r6, #0
 8002bcc:	4d0c      	ldr	r5, [pc, #48]	; (8002c00 <__libc_init_array+0x38>)
 8002bce:	4c0d      	ldr	r4, [pc, #52]	; (8002c04 <__libc_init_array+0x3c>)
 8002bd0:	1b64      	subs	r4, r4, r5
 8002bd2:	10a4      	asrs	r4, r4, #2
 8002bd4:	42a6      	cmp	r6, r4
 8002bd6:	d109      	bne.n	8002bec <__libc_init_array+0x24>
 8002bd8:	2600      	movs	r6, #0
 8002bda:	f000 fc8b 	bl	80034f4 <_init>
 8002bde:	4d0a      	ldr	r5, [pc, #40]	; (8002c08 <__libc_init_array+0x40>)
 8002be0:	4c0a      	ldr	r4, [pc, #40]	; (8002c0c <__libc_init_array+0x44>)
 8002be2:	1b64      	subs	r4, r4, r5
 8002be4:	10a4      	asrs	r4, r4, #2
 8002be6:	42a6      	cmp	r6, r4
 8002be8:	d105      	bne.n	8002bf6 <__libc_init_array+0x2e>
 8002bea:	bd70      	pop	{r4, r5, r6, pc}
 8002bec:	00b3      	lsls	r3, r6, #2
 8002bee:	58eb      	ldr	r3, [r5, r3]
 8002bf0:	4798      	blx	r3
 8002bf2:	3601      	adds	r6, #1
 8002bf4:	e7ee      	b.n	8002bd4 <__libc_init_array+0xc>
 8002bf6:	00b3      	lsls	r3, r6, #2
 8002bf8:	58eb      	ldr	r3, [r5, r3]
 8002bfa:	4798      	blx	r3
 8002bfc:	3601      	adds	r6, #1
 8002bfe:	e7f2      	b.n	8002be6 <__libc_init_array+0x1e>
 8002c00:	08003594 	.word	0x08003594
 8002c04:	08003594 	.word	0x08003594
 8002c08:	08003594 	.word	0x08003594
 8002c0c:	08003598 	.word	0x08003598

08002c10 <memset>:
 8002c10:	0003      	movs	r3, r0
 8002c12:	1882      	adds	r2, r0, r2
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d100      	bne.n	8002c1a <memset+0xa>
 8002c18:	4770      	bx	lr
 8002c1a:	7019      	strb	r1, [r3, #0]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	e7f9      	b.n	8002c14 <memset+0x4>

08002c20 <siprintf>:
 8002c20:	b40e      	push	{r1, r2, r3}
 8002c22:	b500      	push	{lr}
 8002c24:	490b      	ldr	r1, [pc, #44]	; (8002c54 <siprintf+0x34>)
 8002c26:	b09c      	sub	sp, #112	; 0x70
 8002c28:	ab1d      	add	r3, sp, #116	; 0x74
 8002c2a:	9002      	str	r0, [sp, #8]
 8002c2c:	9006      	str	r0, [sp, #24]
 8002c2e:	9107      	str	r1, [sp, #28]
 8002c30:	9104      	str	r1, [sp, #16]
 8002c32:	4809      	ldr	r0, [pc, #36]	; (8002c58 <siprintf+0x38>)
 8002c34:	4909      	ldr	r1, [pc, #36]	; (8002c5c <siprintf+0x3c>)
 8002c36:	cb04      	ldmia	r3!, {r2}
 8002c38:	9105      	str	r1, [sp, #20]
 8002c3a:	6800      	ldr	r0, [r0, #0]
 8002c3c:	a902      	add	r1, sp, #8
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	f000 f870 	bl	8002d24 <_svfiprintf_r>
 8002c44:	2300      	movs	r3, #0
 8002c46:	9a02      	ldr	r2, [sp, #8]
 8002c48:	7013      	strb	r3, [r2, #0]
 8002c4a:	b01c      	add	sp, #112	; 0x70
 8002c4c:	bc08      	pop	{r3}
 8002c4e:	b003      	add	sp, #12
 8002c50:	4718      	bx	r3
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	7fffffff 	.word	0x7fffffff
 8002c58:	2000000c 	.word	0x2000000c
 8002c5c:	ffff0208 	.word	0xffff0208

08002c60 <__ssputs_r>:
 8002c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c62:	688e      	ldr	r6, [r1, #8]
 8002c64:	b085      	sub	sp, #20
 8002c66:	0007      	movs	r7, r0
 8002c68:	000c      	movs	r4, r1
 8002c6a:	9203      	str	r2, [sp, #12]
 8002c6c:	9301      	str	r3, [sp, #4]
 8002c6e:	429e      	cmp	r6, r3
 8002c70:	d83c      	bhi.n	8002cec <__ssputs_r+0x8c>
 8002c72:	2390      	movs	r3, #144	; 0x90
 8002c74:	898a      	ldrh	r2, [r1, #12]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	421a      	tst	r2, r3
 8002c7a:	d034      	beq.n	8002ce6 <__ssputs_r+0x86>
 8002c7c:	6909      	ldr	r1, [r1, #16]
 8002c7e:	6823      	ldr	r3, [r4, #0]
 8002c80:	6960      	ldr	r0, [r4, #20]
 8002c82:	1a5b      	subs	r3, r3, r1
 8002c84:	9302      	str	r3, [sp, #8]
 8002c86:	2303      	movs	r3, #3
 8002c88:	4343      	muls	r3, r0
 8002c8a:	0fdd      	lsrs	r5, r3, #31
 8002c8c:	18ed      	adds	r5, r5, r3
 8002c8e:	9b01      	ldr	r3, [sp, #4]
 8002c90:	9802      	ldr	r0, [sp, #8]
 8002c92:	3301      	adds	r3, #1
 8002c94:	181b      	adds	r3, r3, r0
 8002c96:	106d      	asrs	r5, r5, #1
 8002c98:	42ab      	cmp	r3, r5
 8002c9a:	d900      	bls.n	8002c9e <__ssputs_r+0x3e>
 8002c9c:	001d      	movs	r5, r3
 8002c9e:	0553      	lsls	r3, r2, #21
 8002ca0:	d532      	bpl.n	8002d08 <__ssputs_r+0xa8>
 8002ca2:	0029      	movs	r1, r5
 8002ca4:	0038      	movs	r0, r7
 8002ca6:	f000 fb53 	bl	8003350 <_malloc_r>
 8002caa:	1e06      	subs	r6, r0, #0
 8002cac:	d109      	bne.n	8002cc2 <__ssputs_r+0x62>
 8002cae:	230c      	movs	r3, #12
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	2340      	movs	r3, #64	; 0x40
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	89a2      	ldrh	r2, [r4, #12]
 8002cb8:	4240      	negs	r0, r0
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	81a3      	strh	r3, [r4, #12]
 8002cbe:	b005      	add	sp, #20
 8002cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cc2:	9a02      	ldr	r2, [sp, #8]
 8002cc4:	6921      	ldr	r1, [r4, #16]
 8002cc6:	f000 faba 	bl	800323e <memcpy>
 8002cca:	89a3      	ldrh	r3, [r4, #12]
 8002ccc:	4a14      	ldr	r2, [pc, #80]	; (8002d20 <__ssputs_r+0xc0>)
 8002cce:	401a      	ands	r2, r3
 8002cd0:	2380      	movs	r3, #128	; 0x80
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	81a3      	strh	r3, [r4, #12]
 8002cd6:	9b02      	ldr	r3, [sp, #8]
 8002cd8:	6126      	str	r6, [r4, #16]
 8002cda:	18f6      	adds	r6, r6, r3
 8002cdc:	6026      	str	r6, [r4, #0]
 8002cde:	6165      	str	r5, [r4, #20]
 8002ce0:	9e01      	ldr	r6, [sp, #4]
 8002ce2:	1aed      	subs	r5, r5, r3
 8002ce4:	60a5      	str	r5, [r4, #8]
 8002ce6:	9b01      	ldr	r3, [sp, #4]
 8002ce8:	429e      	cmp	r6, r3
 8002cea:	d900      	bls.n	8002cee <__ssputs_r+0x8e>
 8002cec:	9e01      	ldr	r6, [sp, #4]
 8002cee:	0032      	movs	r2, r6
 8002cf0:	9903      	ldr	r1, [sp, #12]
 8002cf2:	6820      	ldr	r0, [r4, #0]
 8002cf4:	f000 faac 	bl	8003250 <memmove>
 8002cf8:	68a3      	ldr	r3, [r4, #8]
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	1b9b      	subs	r3, r3, r6
 8002cfe:	60a3      	str	r3, [r4, #8]
 8002d00:	6823      	ldr	r3, [r4, #0]
 8002d02:	199e      	adds	r6, r3, r6
 8002d04:	6026      	str	r6, [r4, #0]
 8002d06:	e7da      	b.n	8002cbe <__ssputs_r+0x5e>
 8002d08:	002a      	movs	r2, r5
 8002d0a:	0038      	movs	r0, r7
 8002d0c:	f000 fb96 	bl	800343c <_realloc_r>
 8002d10:	1e06      	subs	r6, r0, #0
 8002d12:	d1e0      	bne.n	8002cd6 <__ssputs_r+0x76>
 8002d14:	0038      	movs	r0, r7
 8002d16:	6921      	ldr	r1, [r4, #16]
 8002d18:	f000 faae 	bl	8003278 <_free_r>
 8002d1c:	e7c7      	b.n	8002cae <__ssputs_r+0x4e>
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	fffffb7f 	.word	0xfffffb7f

08002d24 <_svfiprintf_r>:
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	b0a1      	sub	sp, #132	; 0x84
 8002d28:	9003      	str	r0, [sp, #12]
 8002d2a:	001d      	movs	r5, r3
 8002d2c:	898b      	ldrh	r3, [r1, #12]
 8002d2e:	000f      	movs	r7, r1
 8002d30:	0016      	movs	r6, r2
 8002d32:	061b      	lsls	r3, r3, #24
 8002d34:	d511      	bpl.n	8002d5a <_svfiprintf_r+0x36>
 8002d36:	690b      	ldr	r3, [r1, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10e      	bne.n	8002d5a <_svfiprintf_r+0x36>
 8002d3c:	2140      	movs	r1, #64	; 0x40
 8002d3e:	f000 fb07 	bl	8003350 <_malloc_r>
 8002d42:	6038      	str	r0, [r7, #0]
 8002d44:	6138      	str	r0, [r7, #16]
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d105      	bne.n	8002d56 <_svfiprintf_r+0x32>
 8002d4a:	230c      	movs	r3, #12
 8002d4c:	9a03      	ldr	r2, [sp, #12]
 8002d4e:	3801      	subs	r0, #1
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	b021      	add	sp, #132	; 0x84
 8002d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d56:	2340      	movs	r3, #64	; 0x40
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	ac08      	add	r4, sp, #32
 8002d5e:	6163      	str	r3, [r4, #20]
 8002d60:	3320      	adds	r3, #32
 8002d62:	7663      	strb	r3, [r4, #25]
 8002d64:	3310      	adds	r3, #16
 8002d66:	76a3      	strb	r3, [r4, #26]
 8002d68:	9507      	str	r5, [sp, #28]
 8002d6a:	0035      	movs	r5, r6
 8002d6c:	782b      	ldrb	r3, [r5, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <_svfiprintf_r+0x52>
 8002d72:	2b25      	cmp	r3, #37	; 0x25
 8002d74:	d147      	bne.n	8002e06 <_svfiprintf_r+0xe2>
 8002d76:	1bab      	subs	r3, r5, r6
 8002d78:	9305      	str	r3, [sp, #20]
 8002d7a:	42b5      	cmp	r5, r6
 8002d7c:	d00c      	beq.n	8002d98 <_svfiprintf_r+0x74>
 8002d7e:	0032      	movs	r2, r6
 8002d80:	0039      	movs	r1, r7
 8002d82:	9803      	ldr	r0, [sp, #12]
 8002d84:	f7ff ff6c 	bl	8002c60 <__ssputs_r>
 8002d88:	1c43      	adds	r3, r0, #1
 8002d8a:	d100      	bne.n	8002d8e <_svfiprintf_r+0x6a>
 8002d8c:	e0ae      	b.n	8002eec <_svfiprintf_r+0x1c8>
 8002d8e:	6962      	ldr	r2, [r4, #20]
 8002d90:	9b05      	ldr	r3, [sp, #20]
 8002d92:	4694      	mov	ip, r2
 8002d94:	4463      	add	r3, ip
 8002d96:	6163      	str	r3, [r4, #20]
 8002d98:	782b      	ldrb	r3, [r5, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d100      	bne.n	8002da0 <_svfiprintf_r+0x7c>
 8002d9e:	e0a5      	b.n	8002eec <_svfiprintf_r+0x1c8>
 8002da0:	2201      	movs	r2, #1
 8002da2:	2300      	movs	r3, #0
 8002da4:	4252      	negs	r2, r2
 8002da6:	6062      	str	r2, [r4, #4]
 8002da8:	a904      	add	r1, sp, #16
 8002daa:	3254      	adds	r2, #84	; 0x54
 8002dac:	1852      	adds	r2, r2, r1
 8002dae:	1c6e      	adds	r6, r5, #1
 8002db0:	6023      	str	r3, [r4, #0]
 8002db2:	60e3      	str	r3, [r4, #12]
 8002db4:	60a3      	str	r3, [r4, #8]
 8002db6:	7013      	strb	r3, [r2, #0]
 8002db8:	65a3      	str	r3, [r4, #88]	; 0x58
 8002dba:	2205      	movs	r2, #5
 8002dbc:	7831      	ldrb	r1, [r6, #0]
 8002dbe:	4854      	ldr	r0, [pc, #336]	; (8002f10 <_svfiprintf_r+0x1ec>)
 8002dc0:	f000 fa32 	bl	8003228 <memchr>
 8002dc4:	1c75      	adds	r5, r6, #1
 8002dc6:	2800      	cmp	r0, #0
 8002dc8:	d11f      	bne.n	8002e0a <_svfiprintf_r+0xe6>
 8002dca:	6822      	ldr	r2, [r4, #0]
 8002dcc:	06d3      	lsls	r3, r2, #27
 8002dce:	d504      	bpl.n	8002dda <_svfiprintf_r+0xb6>
 8002dd0:	2353      	movs	r3, #83	; 0x53
 8002dd2:	a904      	add	r1, sp, #16
 8002dd4:	185b      	adds	r3, r3, r1
 8002dd6:	2120      	movs	r1, #32
 8002dd8:	7019      	strb	r1, [r3, #0]
 8002dda:	0713      	lsls	r3, r2, #28
 8002ddc:	d504      	bpl.n	8002de8 <_svfiprintf_r+0xc4>
 8002dde:	2353      	movs	r3, #83	; 0x53
 8002de0:	a904      	add	r1, sp, #16
 8002de2:	185b      	adds	r3, r3, r1
 8002de4:	212b      	movs	r1, #43	; 0x2b
 8002de6:	7019      	strb	r1, [r3, #0]
 8002de8:	7833      	ldrb	r3, [r6, #0]
 8002dea:	2b2a      	cmp	r3, #42	; 0x2a
 8002dec:	d016      	beq.n	8002e1c <_svfiprintf_r+0xf8>
 8002dee:	0035      	movs	r5, r6
 8002df0:	2100      	movs	r1, #0
 8002df2:	200a      	movs	r0, #10
 8002df4:	68e3      	ldr	r3, [r4, #12]
 8002df6:	782a      	ldrb	r2, [r5, #0]
 8002df8:	1c6e      	adds	r6, r5, #1
 8002dfa:	3a30      	subs	r2, #48	; 0x30
 8002dfc:	2a09      	cmp	r2, #9
 8002dfe:	d94e      	bls.n	8002e9e <_svfiprintf_r+0x17a>
 8002e00:	2900      	cmp	r1, #0
 8002e02:	d111      	bne.n	8002e28 <_svfiprintf_r+0x104>
 8002e04:	e017      	b.n	8002e36 <_svfiprintf_r+0x112>
 8002e06:	3501      	adds	r5, #1
 8002e08:	e7b0      	b.n	8002d6c <_svfiprintf_r+0x48>
 8002e0a:	4b41      	ldr	r3, [pc, #260]	; (8002f10 <_svfiprintf_r+0x1ec>)
 8002e0c:	6822      	ldr	r2, [r4, #0]
 8002e0e:	1ac0      	subs	r0, r0, r3
 8002e10:	2301      	movs	r3, #1
 8002e12:	4083      	lsls	r3, r0
 8002e14:	4313      	orrs	r3, r2
 8002e16:	002e      	movs	r6, r5
 8002e18:	6023      	str	r3, [r4, #0]
 8002e1a:	e7ce      	b.n	8002dba <_svfiprintf_r+0x96>
 8002e1c:	9b07      	ldr	r3, [sp, #28]
 8002e1e:	1d19      	adds	r1, r3, #4
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	9107      	str	r1, [sp, #28]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	db01      	blt.n	8002e2c <_svfiprintf_r+0x108>
 8002e28:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e2a:	e004      	b.n	8002e36 <_svfiprintf_r+0x112>
 8002e2c:	425b      	negs	r3, r3
 8002e2e:	60e3      	str	r3, [r4, #12]
 8002e30:	2302      	movs	r3, #2
 8002e32:	4313      	orrs	r3, r2
 8002e34:	6023      	str	r3, [r4, #0]
 8002e36:	782b      	ldrb	r3, [r5, #0]
 8002e38:	2b2e      	cmp	r3, #46	; 0x2e
 8002e3a:	d10a      	bne.n	8002e52 <_svfiprintf_r+0x12e>
 8002e3c:	786b      	ldrb	r3, [r5, #1]
 8002e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8002e40:	d135      	bne.n	8002eae <_svfiprintf_r+0x18a>
 8002e42:	9b07      	ldr	r3, [sp, #28]
 8002e44:	3502      	adds	r5, #2
 8002e46:	1d1a      	adds	r2, r3, #4
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	9207      	str	r2, [sp, #28]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	db2b      	blt.n	8002ea8 <_svfiprintf_r+0x184>
 8002e50:	9309      	str	r3, [sp, #36]	; 0x24
 8002e52:	4e30      	ldr	r6, [pc, #192]	; (8002f14 <_svfiprintf_r+0x1f0>)
 8002e54:	2203      	movs	r2, #3
 8002e56:	0030      	movs	r0, r6
 8002e58:	7829      	ldrb	r1, [r5, #0]
 8002e5a:	f000 f9e5 	bl	8003228 <memchr>
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	d006      	beq.n	8002e70 <_svfiprintf_r+0x14c>
 8002e62:	2340      	movs	r3, #64	; 0x40
 8002e64:	1b80      	subs	r0, r0, r6
 8002e66:	4083      	lsls	r3, r0
 8002e68:	6822      	ldr	r2, [r4, #0]
 8002e6a:	3501      	adds	r5, #1
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	6023      	str	r3, [r4, #0]
 8002e70:	7829      	ldrb	r1, [r5, #0]
 8002e72:	2206      	movs	r2, #6
 8002e74:	4828      	ldr	r0, [pc, #160]	; (8002f18 <_svfiprintf_r+0x1f4>)
 8002e76:	1c6e      	adds	r6, r5, #1
 8002e78:	7621      	strb	r1, [r4, #24]
 8002e7a:	f000 f9d5 	bl	8003228 <memchr>
 8002e7e:	2800      	cmp	r0, #0
 8002e80:	d03c      	beq.n	8002efc <_svfiprintf_r+0x1d8>
 8002e82:	4b26      	ldr	r3, [pc, #152]	; (8002f1c <_svfiprintf_r+0x1f8>)
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d125      	bne.n	8002ed4 <_svfiprintf_r+0x1b0>
 8002e88:	2207      	movs	r2, #7
 8002e8a:	9b07      	ldr	r3, [sp, #28]
 8002e8c:	3307      	adds	r3, #7
 8002e8e:	4393      	bics	r3, r2
 8002e90:	3308      	adds	r3, #8
 8002e92:	9307      	str	r3, [sp, #28]
 8002e94:	6963      	ldr	r3, [r4, #20]
 8002e96:	9a04      	ldr	r2, [sp, #16]
 8002e98:	189b      	adds	r3, r3, r2
 8002e9a:	6163      	str	r3, [r4, #20]
 8002e9c:	e765      	b.n	8002d6a <_svfiprintf_r+0x46>
 8002e9e:	4343      	muls	r3, r0
 8002ea0:	0035      	movs	r5, r6
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	189b      	adds	r3, r3, r2
 8002ea6:	e7a6      	b.n	8002df6 <_svfiprintf_r+0xd2>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	425b      	negs	r3, r3
 8002eac:	e7d0      	b.n	8002e50 <_svfiprintf_r+0x12c>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	200a      	movs	r0, #10
 8002eb2:	001a      	movs	r2, r3
 8002eb4:	3501      	adds	r5, #1
 8002eb6:	6063      	str	r3, [r4, #4]
 8002eb8:	7829      	ldrb	r1, [r5, #0]
 8002eba:	1c6e      	adds	r6, r5, #1
 8002ebc:	3930      	subs	r1, #48	; 0x30
 8002ebe:	2909      	cmp	r1, #9
 8002ec0:	d903      	bls.n	8002eca <_svfiprintf_r+0x1a6>
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0c5      	beq.n	8002e52 <_svfiprintf_r+0x12e>
 8002ec6:	9209      	str	r2, [sp, #36]	; 0x24
 8002ec8:	e7c3      	b.n	8002e52 <_svfiprintf_r+0x12e>
 8002eca:	4342      	muls	r2, r0
 8002ecc:	0035      	movs	r5, r6
 8002ece:	2301      	movs	r3, #1
 8002ed0:	1852      	adds	r2, r2, r1
 8002ed2:	e7f1      	b.n	8002eb8 <_svfiprintf_r+0x194>
 8002ed4:	ab07      	add	r3, sp, #28
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	003a      	movs	r2, r7
 8002eda:	0021      	movs	r1, r4
 8002edc:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <_svfiprintf_r+0x1fc>)
 8002ede:	9803      	ldr	r0, [sp, #12]
 8002ee0:	e000      	b.n	8002ee4 <_svfiprintf_r+0x1c0>
 8002ee2:	bf00      	nop
 8002ee4:	9004      	str	r0, [sp, #16]
 8002ee6:	9b04      	ldr	r3, [sp, #16]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	d1d3      	bne.n	8002e94 <_svfiprintf_r+0x170>
 8002eec:	89bb      	ldrh	r3, [r7, #12]
 8002eee:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002ef0:	065b      	lsls	r3, r3, #25
 8002ef2:	d400      	bmi.n	8002ef6 <_svfiprintf_r+0x1d2>
 8002ef4:	e72d      	b.n	8002d52 <_svfiprintf_r+0x2e>
 8002ef6:	2001      	movs	r0, #1
 8002ef8:	4240      	negs	r0, r0
 8002efa:	e72a      	b.n	8002d52 <_svfiprintf_r+0x2e>
 8002efc:	ab07      	add	r3, sp, #28
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	003a      	movs	r2, r7
 8002f02:	0021      	movs	r1, r4
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <_svfiprintf_r+0x1fc>)
 8002f06:	9803      	ldr	r0, [sp, #12]
 8002f08:	f000 f87c 	bl	8003004 <_printf_i>
 8002f0c:	e7ea      	b.n	8002ee4 <_svfiprintf_r+0x1c0>
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	08003560 	.word	0x08003560
 8002f14:	08003566 	.word	0x08003566
 8002f18:	0800356a 	.word	0x0800356a
 8002f1c:	00000000 	.word	0x00000000
 8002f20:	08002c61 	.word	0x08002c61

08002f24 <_printf_common>:
 8002f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f26:	0015      	movs	r5, r2
 8002f28:	9301      	str	r3, [sp, #4]
 8002f2a:	688a      	ldr	r2, [r1, #8]
 8002f2c:	690b      	ldr	r3, [r1, #16]
 8002f2e:	000c      	movs	r4, r1
 8002f30:	9000      	str	r0, [sp, #0]
 8002f32:	4293      	cmp	r3, r2
 8002f34:	da00      	bge.n	8002f38 <_printf_common+0x14>
 8002f36:	0013      	movs	r3, r2
 8002f38:	0022      	movs	r2, r4
 8002f3a:	602b      	str	r3, [r5, #0]
 8002f3c:	3243      	adds	r2, #67	; 0x43
 8002f3e:	7812      	ldrb	r2, [r2, #0]
 8002f40:	2a00      	cmp	r2, #0
 8002f42:	d001      	beq.n	8002f48 <_printf_common+0x24>
 8002f44:	3301      	adds	r3, #1
 8002f46:	602b      	str	r3, [r5, #0]
 8002f48:	6823      	ldr	r3, [r4, #0]
 8002f4a:	069b      	lsls	r3, r3, #26
 8002f4c:	d502      	bpl.n	8002f54 <_printf_common+0x30>
 8002f4e:	682b      	ldr	r3, [r5, #0]
 8002f50:	3302      	adds	r3, #2
 8002f52:	602b      	str	r3, [r5, #0]
 8002f54:	6822      	ldr	r2, [r4, #0]
 8002f56:	2306      	movs	r3, #6
 8002f58:	0017      	movs	r7, r2
 8002f5a:	401f      	ands	r7, r3
 8002f5c:	421a      	tst	r2, r3
 8002f5e:	d027      	beq.n	8002fb0 <_printf_common+0x8c>
 8002f60:	0023      	movs	r3, r4
 8002f62:	3343      	adds	r3, #67	; 0x43
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	1e5a      	subs	r2, r3, #1
 8002f68:	4193      	sbcs	r3, r2
 8002f6a:	6822      	ldr	r2, [r4, #0]
 8002f6c:	0692      	lsls	r2, r2, #26
 8002f6e:	d430      	bmi.n	8002fd2 <_printf_common+0xae>
 8002f70:	0022      	movs	r2, r4
 8002f72:	9901      	ldr	r1, [sp, #4]
 8002f74:	9800      	ldr	r0, [sp, #0]
 8002f76:	9e08      	ldr	r6, [sp, #32]
 8002f78:	3243      	adds	r2, #67	; 0x43
 8002f7a:	47b0      	blx	r6
 8002f7c:	1c43      	adds	r3, r0, #1
 8002f7e:	d025      	beq.n	8002fcc <_printf_common+0xa8>
 8002f80:	2306      	movs	r3, #6
 8002f82:	6820      	ldr	r0, [r4, #0]
 8002f84:	682a      	ldr	r2, [r5, #0]
 8002f86:	68e1      	ldr	r1, [r4, #12]
 8002f88:	2500      	movs	r5, #0
 8002f8a:	4003      	ands	r3, r0
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d103      	bne.n	8002f98 <_printf_common+0x74>
 8002f90:	1a8d      	subs	r5, r1, r2
 8002f92:	43eb      	mvns	r3, r5
 8002f94:	17db      	asrs	r3, r3, #31
 8002f96:	401d      	ands	r5, r3
 8002f98:	68a3      	ldr	r3, [r4, #8]
 8002f9a:	6922      	ldr	r2, [r4, #16]
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	dd01      	ble.n	8002fa4 <_printf_common+0x80>
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	18ed      	adds	r5, r5, r3
 8002fa4:	2700      	movs	r7, #0
 8002fa6:	42bd      	cmp	r5, r7
 8002fa8:	d120      	bne.n	8002fec <_printf_common+0xc8>
 8002faa:	2000      	movs	r0, #0
 8002fac:	e010      	b.n	8002fd0 <_printf_common+0xac>
 8002fae:	3701      	adds	r7, #1
 8002fb0:	68e3      	ldr	r3, [r4, #12]
 8002fb2:	682a      	ldr	r2, [r5, #0]
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	42bb      	cmp	r3, r7
 8002fb8:	ddd2      	ble.n	8002f60 <_printf_common+0x3c>
 8002fba:	0022      	movs	r2, r4
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	9901      	ldr	r1, [sp, #4]
 8002fc0:	9800      	ldr	r0, [sp, #0]
 8002fc2:	9e08      	ldr	r6, [sp, #32]
 8002fc4:	3219      	adds	r2, #25
 8002fc6:	47b0      	blx	r6
 8002fc8:	1c43      	adds	r3, r0, #1
 8002fca:	d1f0      	bne.n	8002fae <_printf_common+0x8a>
 8002fcc:	2001      	movs	r0, #1
 8002fce:	4240      	negs	r0, r0
 8002fd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002fd2:	2030      	movs	r0, #48	; 0x30
 8002fd4:	18e1      	adds	r1, r4, r3
 8002fd6:	3143      	adds	r1, #67	; 0x43
 8002fd8:	7008      	strb	r0, [r1, #0]
 8002fda:	0021      	movs	r1, r4
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	3145      	adds	r1, #69	; 0x45
 8002fe0:	7809      	ldrb	r1, [r1, #0]
 8002fe2:	18a2      	adds	r2, r4, r2
 8002fe4:	3243      	adds	r2, #67	; 0x43
 8002fe6:	3302      	adds	r3, #2
 8002fe8:	7011      	strb	r1, [r2, #0]
 8002fea:	e7c1      	b.n	8002f70 <_printf_common+0x4c>
 8002fec:	0022      	movs	r2, r4
 8002fee:	2301      	movs	r3, #1
 8002ff0:	9901      	ldr	r1, [sp, #4]
 8002ff2:	9800      	ldr	r0, [sp, #0]
 8002ff4:	9e08      	ldr	r6, [sp, #32]
 8002ff6:	321a      	adds	r2, #26
 8002ff8:	47b0      	blx	r6
 8002ffa:	1c43      	adds	r3, r0, #1
 8002ffc:	d0e6      	beq.n	8002fcc <_printf_common+0xa8>
 8002ffe:	3701      	adds	r7, #1
 8003000:	e7d1      	b.n	8002fa6 <_printf_common+0x82>
	...

08003004 <_printf_i>:
 8003004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003006:	b08b      	sub	sp, #44	; 0x2c
 8003008:	9206      	str	r2, [sp, #24]
 800300a:	000a      	movs	r2, r1
 800300c:	3243      	adds	r2, #67	; 0x43
 800300e:	9307      	str	r3, [sp, #28]
 8003010:	9005      	str	r0, [sp, #20]
 8003012:	9204      	str	r2, [sp, #16]
 8003014:	7e0a      	ldrb	r2, [r1, #24]
 8003016:	000c      	movs	r4, r1
 8003018:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800301a:	2a78      	cmp	r2, #120	; 0x78
 800301c:	d807      	bhi.n	800302e <_printf_i+0x2a>
 800301e:	2a62      	cmp	r2, #98	; 0x62
 8003020:	d809      	bhi.n	8003036 <_printf_i+0x32>
 8003022:	2a00      	cmp	r2, #0
 8003024:	d100      	bne.n	8003028 <_printf_i+0x24>
 8003026:	e0c1      	b.n	80031ac <_printf_i+0x1a8>
 8003028:	2a58      	cmp	r2, #88	; 0x58
 800302a:	d100      	bne.n	800302e <_printf_i+0x2a>
 800302c:	e08c      	b.n	8003148 <_printf_i+0x144>
 800302e:	0026      	movs	r6, r4
 8003030:	3642      	adds	r6, #66	; 0x42
 8003032:	7032      	strb	r2, [r6, #0]
 8003034:	e022      	b.n	800307c <_printf_i+0x78>
 8003036:	0010      	movs	r0, r2
 8003038:	3863      	subs	r0, #99	; 0x63
 800303a:	2815      	cmp	r0, #21
 800303c:	d8f7      	bhi.n	800302e <_printf_i+0x2a>
 800303e:	f7fd f86b 	bl	8000118 <__gnu_thumb1_case_shi>
 8003042:	0016      	.short	0x0016
 8003044:	fff6001f 	.word	0xfff6001f
 8003048:	fff6fff6 	.word	0xfff6fff6
 800304c:	001ffff6 	.word	0x001ffff6
 8003050:	fff6fff6 	.word	0xfff6fff6
 8003054:	fff6fff6 	.word	0xfff6fff6
 8003058:	003600a8 	.word	0x003600a8
 800305c:	fff6009a 	.word	0xfff6009a
 8003060:	00b9fff6 	.word	0x00b9fff6
 8003064:	0036fff6 	.word	0x0036fff6
 8003068:	fff6fff6 	.word	0xfff6fff6
 800306c:	009e      	.short	0x009e
 800306e:	0026      	movs	r6, r4
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	3642      	adds	r6, #66	; 0x42
 8003074:	1d11      	adds	r1, r2, #4
 8003076:	6019      	str	r1, [r3, #0]
 8003078:	6813      	ldr	r3, [r2, #0]
 800307a:	7033      	strb	r3, [r6, #0]
 800307c:	2301      	movs	r3, #1
 800307e:	e0a7      	b.n	80031d0 <_printf_i+0x1cc>
 8003080:	6808      	ldr	r0, [r1, #0]
 8003082:	6819      	ldr	r1, [r3, #0]
 8003084:	1d0a      	adds	r2, r1, #4
 8003086:	0605      	lsls	r5, r0, #24
 8003088:	d50b      	bpl.n	80030a2 <_printf_i+0x9e>
 800308a:	680d      	ldr	r5, [r1, #0]
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	2d00      	cmp	r5, #0
 8003090:	da03      	bge.n	800309a <_printf_i+0x96>
 8003092:	232d      	movs	r3, #45	; 0x2d
 8003094:	9a04      	ldr	r2, [sp, #16]
 8003096:	426d      	negs	r5, r5
 8003098:	7013      	strb	r3, [r2, #0]
 800309a:	4b61      	ldr	r3, [pc, #388]	; (8003220 <_printf_i+0x21c>)
 800309c:	270a      	movs	r7, #10
 800309e:	9303      	str	r3, [sp, #12]
 80030a0:	e01b      	b.n	80030da <_printf_i+0xd6>
 80030a2:	680d      	ldr	r5, [r1, #0]
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	0641      	lsls	r1, r0, #25
 80030a8:	d5f1      	bpl.n	800308e <_printf_i+0x8a>
 80030aa:	b22d      	sxth	r5, r5
 80030ac:	e7ef      	b.n	800308e <_printf_i+0x8a>
 80030ae:	680d      	ldr	r5, [r1, #0]
 80030b0:	6819      	ldr	r1, [r3, #0]
 80030b2:	1d08      	adds	r0, r1, #4
 80030b4:	6018      	str	r0, [r3, #0]
 80030b6:	062e      	lsls	r6, r5, #24
 80030b8:	d501      	bpl.n	80030be <_printf_i+0xba>
 80030ba:	680d      	ldr	r5, [r1, #0]
 80030bc:	e003      	b.n	80030c6 <_printf_i+0xc2>
 80030be:	066d      	lsls	r5, r5, #25
 80030c0:	d5fb      	bpl.n	80030ba <_printf_i+0xb6>
 80030c2:	680d      	ldr	r5, [r1, #0]
 80030c4:	b2ad      	uxth	r5, r5
 80030c6:	4b56      	ldr	r3, [pc, #344]	; (8003220 <_printf_i+0x21c>)
 80030c8:	2708      	movs	r7, #8
 80030ca:	9303      	str	r3, [sp, #12]
 80030cc:	2a6f      	cmp	r2, #111	; 0x6f
 80030ce:	d000      	beq.n	80030d2 <_printf_i+0xce>
 80030d0:	3702      	adds	r7, #2
 80030d2:	0023      	movs	r3, r4
 80030d4:	2200      	movs	r2, #0
 80030d6:	3343      	adds	r3, #67	; 0x43
 80030d8:	701a      	strb	r2, [r3, #0]
 80030da:	6863      	ldr	r3, [r4, #4]
 80030dc:	60a3      	str	r3, [r4, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	db03      	blt.n	80030ea <_printf_i+0xe6>
 80030e2:	2204      	movs	r2, #4
 80030e4:	6821      	ldr	r1, [r4, #0]
 80030e6:	4391      	bics	r1, r2
 80030e8:	6021      	str	r1, [r4, #0]
 80030ea:	2d00      	cmp	r5, #0
 80030ec:	d102      	bne.n	80030f4 <_printf_i+0xf0>
 80030ee:	9e04      	ldr	r6, [sp, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00c      	beq.n	800310e <_printf_i+0x10a>
 80030f4:	9e04      	ldr	r6, [sp, #16]
 80030f6:	0028      	movs	r0, r5
 80030f8:	0039      	movs	r1, r7
 80030fa:	f7fd f89d 	bl	8000238 <__aeabi_uidivmod>
 80030fe:	9b03      	ldr	r3, [sp, #12]
 8003100:	3e01      	subs	r6, #1
 8003102:	5c5b      	ldrb	r3, [r3, r1]
 8003104:	7033      	strb	r3, [r6, #0]
 8003106:	002b      	movs	r3, r5
 8003108:	0005      	movs	r5, r0
 800310a:	429f      	cmp	r7, r3
 800310c:	d9f3      	bls.n	80030f6 <_printf_i+0xf2>
 800310e:	2f08      	cmp	r7, #8
 8003110:	d109      	bne.n	8003126 <_printf_i+0x122>
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	07db      	lsls	r3, r3, #31
 8003116:	d506      	bpl.n	8003126 <_printf_i+0x122>
 8003118:	6863      	ldr	r3, [r4, #4]
 800311a:	6922      	ldr	r2, [r4, #16]
 800311c:	4293      	cmp	r3, r2
 800311e:	dc02      	bgt.n	8003126 <_printf_i+0x122>
 8003120:	2330      	movs	r3, #48	; 0x30
 8003122:	3e01      	subs	r6, #1
 8003124:	7033      	strb	r3, [r6, #0]
 8003126:	9b04      	ldr	r3, [sp, #16]
 8003128:	1b9b      	subs	r3, r3, r6
 800312a:	6123      	str	r3, [r4, #16]
 800312c:	9b07      	ldr	r3, [sp, #28]
 800312e:	0021      	movs	r1, r4
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	9805      	ldr	r0, [sp, #20]
 8003134:	9b06      	ldr	r3, [sp, #24]
 8003136:	aa09      	add	r2, sp, #36	; 0x24
 8003138:	f7ff fef4 	bl	8002f24 <_printf_common>
 800313c:	1c43      	adds	r3, r0, #1
 800313e:	d14c      	bne.n	80031da <_printf_i+0x1d6>
 8003140:	2001      	movs	r0, #1
 8003142:	4240      	negs	r0, r0
 8003144:	b00b      	add	sp, #44	; 0x2c
 8003146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003148:	3145      	adds	r1, #69	; 0x45
 800314a:	700a      	strb	r2, [r1, #0]
 800314c:	4a34      	ldr	r2, [pc, #208]	; (8003220 <_printf_i+0x21c>)
 800314e:	9203      	str	r2, [sp, #12]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	6821      	ldr	r1, [r4, #0]
 8003154:	ca20      	ldmia	r2!, {r5}
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	0608      	lsls	r0, r1, #24
 800315a:	d516      	bpl.n	800318a <_printf_i+0x186>
 800315c:	07cb      	lsls	r3, r1, #31
 800315e:	d502      	bpl.n	8003166 <_printf_i+0x162>
 8003160:	2320      	movs	r3, #32
 8003162:	4319      	orrs	r1, r3
 8003164:	6021      	str	r1, [r4, #0]
 8003166:	2710      	movs	r7, #16
 8003168:	2d00      	cmp	r5, #0
 800316a:	d1b2      	bne.n	80030d2 <_printf_i+0xce>
 800316c:	2320      	movs	r3, #32
 800316e:	6822      	ldr	r2, [r4, #0]
 8003170:	439a      	bics	r2, r3
 8003172:	6022      	str	r2, [r4, #0]
 8003174:	e7ad      	b.n	80030d2 <_printf_i+0xce>
 8003176:	2220      	movs	r2, #32
 8003178:	6809      	ldr	r1, [r1, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	6022      	str	r2, [r4, #0]
 800317e:	0022      	movs	r2, r4
 8003180:	2178      	movs	r1, #120	; 0x78
 8003182:	3245      	adds	r2, #69	; 0x45
 8003184:	7011      	strb	r1, [r2, #0]
 8003186:	4a27      	ldr	r2, [pc, #156]	; (8003224 <_printf_i+0x220>)
 8003188:	e7e1      	b.n	800314e <_printf_i+0x14a>
 800318a:	0648      	lsls	r0, r1, #25
 800318c:	d5e6      	bpl.n	800315c <_printf_i+0x158>
 800318e:	b2ad      	uxth	r5, r5
 8003190:	e7e4      	b.n	800315c <_printf_i+0x158>
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	680d      	ldr	r5, [r1, #0]
 8003196:	1d10      	adds	r0, r2, #4
 8003198:	6949      	ldr	r1, [r1, #20]
 800319a:	6018      	str	r0, [r3, #0]
 800319c:	6813      	ldr	r3, [r2, #0]
 800319e:	062e      	lsls	r6, r5, #24
 80031a0:	d501      	bpl.n	80031a6 <_printf_i+0x1a2>
 80031a2:	6019      	str	r1, [r3, #0]
 80031a4:	e002      	b.n	80031ac <_printf_i+0x1a8>
 80031a6:	066d      	lsls	r5, r5, #25
 80031a8:	d5fb      	bpl.n	80031a2 <_printf_i+0x19e>
 80031aa:	8019      	strh	r1, [r3, #0]
 80031ac:	2300      	movs	r3, #0
 80031ae:	9e04      	ldr	r6, [sp, #16]
 80031b0:	6123      	str	r3, [r4, #16]
 80031b2:	e7bb      	b.n	800312c <_printf_i+0x128>
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	1d11      	adds	r1, r2, #4
 80031b8:	6019      	str	r1, [r3, #0]
 80031ba:	6816      	ldr	r6, [r2, #0]
 80031bc:	2100      	movs	r1, #0
 80031be:	0030      	movs	r0, r6
 80031c0:	6862      	ldr	r2, [r4, #4]
 80031c2:	f000 f831 	bl	8003228 <memchr>
 80031c6:	2800      	cmp	r0, #0
 80031c8:	d001      	beq.n	80031ce <_printf_i+0x1ca>
 80031ca:	1b80      	subs	r0, r0, r6
 80031cc:	6060      	str	r0, [r4, #4]
 80031ce:	6863      	ldr	r3, [r4, #4]
 80031d0:	6123      	str	r3, [r4, #16]
 80031d2:	2300      	movs	r3, #0
 80031d4:	9a04      	ldr	r2, [sp, #16]
 80031d6:	7013      	strb	r3, [r2, #0]
 80031d8:	e7a8      	b.n	800312c <_printf_i+0x128>
 80031da:	6923      	ldr	r3, [r4, #16]
 80031dc:	0032      	movs	r2, r6
 80031de:	9906      	ldr	r1, [sp, #24]
 80031e0:	9805      	ldr	r0, [sp, #20]
 80031e2:	9d07      	ldr	r5, [sp, #28]
 80031e4:	47a8      	blx	r5
 80031e6:	1c43      	adds	r3, r0, #1
 80031e8:	d0aa      	beq.n	8003140 <_printf_i+0x13c>
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	079b      	lsls	r3, r3, #30
 80031ee:	d415      	bmi.n	800321c <_printf_i+0x218>
 80031f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031f2:	68e0      	ldr	r0, [r4, #12]
 80031f4:	4298      	cmp	r0, r3
 80031f6:	daa5      	bge.n	8003144 <_printf_i+0x140>
 80031f8:	0018      	movs	r0, r3
 80031fa:	e7a3      	b.n	8003144 <_printf_i+0x140>
 80031fc:	0022      	movs	r2, r4
 80031fe:	2301      	movs	r3, #1
 8003200:	9906      	ldr	r1, [sp, #24]
 8003202:	9805      	ldr	r0, [sp, #20]
 8003204:	9e07      	ldr	r6, [sp, #28]
 8003206:	3219      	adds	r2, #25
 8003208:	47b0      	blx	r6
 800320a:	1c43      	adds	r3, r0, #1
 800320c:	d098      	beq.n	8003140 <_printf_i+0x13c>
 800320e:	3501      	adds	r5, #1
 8003210:	68e3      	ldr	r3, [r4, #12]
 8003212:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	42ab      	cmp	r3, r5
 8003218:	dcf0      	bgt.n	80031fc <_printf_i+0x1f8>
 800321a:	e7e9      	b.n	80031f0 <_printf_i+0x1ec>
 800321c:	2500      	movs	r5, #0
 800321e:	e7f7      	b.n	8003210 <_printf_i+0x20c>
 8003220:	08003571 	.word	0x08003571
 8003224:	08003582 	.word	0x08003582

08003228 <memchr>:
 8003228:	b2c9      	uxtb	r1, r1
 800322a:	1882      	adds	r2, r0, r2
 800322c:	4290      	cmp	r0, r2
 800322e:	d101      	bne.n	8003234 <memchr+0xc>
 8003230:	2000      	movs	r0, #0
 8003232:	4770      	bx	lr
 8003234:	7803      	ldrb	r3, [r0, #0]
 8003236:	428b      	cmp	r3, r1
 8003238:	d0fb      	beq.n	8003232 <memchr+0xa>
 800323a:	3001      	adds	r0, #1
 800323c:	e7f6      	b.n	800322c <memchr+0x4>

0800323e <memcpy>:
 800323e:	2300      	movs	r3, #0
 8003240:	b510      	push	{r4, lr}
 8003242:	429a      	cmp	r2, r3
 8003244:	d100      	bne.n	8003248 <memcpy+0xa>
 8003246:	bd10      	pop	{r4, pc}
 8003248:	5ccc      	ldrb	r4, [r1, r3]
 800324a:	54c4      	strb	r4, [r0, r3]
 800324c:	3301      	adds	r3, #1
 800324e:	e7f8      	b.n	8003242 <memcpy+0x4>

08003250 <memmove>:
 8003250:	b510      	push	{r4, lr}
 8003252:	4288      	cmp	r0, r1
 8003254:	d902      	bls.n	800325c <memmove+0xc>
 8003256:	188b      	adds	r3, r1, r2
 8003258:	4298      	cmp	r0, r3
 800325a:	d303      	bcc.n	8003264 <memmove+0x14>
 800325c:	2300      	movs	r3, #0
 800325e:	e007      	b.n	8003270 <memmove+0x20>
 8003260:	5c8b      	ldrb	r3, [r1, r2]
 8003262:	5483      	strb	r3, [r0, r2]
 8003264:	3a01      	subs	r2, #1
 8003266:	d2fb      	bcs.n	8003260 <memmove+0x10>
 8003268:	bd10      	pop	{r4, pc}
 800326a:	5ccc      	ldrb	r4, [r1, r3]
 800326c:	54c4      	strb	r4, [r0, r3]
 800326e:	3301      	adds	r3, #1
 8003270:	429a      	cmp	r2, r3
 8003272:	d1fa      	bne.n	800326a <memmove+0x1a>
 8003274:	e7f8      	b.n	8003268 <memmove+0x18>
	...

08003278 <_free_r>:
 8003278:	b570      	push	{r4, r5, r6, lr}
 800327a:	0005      	movs	r5, r0
 800327c:	2900      	cmp	r1, #0
 800327e:	d010      	beq.n	80032a2 <_free_r+0x2a>
 8003280:	1f0c      	subs	r4, r1, #4
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	da00      	bge.n	800328a <_free_r+0x12>
 8003288:	18e4      	adds	r4, r4, r3
 800328a:	0028      	movs	r0, r5
 800328c:	f000 f918 	bl	80034c0 <__malloc_lock>
 8003290:	4a1d      	ldr	r2, [pc, #116]	; (8003308 <_free_r+0x90>)
 8003292:	6813      	ldr	r3, [r2, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d105      	bne.n	80032a4 <_free_r+0x2c>
 8003298:	6063      	str	r3, [r4, #4]
 800329a:	6014      	str	r4, [r2, #0]
 800329c:	0028      	movs	r0, r5
 800329e:	f000 f917 	bl	80034d0 <__malloc_unlock>
 80032a2:	bd70      	pop	{r4, r5, r6, pc}
 80032a4:	42a3      	cmp	r3, r4
 80032a6:	d908      	bls.n	80032ba <_free_r+0x42>
 80032a8:	6821      	ldr	r1, [r4, #0]
 80032aa:	1860      	adds	r0, r4, r1
 80032ac:	4283      	cmp	r3, r0
 80032ae:	d1f3      	bne.n	8003298 <_free_r+0x20>
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	1841      	adds	r1, r0, r1
 80032b6:	6021      	str	r1, [r4, #0]
 80032b8:	e7ee      	b.n	8003298 <_free_r+0x20>
 80032ba:	001a      	movs	r2, r3
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <_free_r+0x4e>
 80032c2:	42a3      	cmp	r3, r4
 80032c4:	d9f9      	bls.n	80032ba <_free_r+0x42>
 80032c6:	6811      	ldr	r1, [r2, #0]
 80032c8:	1850      	adds	r0, r2, r1
 80032ca:	42a0      	cmp	r0, r4
 80032cc:	d10b      	bne.n	80032e6 <_free_r+0x6e>
 80032ce:	6820      	ldr	r0, [r4, #0]
 80032d0:	1809      	adds	r1, r1, r0
 80032d2:	1850      	adds	r0, r2, r1
 80032d4:	6011      	str	r1, [r2, #0]
 80032d6:	4283      	cmp	r3, r0
 80032d8:	d1e0      	bne.n	800329c <_free_r+0x24>
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	1841      	adds	r1, r0, r1
 80032e0:	6011      	str	r1, [r2, #0]
 80032e2:	6053      	str	r3, [r2, #4]
 80032e4:	e7da      	b.n	800329c <_free_r+0x24>
 80032e6:	42a0      	cmp	r0, r4
 80032e8:	d902      	bls.n	80032f0 <_free_r+0x78>
 80032ea:	230c      	movs	r3, #12
 80032ec:	602b      	str	r3, [r5, #0]
 80032ee:	e7d5      	b.n	800329c <_free_r+0x24>
 80032f0:	6821      	ldr	r1, [r4, #0]
 80032f2:	1860      	adds	r0, r4, r1
 80032f4:	4283      	cmp	r3, r0
 80032f6:	d103      	bne.n	8003300 <_free_r+0x88>
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	1841      	adds	r1, r0, r1
 80032fe:	6021      	str	r1, [r4, #0]
 8003300:	6063      	str	r3, [r4, #4]
 8003302:	6054      	str	r4, [r2, #4]
 8003304:	e7ca      	b.n	800329c <_free_r+0x24>
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	200001c4 	.word	0x200001c4

0800330c <sbrk_aligned>:
 800330c:	b570      	push	{r4, r5, r6, lr}
 800330e:	4e0f      	ldr	r6, [pc, #60]	; (800334c <sbrk_aligned+0x40>)
 8003310:	000d      	movs	r5, r1
 8003312:	6831      	ldr	r1, [r6, #0]
 8003314:	0004      	movs	r4, r0
 8003316:	2900      	cmp	r1, #0
 8003318:	d102      	bne.n	8003320 <sbrk_aligned+0x14>
 800331a:	f000 f8bf 	bl	800349c <_sbrk_r>
 800331e:	6030      	str	r0, [r6, #0]
 8003320:	0029      	movs	r1, r5
 8003322:	0020      	movs	r0, r4
 8003324:	f000 f8ba 	bl	800349c <_sbrk_r>
 8003328:	1c43      	adds	r3, r0, #1
 800332a:	d00a      	beq.n	8003342 <sbrk_aligned+0x36>
 800332c:	2303      	movs	r3, #3
 800332e:	1cc5      	adds	r5, r0, #3
 8003330:	439d      	bics	r5, r3
 8003332:	42a8      	cmp	r0, r5
 8003334:	d007      	beq.n	8003346 <sbrk_aligned+0x3a>
 8003336:	1a29      	subs	r1, r5, r0
 8003338:	0020      	movs	r0, r4
 800333a:	f000 f8af 	bl	800349c <_sbrk_r>
 800333e:	1c43      	adds	r3, r0, #1
 8003340:	d101      	bne.n	8003346 <sbrk_aligned+0x3a>
 8003342:	2501      	movs	r5, #1
 8003344:	426d      	negs	r5, r5
 8003346:	0028      	movs	r0, r5
 8003348:	bd70      	pop	{r4, r5, r6, pc}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	200001c8 	.word	0x200001c8

08003350 <_malloc_r>:
 8003350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003352:	2203      	movs	r2, #3
 8003354:	1ccb      	adds	r3, r1, #3
 8003356:	4393      	bics	r3, r2
 8003358:	3308      	adds	r3, #8
 800335a:	0006      	movs	r6, r0
 800335c:	001f      	movs	r7, r3
 800335e:	2b0c      	cmp	r3, #12
 8003360:	d232      	bcs.n	80033c8 <_malloc_r+0x78>
 8003362:	270c      	movs	r7, #12
 8003364:	42b9      	cmp	r1, r7
 8003366:	d831      	bhi.n	80033cc <_malloc_r+0x7c>
 8003368:	0030      	movs	r0, r6
 800336a:	f000 f8a9 	bl	80034c0 <__malloc_lock>
 800336e:	4d32      	ldr	r5, [pc, #200]	; (8003438 <_malloc_r+0xe8>)
 8003370:	682b      	ldr	r3, [r5, #0]
 8003372:	001c      	movs	r4, r3
 8003374:	2c00      	cmp	r4, #0
 8003376:	d12e      	bne.n	80033d6 <_malloc_r+0x86>
 8003378:	0039      	movs	r1, r7
 800337a:	0030      	movs	r0, r6
 800337c:	f7ff ffc6 	bl	800330c <sbrk_aligned>
 8003380:	0004      	movs	r4, r0
 8003382:	1c43      	adds	r3, r0, #1
 8003384:	d11e      	bne.n	80033c4 <_malloc_r+0x74>
 8003386:	682c      	ldr	r4, [r5, #0]
 8003388:	0025      	movs	r5, r4
 800338a:	2d00      	cmp	r5, #0
 800338c:	d14a      	bne.n	8003424 <_malloc_r+0xd4>
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	0029      	movs	r1, r5
 8003392:	18e3      	adds	r3, r4, r3
 8003394:	0030      	movs	r0, r6
 8003396:	9301      	str	r3, [sp, #4]
 8003398:	f000 f880 	bl	800349c <_sbrk_r>
 800339c:	9b01      	ldr	r3, [sp, #4]
 800339e:	4283      	cmp	r3, r0
 80033a0:	d143      	bne.n	800342a <_malloc_r+0xda>
 80033a2:	6823      	ldr	r3, [r4, #0]
 80033a4:	3703      	adds	r7, #3
 80033a6:	1aff      	subs	r7, r7, r3
 80033a8:	2303      	movs	r3, #3
 80033aa:	439f      	bics	r7, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	2f0c      	cmp	r7, #12
 80033b0:	d200      	bcs.n	80033b4 <_malloc_r+0x64>
 80033b2:	270c      	movs	r7, #12
 80033b4:	0039      	movs	r1, r7
 80033b6:	0030      	movs	r0, r6
 80033b8:	f7ff ffa8 	bl	800330c <sbrk_aligned>
 80033bc:	1c43      	adds	r3, r0, #1
 80033be:	d034      	beq.n	800342a <_malloc_r+0xda>
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	19df      	adds	r7, r3, r7
 80033c4:	6027      	str	r7, [r4, #0]
 80033c6:	e013      	b.n	80033f0 <_malloc_r+0xa0>
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	dacb      	bge.n	8003364 <_malloc_r+0x14>
 80033cc:	230c      	movs	r3, #12
 80033ce:	2500      	movs	r5, #0
 80033d0:	6033      	str	r3, [r6, #0]
 80033d2:	0028      	movs	r0, r5
 80033d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033d6:	6822      	ldr	r2, [r4, #0]
 80033d8:	1bd1      	subs	r1, r2, r7
 80033da:	d420      	bmi.n	800341e <_malloc_r+0xce>
 80033dc:	290b      	cmp	r1, #11
 80033de:	d917      	bls.n	8003410 <_malloc_r+0xc0>
 80033e0:	19e2      	adds	r2, r4, r7
 80033e2:	6027      	str	r7, [r4, #0]
 80033e4:	42a3      	cmp	r3, r4
 80033e6:	d111      	bne.n	800340c <_malloc_r+0xbc>
 80033e8:	602a      	str	r2, [r5, #0]
 80033ea:	6863      	ldr	r3, [r4, #4]
 80033ec:	6011      	str	r1, [r2, #0]
 80033ee:	6053      	str	r3, [r2, #4]
 80033f0:	0030      	movs	r0, r6
 80033f2:	0025      	movs	r5, r4
 80033f4:	f000 f86c 	bl	80034d0 <__malloc_unlock>
 80033f8:	2207      	movs	r2, #7
 80033fa:	350b      	adds	r5, #11
 80033fc:	1d23      	adds	r3, r4, #4
 80033fe:	4395      	bics	r5, r2
 8003400:	1aea      	subs	r2, r5, r3
 8003402:	429d      	cmp	r5, r3
 8003404:	d0e5      	beq.n	80033d2 <_malloc_r+0x82>
 8003406:	1b5b      	subs	r3, r3, r5
 8003408:	50a3      	str	r3, [r4, r2]
 800340a:	e7e2      	b.n	80033d2 <_malloc_r+0x82>
 800340c:	605a      	str	r2, [r3, #4]
 800340e:	e7ec      	b.n	80033ea <_malloc_r+0x9a>
 8003410:	6862      	ldr	r2, [r4, #4]
 8003412:	42a3      	cmp	r3, r4
 8003414:	d101      	bne.n	800341a <_malloc_r+0xca>
 8003416:	602a      	str	r2, [r5, #0]
 8003418:	e7ea      	b.n	80033f0 <_malloc_r+0xa0>
 800341a:	605a      	str	r2, [r3, #4]
 800341c:	e7e8      	b.n	80033f0 <_malloc_r+0xa0>
 800341e:	0023      	movs	r3, r4
 8003420:	6864      	ldr	r4, [r4, #4]
 8003422:	e7a7      	b.n	8003374 <_malloc_r+0x24>
 8003424:	002c      	movs	r4, r5
 8003426:	686d      	ldr	r5, [r5, #4]
 8003428:	e7af      	b.n	800338a <_malloc_r+0x3a>
 800342a:	230c      	movs	r3, #12
 800342c:	0030      	movs	r0, r6
 800342e:	6033      	str	r3, [r6, #0]
 8003430:	f000 f84e 	bl	80034d0 <__malloc_unlock>
 8003434:	e7cd      	b.n	80033d2 <_malloc_r+0x82>
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	200001c4 	.word	0x200001c4

0800343c <_realloc_r>:
 800343c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800343e:	0007      	movs	r7, r0
 8003440:	000e      	movs	r6, r1
 8003442:	0014      	movs	r4, r2
 8003444:	2900      	cmp	r1, #0
 8003446:	d105      	bne.n	8003454 <_realloc_r+0x18>
 8003448:	0011      	movs	r1, r2
 800344a:	f7ff ff81 	bl	8003350 <_malloc_r>
 800344e:	0005      	movs	r5, r0
 8003450:	0028      	movs	r0, r5
 8003452:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003454:	2a00      	cmp	r2, #0
 8003456:	d103      	bne.n	8003460 <_realloc_r+0x24>
 8003458:	f7ff ff0e 	bl	8003278 <_free_r>
 800345c:	0025      	movs	r5, r4
 800345e:	e7f7      	b.n	8003450 <_realloc_r+0x14>
 8003460:	f000 f83e 	bl	80034e0 <_malloc_usable_size_r>
 8003464:	9001      	str	r0, [sp, #4]
 8003466:	4284      	cmp	r4, r0
 8003468:	d803      	bhi.n	8003472 <_realloc_r+0x36>
 800346a:	0035      	movs	r5, r6
 800346c:	0843      	lsrs	r3, r0, #1
 800346e:	42a3      	cmp	r3, r4
 8003470:	d3ee      	bcc.n	8003450 <_realloc_r+0x14>
 8003472:	0021      	movs	r1, r4
 8003474:	0038      	movs	r0, r7
 8003476:	f7ff ff6b 	bl	8003350 <_malloc_r>
 800347a:	1e05      	subs	r5, r0, #0
 800347c:	d0e8      	beq.n	8003450 <_realloc_r+0x14>
 800347e:	9b01      	ldr	r3, [sp, #4]
 8003480:	0022      	movs	r2, r4
 8003482:	429c      	cmp	r4, r3
 8003484:	d900      	bls.n	8003488 <_realloc_r+0x4c>
 8003486:	001a      	movs	r2, r3
 8003488:	0031      	movs	r1, r6
 800348a:	0028      	movs	r0, r5
 800348c:	f7ff fed7 	bl	800323e <memcpy>
 8003490:	0031      	movs	r1, r6
 8003492:	0038      	movs	r0, r7
 8003494:	f7ff fef0 	bl	8003278 <_free_r>
 8003498:	e7da      	b.n	8003450 <_realloc_r+0x14>
	...

0800349c <_sbrk_r>:
 800349c:	2300      	movs	r3, #0
 800349e:	b570      	push	{r4, r5, r6, lr}
 80034a0:	4d06      	ldr	r5, [pc, #24]	; (80034bc <_sbrk_r+0x20>)
 80034a2:	0004      	movs	r4, r0
 80034a4:	0008      	movs	r0, r1
 80034a6:	602b      	str	r3, [r5, #0]
 80034a8:	f7fd f9bc 	bl	8000824 <_sbrk>
 80034ac:	1c43      	adds	r3, r0, #1
 80034ae:	d103      	bne.n	80034b8 <_sbrk_r+0x1c>
 80034b0:	682b      	ldr	r3, [r5, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d000      	beq.n	80034b8 <_sbrk_r+0x1c>
 80034b6:	6023      	str	r3, [r4, #0]
 80034b8:	bd70      	pop	{r4, r5, r6, pc}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	200001cc 	.word	0x200001cc

080034c0 <__malloc_lock>:
 80034c0:	b510      	push	{r4, lr}
 80034c2:	4802      	ldr	r0, [pc, #8]	; (80034cc <__malloc_lock+0xc>)
 80034c4:	f000 f814 	bl	80034f0 <__retarget_lock_acquire_recursive>
 80034c8:	bd10      	pop	{r4, pc}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	200001d0 	.word	0x200001d0

080034d0 <__malloc_unlock>:
 80034d0:	b510      	push	{r4, lr}
 80034d2:	4802      	ldr	r0, [pc, #8]	; (80034dc <__malloc_unlock+0xc>)
 80034d4:	f000 f80d 	bl	80034f2 <__retarget_lock_release_recursive>
 80034d8:	bd10      	pop	{r4, pc}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	200001d0 	.word	0x200001d0

080034e0 <_malloc_usable_size_r>:
 80034e0:	1f0b      	subs	r3, r1, #4
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	1f18      	subs	r0, r3, #4
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	da01      	bge.n	80034ee <_malloc_usable_size_r+0xe>
 80034ea:	580b      	ldr	r3, [r1, r0]
 80034ec:	18c0      	adds	r0, r0, r3
 80034ee:	4770      	bx	lr

080034f0 <__retarget_lock_acquire_recursive>:
 80034f0:	4770      	bx	lr

080034f2 <__retarget_lock_release_recursive>:
 80034f2:	4770      	bx	lr

080034f4 <_init>:
 80034f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fa:	bc08      	pop	{r3}
 80034fc:	469e      	mov	lr, r3
 80034fe:	4770      	bx	lr

08003500 <_fini>:
 8003500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003506:	bc08      	pop	{r3}
 8003508:	469e      	mov	lr, r3
 800350a:	4770      	bx	lr
