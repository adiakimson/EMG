
pd1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08005994  08005994  00015994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ab8  08005ab8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005ab8  08005ab8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ab8  08005ab8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ab8  08005ab8  00015ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005abc  08005abc  00015abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000070  08005b30  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08005b30  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe56  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b4  00000000  00000000  0002feee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  000322a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00033110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a39b  00000000  00000000  00033e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f6f  00000000  00000000  0004e22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095e09  00000000  00000000  0005f19a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4fa3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ba0  00000000  00000000  000f4ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800597c 	.word	0x0800597c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800597c 	.word	0x0800597c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000410:	2301      	movs	r3, #1
 8000412:	425b      	negs	r3, r3
 8000414:	1d39      	adds	r1, r7, #4
 8000416:	4804      	ldr	r0, [pc, #16]	; (8000428 <__io_putchar+0x20>)
 8000418:	2201      	movs	r2, #1
 800041a:	f003 f8e3 	bl	80035e4 <HAL_UART_Transmit>
  return ch;
 800041e:	687b      	ldr	r3, [r7, #4]
}
 8000420:	0018      	movs	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	b002      	add	sp, #8
 8000426:	bd80      	pop	{r7, pc}
 8000428:	200001dc 	.word	0x200001dc

0800042c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000430:	f000 fd8e 	bl	8000f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000434:	f000 f8a6 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000438:	f000 fa58 	bl	80008ec <MX_GPIO_Init>
  MX_DMA_Init();
 800043c:	f000 fa38 	bl	80008b0 <MX_DMA_Init>
  MX_ADC_Init();
 8000440:	f000 f908 	bl	8000654 <MX_ADC_Init>
  MX_TIM1_Init();
 8000444:	f000 f97c 	bl	8000740 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000448:	f000 fa02 	bl	8000850 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800044c:	f000 f9d0 	bl	80007f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&rxData,1);
 8000450:	493f      	ldr	r1, [pc, #252]	; (8000550 <main+0x124>)
 8000452:	4b40      	ldr	r3, [pc, #256]	; (8000554 <main+0x128>)
 8000454:	2201      	movs	r2, #1
 8000456:	0018      	movs	r0, r3
 8000458:	f003 f96d 	bl	8003736 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim1);
 800045c:	4b3e      	ldr	r3, [pc, #248]	; (8000558 <main+0x12c>)
 800045e:	0018      	movs	r0, r3
 8000460:	f002 fc9e 	bl	8002da0 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //surowe dane z przetwornika - pokazuje tylko to co pobiera się co 1s
	  printf("Ch1: %d\r\n",raw[0]);
 8000464:	4b3d      	ldr	r3, [pc, #244]	; (800055c <main+0x130>)
 8000466:	881b      	ldrh	r3, [r3, #0]
 8000468:	001a      	movs	r2, r3
 800046a:	4b3d      	ldr	r3, [pc, #244]	; (8000560 <main+0x134>)
 800046c:	0011      	movs	r1, r2
 800046e:	0018      	movs	r0, r3
 8000470:	f004 faac 	bl	80049cc <iprintf>
	  HAL_Delay(1000);
 8000474:	23fa      	movs	r3, #250	; 0xfa
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	0018      	movs	r0, r3
 800047a:	f000 fdcd 	bl	8001018 <HAL_Delay>
	  printf("Ch2: %d\r\n",raw[1]);
 800047e:	4b37      	ldr	r3, [pc, #220]	; (800055c <main+0x130>)
 8000480:	885b      	ldrh	r3, [r3, #2]
 8000482:	001a      	movs	r2, r3
 8000484:	4b37      	ldr	r3, [pc, #220]	; (8000564 <main+0x138>)
 8000486:	0011      	movs	r1, r2
 8000488:	0018      	movs	r0, r3
 800048a:	f004 fa9f 	bl	80049cc <iprintf>
	  HAL_Delay(1000);
 800048e:	23fa      	movs	r3, #250	; 0xfa
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	0018      	movs	r0, r3
 8000494:	f000 fdc0 	bl	8001018 <HAL_Delay>
	  printf("Ch3: %d\r\n",raw[2]);
 8000498:	4b30      	ldr	r3, [pc, #192]	; (800055c <main+0x130>)
 800049a:	889b      	ldrh	r3, [r3, #4]
 800049c:	001a      	movs	r2, r3
 800049e:	4b32      	ldr	r3, [pc, #200]	; (8000568 <main+0x13c>)
 80004a0:	0011      	movs	r1, r2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f004 fa92 	bl	80049cc <iprintf>
	  HAL_Delay(1000);
 80004a8:	23fa      	movs	r3, #250	; 0xfa
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	0018      	movs	r0, r3
 80004ae:	f000 fdb3 	bl	8001018 <HAL_Delay>
	  //dane EMG podane w mV
	  emg[0]=raw[0]*3300/4095;
 80004b2:	4b2a      	ldr	r3, [pc, #168]	; (800055c <main+0x130>)
 80004b4:	881b      	ldrh	r3, [r3, #0]
 80004b6:	001a      	movs	r2, r3
 80004b8:	4b2c      	ldr	r3, [pc, #176]	; (800056c <main+0x140>)
 80004ba:	4353      	muls	r3, r2
 80004bc:	492c      	ldr	r1, [pc, #176]	; (8000570 <main+0x144>)
 80004be:	0018      	movs	r0, r3
 80004c0:	f7ff feb6 	bl	8000230 <__divsi3>
 80004c4:	0003      	movs	r3, r0
 80004c6:	b29a      	uxth	r2, r3
 80004c8:	4b2a      	ldr	r3, [pc, #168]	; (8000574 <main+0x148>)
 80004ca:	801a      	strh	r2, [r3, #0]
	  emg[1]=raw[1]*3300/4095;
 80004cc:	4b23      	ldr	r3, [pc, #140]	; (800055c <main+0x130>)
 80004ce:	885b      	ldrh	r3, [r3, #2]
 80004d0:	001a      	movs	r2, r3
 80004d2:	4b26      	ldr	r3, [pc, #152]	; (800056c <main+0x140>)
 80004d4:	4353      	muls	r3, r2
 80004d6:	4926      	ldr	r1, [pc, #152]	; (8000570 <main+0x144>)
 80004d8:	0018      	movs	r0, r3
 80004da:	f7ff fea9 	bl	8000230 <__divsi3>
 80004de:	0003      	movs	r3, r0
 80004e0:	b29a      	uxth	r2, r3
 80004e2:	4b24      	ldr	r3, [pc, #144]	; (8000574 <main+0x148>)
 80004e4:	805a      	strh	r2, [r3, #2]
	  emg[2]=raw[2]*3300/4095;
 80004e6:	4b1d      	ldr	r3, [pc, #116]	; (800055c <main+0x130>)
 80004e8:	889b      	ldrh	r3, [r3, #4]
 80004ea:	001a      	movs	r2, r3
 80004ec:	4b1f      	ldr	r3, [pc, #124]	; (800056c <main+0x140>)
 80004ee:	4353      	muls	r3, r2
 80004f0:	491f      	ldr	r1, [pc, #124]	; (8000570 <main+0x144>)
 80004f2:	0018      	movs	r0, r3
 80004f4:	f7ff fe9c 	bl	8000230 <__divsi3>
 80004f8:	0003      	movs	r3, r0
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	4b1d      	ldr	r3, [pc, #116]	; (8000574 <main+0x148>)
 80004fe:	809a      	strh	r2, [r3, #4]
	  //wyswietlenie danych w mV
	  printf("EMG_1 mV: %d\r\n",emg[0]);
 8000500:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <main+0x148>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	001a      	movs	r2, r3
 8000506:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <main+0x14c>)
 8000508:	0011      	movs	r1, r2
 800050a:	0018      	movs	r0, r3
 800050c:	f004 fa5e 	bl	80049cc <iprintf>
	  HAL_Delay(1000);
 8000510:	23fa      	movs	r3, #250	; 0xfa
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	0018      	movs	r0, r3
 8000516:	f000 fd7f 	bl	8001018 <HAL_Delay>
	  printf("EMG_2 mV: %d\r\n",emg[1]);
 800051a:	4b16      	ldr	r3, [pc, #88]	; (8000574 <main+0x148>)
 800051c:	885b      	ldrh	r3, [r3, #2]
 800051e:	001a      	movs	r2, r3
 8000520:	4b16      	ldr	r3, [pc, #88]	; (800057c <main+0x150>)
 8000522:	0011      	movs	r1, r2
 8000524:	0018      	movs	r0, r3
 8000526:	f004 fa51 	bl	80049cc <iprintf>
	  HAL_Delay(1000);
 800052a:	23fa      	movs	r3, #250	; 0xfa
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	0018      	movs	r0, r3
 8000530:	f000 fd72 	bl	8001018 <HAL_Delay>
	  printf("EMG_3 mV: %d\r\n",emg[2]);
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <main+0x148>)
 8000536:	889b      	ldrh	r3, [r3, #4]
 8000538:	001a      	movs	r2, r3
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <main+0x154>)
 800053c:	0011      	movs	r1, r2
 800053e:	0018      	movs	r0, r3
 8000540:	f004 fa44 	bl	80049cc <iprintf>
	  HAL_Delay(1000);
 8000544:	23fa      	movs	r3, #250	; 0xfa
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	0018      	movs	r0, r3
 800054a:	f000 fd65 	bl	8001018 <HAL_Delay>
	  printf("Ch1: %d\r\n",raw[0]);
 800054e:	e789      	b.n	8000464 <main+0x38>
 8000550:	2000026e 	.word	0x2000026e
 8000554:	20000158 	.word	0x20000158
 8000558:	20000110 	.word	0x20000110
 800055c:	20000260 	.word	0x20000260
 8000560:	08005994 	.word	0x08005994
 8000564:	080059a0 	.word	0x080059a0
 8000568:	080059ac 	.word	0x080059ac
 800056c:	00000ce4 	.word	0x00000ce4
 8000570:	00000fff 	.word	0x00000fff
 8000574:	20000268 	.word	0x20000268
 8000578:	080059b8 	.word	0x080059b8
 800057c:	080059c8 	.word	0x080059c8
 8000580:	080059d8 	.word	0x080059d8

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b099      	sub	sp, #100	; 0x64
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	242c      	movs	r4, #44	; 0x2c
 800058c:	193b      	adds	r3, r7, r4
 800058e:	0018      	movs	r0, r3
 8000590:	2334      	movs	r3, #52	; 0x34
 8000592:	001a      	movs	r2, r3
 8000594:	2100      	movs	r1, #0
 8000596:	f004 fa11 	bl	80049bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059a:	231c      	movs	r3, #28
 800059c:	18fb      	adds	r3, r7, r3
 800059e:	0018      	movs	r0, r3
 80005a0:	2310      	movs	r3, #16
 80005a2:	001a      	movs	r2, r3
 80005a4:	2100      	movs	r1, #0
 80005a6:	f004 fa09 	bl	80049bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	0018      	movs	r0, r3
 80005ae:	2318      	movs	r3, #24
 80005b0:	001a      	movs	r2, r3
 80005b2:	2100      	movs	r1, #0
 80005b4:	f004 fa02 	bl	80049bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80005b8:	0021      	movs	r1, r4
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2212      	movs	r2, #18
 80005be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2201      	movs	r2, #1
 80005c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2201      	movs	r2, #1
 80005ca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2210      	movs	r2, #16
 80005d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2210      	movs	r2, #16
 80005d6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2202      	movs	r2, #2
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2280      	movs	r2, #128	; 0x80
 80005e2:	0212      	lsls	r2, r2, #8
 80005e4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2200      	movs	r2, #0
 80005ea:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2200      	movs	r2, #0
 80005f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 fd95 	bl	8002124 <HAL_RCC_OscConfig>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005fe:	f000 fa33 	bl	8000a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	211c      	movs	r1, #28
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2207      	movs	r2, #7
 8000608:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2202      	movs	r2, #2
 800060e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2100      	movs	r1, #0
 8000620:	0018      	movs	r0, r3
 8000622:	f002 f905 	bl	8002830 <HAL_RCC_ClockConfig>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800062a:	f000 fa1d 	bl	8000a68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2201      	movs	r2, #1
 8000632:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	0018      	movs	r0, r3
 800063e:	f002 fa71 	bl	8002b24 <HAL_RCCEx_PeriphCLKConfig>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000646:	f000 fa0f 	bl	8000a68 <Error_Handler>
  }
}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b019      	add	sp, #100	; 0x64
 8000650:	bd90      	pop	{r4, r7, pc}
	...

08000654 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	0018      	movs	r0, r3
 800065e:	230c      	movs	r3, #12
 8000660:	001a      	movs	r2, r3
 8000662:	2100      	movs	r1, #0
 8000664:	f004 f9aa 	bl	80049bc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000668:	4b33      	ldr	r3, [pc, #204]	; (8000738 <MX_ADC_Init+0xe4>)
 800066a:	4a34      	ldr	r2, [pc, #208]	; (800073c <MX_ADC_Init+0xe8>)
 800066c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800066e:	4b32      	ldr	r3, [pc, #200]	; (8000738 <MX_ADC_Init+0xe4>)
 8000670:	2200      	movs	r2, #0
 8000672:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000674:	4b30      	ldr	r3, [pc, #192]	; (8000738 <MX_ADC_Init+0xe4>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067a:	4b2f      	ldr	r3, [pc, #188]	; (8000738 <MX_ADC_Init+0xe4>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000680:	4b2d      	ldr	r3, [pc, #180]	; (8000738 <MX_ADC_Init+0xe4>)
 8000682:	2201      	movs	r2, #1
 8000684:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000686:	4b2c      	ldr	r3, [pc, #176]	; (8000738 <MX_ADC_Init+0xe4>)
 8000688:	2204      	movs	r2, #4
 800068a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800068c:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <MX_ADC_Init+0xe4>)
 800068e:	2200      	movs	r2, #0
 8000690:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000692:	4b29      	ldr	r3, [pc, #164]	; (8000738 <MX_ADC_Init+0xe4>)
 8000694:	2200      	movs	r2, #0
 8000696:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000698:	4b27      	ldr	r3, [pc, #156]	; (8000738 <MX_ADC_Init+0xe4>)
 800069a:	2201      	movs	r2, #1
 800069c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800069e:	4b26      	ldr	r3, [pc, #152]	; (8000738 <MX_ADC_Init+0xe4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <MX_ADC_Init+0xe4>)
 80006a6:	22c2      	movs	r2, #194	; 0xc2
 80006a8:	32ff      	adds	r2, #255	; 0xff
 80006aa:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <MX_ADC_Init+0xe4>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80006b2:	4b21      	ldr	r3, [pc, #132]	; (8000738 <MX_ADC_Init+0xe4>)
 80006b4:	2224      	movs	r2, #36	; 0x24
 80006b6:	2100      	movs	r1, #0
 80006b8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ba:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <MX_ADC_Init+0xe4>)
 80006bc:	2201      	movs	r2, #1
 80006be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006c0:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <MX_ADC_Init+0xe4>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 fccc 	bl	8001060 <HAL_ADC_Init>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80006cc:	f000 f9cc 	bl	8000a68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2204      	movs	r2, #4
 80006d4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	0152      	lsls	r2, r2, #5
 80006dc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2280      	movs	r2, #128	; 0x80
 80006e2:	0552      	lsls	r2, r2, #21
 80006e4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006e6:	1d3a      	adds	r2, r7, #4
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_ADC_Init+0xe4>)
 80006ea:	0011      	movs	r1, r2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 fe89 	bl	8001404 <HAL_ADC_ConfigChannel>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80006f6:	f000 f9b7 	bl	8000a68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2205      	movs	r2, #5
 80006fe:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000700:	1d3a      	adds	r2, r7, #4
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <MX_ADC_Init+0xe4>)
 8000704:	0011      	movs	r1, r2
 8000706:	0018      	movs	r0, r3
 8000708:	f000 fe7c 	bl	8001404 <HAL_ADC_ConfigChannel>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000710:	f000 f9aa 	bl	8000a68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2206      	movs	r2, #6
 8000718:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800071a:	1d3a      	adds	r2, r7, #4
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_ADC_Init+0xe4>)
 800071e:	0011      	movs	r1, r2
 8000720:	0018      	movs	r0, r3
 8000722:	f000 fe6f 	bl	8001404 <HAL_ADC_ConfigChannel>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800072a:	f000 f99d 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b004      	add	sp, #16
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	2000008c 	.word	0x2000008c
 800073c:	40012400 	.word	0x40012400

08000740 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000746:	2308      	movs	r3, #8
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	0018      	movs	r0, r3
 800074c:	2310      	movs	r3, #16
 800074e:	001a      	movs	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	f004 f933 	bl	80049bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000756:	003b      	movs	r3, r7
 8000758:	0018      	movs	r0, r3
 800075a:	2308      	movs	r3, #8
 800075c:	001a      	movs	r2, r3
 800075e:	2100      	movs	r1, #0
 8000760:	f004 f92c 	bl	80049bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <MX_TIM1_Init+0xa4>)
 8000766:	4a20      	ldr	r2, [pc, #128]	; (80007e8 <MX_TIM1_Init+0xa8>)
 8000768:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_TIM1_Init+0xa4>)
 800076c:	2200      	movs	r2, #0
 800076e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_TIM1_Init+0xa4>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16000-1;
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_TIM1_Init+0xa4>)
 8000778:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <MX_TIM1_Init+0xac>)
 800077a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077c:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_TIM1_Init+0xa4>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_TIM1_Init+0xa4>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_TIM1_Init+0xa4>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_TIM1_Init+0xa4>)
 8000790:	0018      	movs	r0, r3
 8000792:	f002 fab5 	bl	8002d00 <HAL_TIM_Base_Init>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800079a:	f000 f965 	bl	8000a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079e:	2108      	movs	r1, #8
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	0152      	lsls	r2, r2, #5
 80007a6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007a8:	187a      	adds	r2, r7, r1
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_TIM1_Init+0xa4>)
 80007ac:	0011      	movs	r1, r2
 80007ae:	0018      	movs	r0, r3
 80007b0:	f002 fc58 	bl	8003064 <HAL_TIM_ConfigClockSource>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007b8:	f000 f956 	bl	8000a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007bc:	003b      	movs	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c2:	003b      	movs	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007c8:	003a      	movs	r2, r7
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_TIM1_Init+0xa4>)
 80007cc:	0011      	movs	r1, r2
 80007ce:	0018      	movs	r0, r3
 80007d0:	f002 fe4c 	bl	800346c <HAL_TIMEx_MasterConfigSynchronization>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80007d8:	f000 f946 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b006      	add	sp, #24
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000110 	.word	0x20000110
 80007e8:	40012c00 	.word	0x40012c00
 80007ec:	00003e7f 	.word	0x00003e7f

080007f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_USART1_UART_Init+0x58>)
 80007f6:	4a15      	ldr	r2, [pc, #84]	; (800084c <MX_USART1_UART_Init+0x5c>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_USART1_UART_Init+0x58>)
 80007fc:	2296      	movs	r2, #150	; 0x96
 80007fe:	0192      	lsls	r2, r2, #6
 8000800:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_USART1_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_USART1_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_USART1_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_USART1_UART_Init+0x58>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_USART1_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_USART1_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_USART1_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_USART1_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <MX_USART1_UART_Init+0x58>)
 8000834:	0018      	movs	r0, r3
 8000836:	f002 fe81 	bl	800353c <HAL_UART_Init>
 800083a:	1e03      	subs	r3, r0, #0
 800083c:	d001      	beq.n	8000842 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800083e:	f000 f913 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000158 	.word	0x20000158
 800084c:	40013800 	.word	0x40013800

08000850 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 8000856:	4a15      	ldr	r2, [pc, #84]	; (80008ac <MX_USART2_UART_Init+0x5c>)
 8000858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 800085c:	2296      	movs	r2, #150	; 0x96
 800085e:	0212      	lsls	r2, r2, #8
 8000860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <MX_USART2_UART_Init+0x58>)
 8000894:	0018      	movs	r0, r3
 8000896:	f002 fe51 	bl	800353c <HAL_UART_Init>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800089e:	f000 f8e3 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200001dc 	.word	0x200001dc
 80008ac:	40004400 	.word	0x40004400

080008b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_DMA_Init+0x38>)
 80008b8:	695a      	ldr	r2, [r3, #20]
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_DMA_Init+0x38>)
 80008bc:	2101      	movs	r1, #1
 80008be:	430a      	orrs	r2, r1
 80008c0:	615a      	str	r2, [r3, #20]
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_DMA_Init+0x38>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	2201      	movs	r2, #1
 80008c8:	4013      	ands	r3, r2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	2009      	movs	r0, #9
 80008d4:	f001 f858 	bl	8001988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008d8:	2009      	movs	r0, #9
 80008da:	f001 f86a 	bl	80019b2 <HAL_NVIC_EnableIRQ>

}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	40021000 	.word	0x40021000

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b089      	sub	sp, #36	; 0x24
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	240c      	movs	r4, #12
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	0018      	movs	r0, r3
 80008f8:	2314      	movs	r3, #20
 80008fa:	001a      	movs	r2, r3
 80008fc:	2100      	movs	r1, #0
 80008fe:	f004 f85d 	bl	80049bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <MX_GPIO_Init+0xc0>)
 8000904:	695a      	ldr	r2, [r3, #20]
 8000906:	4b29      	ldr	r3, [pc, #164]	; (80009ac <MX_GPIO_Init+0xc0>)
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	0289      	lsls	r1, r1, #10
 800090c:	430a      	orrs	r2, r1
 800090e:	615a      	str	r2, [r3, #20]
 8000910:	4b26      	ldr	r3, [pc, #152]	; (80009ac <MX_GPIO_Init+0xc0>)
 8000912:	695a      	ldr	r2, [r3, #20]
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	029b      	lsls	r3, r3, #10
 8000918:	4013      	ands	r3, r2
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	4b23      	ldr	r3, [pc, #140]	; (80009ac <MX_GPIO_Init+0xc0>)
 8000920:	695a      	ldr	r2, [r3, #20]
 8000922:	4b22      	ldr	r3, [pc, #136]	; (80009ac <MX_GPIO_Init+0xc0>)
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	02c9      	lsls	r1, r1, #11
 8000928:	430a      	orrs	r2, r1
 800092a:	615a      	str	r2, [r3, #20]
 800092c:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <MX_GPIO_Init+0xc0>)
 800092e:	695a      	ldr	r2, [r3, #20]
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	02db      	lsls	r3, r3, #11
 8000934:	4013      	ands	r3, r2
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RX_Pin|TX_Pin|EMG_1_Pin|EMG_2_Pin, GPIO_PIN_RESET);
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_GPIO_Init+0xc4>)
 800093c:	2200      	movs	r2, #0
 800093e:	211b      	movs	r1, #27
 8000940:	0018      	movs	r0, r3
 8000942:	f001 fbd1 	bl	80020e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EMG_3_GPIO_Port, EMG_3_Pin, GPIO_PIN_RESET);
 8000946:	2380      	movs	r3, #128	; 0x80
 8000948:	0059      	lsls	r1, r3, #1
 800094a:	2390      	movs	r3, #144	; 0x90
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	2200      	movs	r2, #0
 8000950:	0018      	movs	r0, r3
 8000952:	f001 fbc9 	bl	80020e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RX_Pin TX_Pin EMG_1_Pin EMG_2_Pin */
  GPIO_InitStruct.Pin = RX_Pin|TX_Pin|EMG_1_Pin|EMG_2_Pin;
 8000956:	193b      	adds	r3, r7, r4
 8000958:	221b      	movs	r2, #27
 800095a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	193b      	adds	r3, r7, r4
 800095e:	2201      	movs	r2, #1
 8000960:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	193b      	adds	r3, r7, r4
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	193b      	adds	r3, r7, r4
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	193b      	adds	r3, r7, r4
 8000970:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <MX_GPIO_Init+0xc4>)
 8000972:	0019      	movs	r1, r3
 8000974:	0010      	movs	r0, r2
 8000976:	f001 fa4f 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMG_3_Pin */
  GPIO_InitStruct.Pin = EMG_3_Pin;
 800097a:	0021      	movs	r1, r4
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2280      	movs	r2, #128	; 0x80
 8000980:	0052      	lsls	r2, r2, #1
 8000982:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2201      	movs	r2, #1
 8000988:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EMG_3_GPIO_Port, &GPIO_InitStruct);
 8000996:	187a      	adds	r2, r7, r1
 8000998:	2390      	movs	r3, #144	; 0x90
 800099a:	05db      	lsls	r3, r3, #23
 800099c:	0011      	movs	r1, r2
 800099e:	0018      	movs	r0, r3
 80009a0:	f001 fa3a 	bl	8001e18 <HAL_GPIO_Init>

}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b009      	add	sp, #36	; 0x24
 80009aa:	bd90      	pop	{r4, r7, pc}
 80009ac:	40021000 	.word	0x40021000
 80009b0:	48000400 	.word	0x48000400

080009b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//funkcje callback do obsługi ADC
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim1)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	//zaświecenie diodą jako potwierdzenie odczytu danych
  HAL_GPIO_WritePin(GPIOA, EMG_3_Pin, GPIO_PIN_SET);
 80009bc:	2380      	movs	r3, #128	; 0x80
 80009be:	0059      	lsls	r1, r3, #1
 80009c0:	2390      	movs	r3, #144	; 0x90
 80009c2:	05db      	lsls	r3, r3, #23
 80009c4:	2201      	movs	r2, #1
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 fb8e 	bl	80020e8 <HAL_GPIO_WritePin>
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)raw,3);
 80009cc:	4904      	ldr	r1, [pc, #16]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80009d0:	2203      	movs	r2, #3
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 fc84 	bl	80012e0 <HAL_ADC_Start_DMA>
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	b002      	add	sp, #8
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000260 	.word	0x20000260
 80009e4:	2000008c 	.word	0x2000008c

080009e8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	UNUSED(hadc);
	HAL_GPIO_WritePin(GPIOA, EMG_3_Pin, GPIO_PIN_RESET);
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	0059      	lsls	r1, r3, #1
 80009f4:	2390      	movs	r3, #144	; 0x90
 80009f6:	05db      	lsls	r3, r3, #23
 80009f8:	2200      	movs	r2, #0
 80009fa:	0018      	movs	r0, r3
 80009fc:	f001 fb74 	bl	80020e8 <HAL_GPIO_WritePin>
	}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b002      	add	sp, #8
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <HAL_UART_RxCpltCallback>:
//funkcja callback do obsługi Bluetooth
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <HAL_UART_RxCpltCallback+0x50>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d11a      	bne.n	8000a50 <HAL_UART_RxCpltCallback+0x48>
  {
    if(rxData==78) // Ascii value of 'N' is 78 (N for NO)
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <HAL_UART_RxCpltCallback+0x54>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b4e      	cmp	r3, #78	; 0x4e
 8000a20:	d106      	bne.n	8000a30 <HAL_UART_RxCpltCallback+0x28>
    {
    	HAL_GPIO_WritePin(GPIOB, EMG_2_Pin, GPIO_PIN_RESET);
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <HAL_UART_RxCpltCallback+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	2110      	movs	r1, #16
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f001 fb5d 	bl	80020e8 <HAL_GPIO_WritePin>
 8000a2e:	e009      	b.n	8000a44 <HAL_UART_RxCpltCallback+0x3c>
    }
    else if (rxData==89) // Ascii value of 'Y' is 89 (Y for YES)
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <HAL_UART_RxCpltCallback+0x54>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b59      	cmp	r3, #89	; 0x59
 8000a36:	d105      	bne.n	8000a44 <HAL_UART_RxCpltCallback+0x3c>
    {
    	HAL_GPIO_WritePin(GPIOB, EMG_2_Pin, GPIO_PIN_SET);
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_UART_RxCpltCallback+0x58>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2110      	movs	r1, #16
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f001 fb52 	bl	80020e8 <HAL_GPIO_WritePin>
    }
    HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 8000a44:	4905      	ldr	r1, [pc, #20]	; (8000a5c <HAL_UART_RxCpltCallback+0x54>)
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <HAL_UART_RxCpltCallback+0x5c>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f002 fe73 	bl	8003736 <HAL_UART_Receive_IT>
  }
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b002      	add	sp, #8
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40013800 	.word	0x40013800
 8000a5c:	2000026e 	.word	0x2000026e
 8000a60:	48000400 	.word	0x48000400
 8000a64:	20000158 	.word	0x20000158

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <Error_Handler+0x8>
	...

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a7c:	699a      	ldr	r2, [r3, #24]
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a80:	2101      	movs	r1, #1
 8000a82:	430a      	orrs	r2, r1
 8000a84:	619a      	str	r2, [r3, #24]
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a94:	69da      	ldr	r2, [r3, #28]
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a98:	2180      	movs	r1, #128	; 0x80
 8000a9a:	0549      	lsls	r1, r1, #21
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	61da      	str	r2, [r3, #28]
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_MspInit+0x44>)
 8000aa2:	69da      	ldr	r2, [r3, #28]
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	055b      	lsls	r3, r3, #21
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b002      	add	sp, #8
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	40021000 	.word	0x40021000

08000abc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b08b      	sub	sp, #44	; 0x2c
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	2414      	movs	r4, #20
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	0018      	movs	r0, r3
 8000aca:	2314      	movs	r3, #20
 8000acc:	001a      	movs	r2, r3
 8000ace:	2100      	movs	r1, #0
 8000ad0:	f003 ff74 	bl	80049bc <memset>
  if(hadc->Instance==ADC1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a2d      	ldr	r2, [pc, #180]	; (8000b90 <HAL_ADC_MspInit+0xd4>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d153      	bne.n	8000b86 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ade:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <HAL_ADC_MspInit+0xd8>)
 8000ae0:	699a      	ldr	r2, [r3, #24]
 8000ae2:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <HAL_ADC_MspInit+0xd8>)
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	0089      	lsls	r1, r1, #2
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	619a      	str	r2, [r3, #24]
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <HAL_ADC_MspInit+0xd8>)
 8000aee:	699a      	ldr	r2, [r3, #24]
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <HAL_ADC_MspInit+0xd8>)
 8000afc:	695a      	ldr	r2, [r3, #20]
 8000afe:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <HAL_ADC_MspInit+0xd8>)
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	0289      	lsls	r1, r1, #10
 8000b04:	430a      	orrs	r2, r1
 8000b06:	615a      	str	r2, [r3, #20]
 8000b08:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <HAL_ADC_MspInit+0xd8>)
 8000b0a:	695a      	ldr	r2, [r3, #20]
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	029b      	lsls	r3, r3, #10
 8000b10:	4013      	ands	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = CH_3_Pin|CH_2_Pin|CH_1_Pin;
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	2270      	movs	r2, #112	; 0x70
 8000b1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	2203      	movs	r2, #3
 8000b20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	193a      	adds	r2, r7, r4
 8000b2a:	2390      	movs	r3, #144	; 0x90
 8000b2c:	05db      	lsls	r3, r3, #23
 8000b2e:	0011      	movs	r1, r2
 8000b30:	0018      	movs	r0, r3
 8000b32:	f001 f971 	bl	8001e18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_ADC_MspInit+0xdc>)
 8000b38:	4a18      	ldr	r2, [pc, #96]	; (8000b9c <HAL_ADC_MspInit+0xe0>)
 8000b3a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <HAL_ADC_MspInit+0xdc>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_ADC_MspInit+0xdc>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <HAL_ADC_MspInit+0xdc>)
 8000b4a:	2280      	movs	r2, #128	; 0x80
 8000b4c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_ADC_MspInit+0xdc>)
 8000b50:	2280      	movs	r2, #128	; 0x80
 8000b52:	0052      	lsls	r2, r2, #1
 8000b54:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <HAL_ADC_MspInit+0xdc>)
 8000b58:	2280      	movs	r2, #128	; 0x80
 8000b5a:	00d2      	lsls	r2, r2, #3
 8000b5c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_ADC_MspInit+0xdc>)
 8000b60:	2220      	movs	r2, #32
 8000b62:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <HAL_ADC_MspInit+0xdc>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_ADC_MspInit+0xdc>)
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f000 ff3d 	bl	80019ec <HAL_DMA_Init>
 8000b72:	1e03      	subs	r3, r0, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000b76:	f7ff ff77 	bl	8000a68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <HAL_ADC_MspInit+0xdc>)
 8000b7e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_ADC_MspInit+0xdc>)
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b00b      	add	sp, #44	; 0x2c
 8000b8c:	bd90      	pop	{r4, r7, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	40012400 	.word	0x40012400
 8000b94:	40021000 	.word	0x40021000
 8000b98:	200000cc 	.word	0x200000cc
 8000b9c:	40020008 	.word	0x40020008

08000ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <HAL_TIM_Base_MspInit+0x48>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d115      	bne.n	8000bde <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <HAL_TIM_Base_MspInit+0x4c>)
 8000bb4:	699a      	ldr	r2, [r3, #24]
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <HAL_TIM_Base_MspInit+0x4c>)
 8000bb8:	2180      	movs	r1, #128	; 0x80
 8000bba:	0109      	lsls	r1, r1, #4
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	619a      	str	r2, [r3, #24]
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_TIM_Base_MspInit+0x4c>)
 8000bc2:	699a      	ldr	r2, [r3, #24]
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	011b      	lsls	r3, r3, #4
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	200d      	movs	r0, #13
 8000bd4:	f000 fed8 	bl	8001988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000bd8:	200d      	movs	r0, #13
 8000bda:	f000 feea 	bl	80019b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b004      	add	sp, #16
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	40012c00 	.word	0x40012c00
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b08d      	sub	sp, #52	; 0x34
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	241c      	movs	r4, #28
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	2314      	movs	r3, #20
 8000c00:	001a      	movs	r2, r3
 8000c02:	2100      	movs	r1, #0
 8000c04:	f003 feda 	bl	80049bc <memset>
  if(huart->Instance==USART1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a3d      	ldr	r2, [pc, #244]	; (8000d04 <HAL_UART_MspInit+0x114>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d13c      	bne.n	8000c8c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c12:	4b3d      	ldr	r3, [pc, #244]	; (8000d08 <HAL_UART_MspInit+0x118>)
 8000c14:	699a      	ldr	r2, [r3, #24]
 8000c16:	4b3c      	ldr	r3, [pc, #240]	; (8000d08 <HAL_UART_MspInit+0x118>)
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	01c9      	lsls	r1, r1, #7
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	619a      	str	r2, [r3, #24]
 8000c20:	4b39      	ldr	r3, [pc, #228]	; (8000d08 <HAL_UART_MspInit+0x118>)
 8000c22:	699a      	ldr	r2, [r3, #24]
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	01db      	lsls	r3, r3, #7
 8000c28:	4013      	ands	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]
 8000c2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b36      	ldr	r3, [pc, #216]	; (8000d08 <HAL_UART_MspInit+0x118>)
 8000c30:	695a      	ldr	r2, [r3, #20]
 8000c32:	4b35      	ldr	r3, [pc, #212]	; (8000d08 <HAL_UART_MspInit+0x118>)
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	0289      	lsls	r1, r1, #10
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	615a      	str	r2, [r3, #20]
 8000c3c:	4b32      	ldr	r3, [pc, #200]	; (8000d08 <HAL_UART_MspInit+0x118>)
 8000c3e:	695a      	ldr	r2, [r3, #20]
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	029b      	lsls	r3, r3, #10
 8000c44:	4013      	ands	r3, r2
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	22c0      	movs	r2, #192	; 0xc0
 8000c4e:	00d2      	lsls	r2, r2, #3
 8000c50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	0021      	movs	r1, r4
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2202      	movs	r2, #2
 8000c58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2203      	movs	r2, #3
 8000c64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2201      	movs	r2, #1
 8000c6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	187a      	adds	r2, r7, r1
 8000c6e:	2390      	movs	r3, #144	; 0x90
 8000c70:	05db      	lsls	r3, r3, #23
 8000c72:	0011      	movs	r1, r2
 8000c74:	0018      	movs	r0, r3
 8000c76:	f001 f8cf 	bl	8001e18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	201b      	movs	r0, #27
 8000c80:	f000 fe82 	bl	8001988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c84:	201b      	movs	r0, #27
 8000c86:	f000 fe94 	bl	80019b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c8a:	e037      	b.n	8000cfc <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a1e      	ldr	r2, [pc, #120]	; (8000d0c <HAL_UART_MspInit+0x11c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d132      	bne.n	8000cfc <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c96:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <HAL_UART_MspInit+0x118>)
 8000c98:	69da      	ldr	r2, [r3, #28]
 8000c9a:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <HAL_UART_MspInit+0x118>)
 8000c9c:	2180      	movs	r1, #128	; 0x80
 8000c9e:	0289      	lsls	r1, r1, #10
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	61da      	str	r2, [r3, #28]
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <HAL_UART_MspInit+0x118>)
 8000ca6:	69da      	ldr	r2, [r3, #28]
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	029b      	lsls	r3, r3, #10
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_UART_MspInit+0x118>)
 8000cb4:	695a      	ldr	r2, [r3, #20]
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_UART_MspInit+0x118>)
 8000cb8:	2180      	movs	r1, #128	; 0x80
 8000cba:	0289      	lsls	r1, r1, #10
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_UART_MspInit+0x118>)
 8000cc2:	695a      	ldr	r2, [r3, #20]
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	029b      	lsls	r3, r3, #10
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cce:	211c      	movs	r1, #28
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	2202      	movs	r2, #2
 8000cda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	2201      	movs	r2, #1
 8000cec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	187a      	adds	r2, r7, r1
 8000cf0:	2390      	movs	r3, #144	; 0x90
 8000cf2:	05db      	lsls	r3, r3, #23
 8000cf4:	0011      	movs	r1, r2
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f001 f88e 	bl	8001e18 <HAL_GPIO_Init>
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b00d      	add	sp, #52	; 0x34
 8000d02:	bd90      	pop	{r4, r7, pc}
 8000d04:	40013800 	.word	0x40013800
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40004400 	.word	0x40004400

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <NMI_Handler+0x4>

08000d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <HardFault_Handler+0x4>

08000d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d20:	46c0      	nop			; (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f954 	bl	8000fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <DMA1_Channel1_IRQHandler+0x14>)
 8000d46:	0018      	movs	r0, r3
 8000d48:	f000 ff7b 	bl	8001c42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	200000cc 	.word	0x200000cc

08000d58 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f002 f86a 	bl	8002e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	20000110 	.word	0x20000110

08000d70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <USART1_IRQHandler+0x14>)
 8000d76:	0018      	movs	r0, r3
 8000d78:	f002 fd3e 	bl	80037f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d7c:	46c0      	nop			; (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	20000158 	.word	0x20000158

08000d88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	e00a      	b.n	8000db0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d9a:	e000      	b.n	8000d9e <_read+0x16>
 8000d9c:	bf00      	nop
 8000d9e:	0001      	movs	r1, r0
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	60ba      	str	r2, [r7, #8]
 8000da6:	b2ca      	uxtb	r2, r1
 8000da8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	dbf0      	blt.n	8000d9a <_read+0x12>
	}

return len;
 8000db8:	687b      	ldr	r3, [r7, #4]
}
 8000dba:	0018      	movs	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b006      	add	sp, #24
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	60f8      	str	r0, [r7, #12]
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	e009      	b.n	8000de8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	1c5a      	adds	r2, r3, #1
 8000dd8:	60ba      	str	r2, [r7, #8]
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f7ff fb13 	bl	8000408 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3301      	adds	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	dbf1      	blt.n	8000dd4 <_write+0x12>
	}
	return len;
 8000df0:	687b      	ldr	r3, [r7, #4]
}
 8000df2:	0018      	movs	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b006      	add	sp, #24
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_close>:

int _close(int file)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
	return -1;
 8000e02:	2301      	movs	r3, #1
 8000e04:	425b      	negs	r3, r3
}
 8000e06:	0018      	movs	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b002      	add	sp, #8
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	2280      	movs	r2, #128	; 0x80
 8000e1c:	0192      	lsls	r2, r2, #6
 8000e1e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	0018      	movs	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b002      	add	sp, #8
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_isatty>:

int _isatty(int file)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
	return 1;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
	return 0;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b004      	add	sp, #16
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e5c:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <_sbrk+0x5c>)
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <_sbrk+0x60>)
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d102      	bne.n	8000e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <_sbrk+0x64>)
 8000e72:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <_sbrk+0x68>)
 8000e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <_sbrk+0x64>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	18d3      	adds	r3, r2, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d207      	bcs.n	8000e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e84:	f003 fd70 	bl	8004968 <__errno>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	425b      	negs	r3, r3
 8000e92:	e009      	b.n	8000ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9a:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <_sbrk+0x64>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	18d2      	adds	r2, r2, r3
 8000ea2:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <_sbrk+0x64>)
 8000ea4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
}
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b006      	add	sp, #24
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20001800 	.word	0x20001800
 8000eb4:	00000400 	.word	0x00000400
 8000eb8:	20000270 	.word	0x20000270
 8000ebc:	20000288 	.word	0x20000288

08000ec0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ecc:	4813      	ldr	r0, [pc, #76]	; (8000f1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ece:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000ed0:	4813      	ldr	r0, [pc, #76]	; (8000f20 <LoopForever+0x6>)
    LDR R1, [R0]
 8000ed2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000ed4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000ed6:	4a13      	ldr	r2, [pc, #76]	; (8000f24 <LoopForever+0xa>)
    CMP R1, R2
 8000ed8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000eda:	d105      	bne.n	8000ee8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000edc:	4812      	ldr	r0, [pc, #72]	; (8000f28 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000ede:	4913      	ldr	r1, [pc, #76]	; (8000f2c <LoopForever+0x12>)
    STR R1, [R0]
 8000ee0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000ee2:	4813      	ldr	r0, [pc, #76]	; (8000f30 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000ee4:	4913      	ldr	r1, [pc, #76]	; (8000f34 <LoopForever+0x1a>)
    STR R1, [R0]
 8000ee6:	6001      	str	r1, [r0, #0]

08000ee8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee8:	4813      	ldr	r0, [pc, #76]	; (8000f38 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000eea:	4914      	ldr	r1, [pc, #80]	; (8000f3c <LoopForever+0x22>)
  ldr r2, =_sidata
 8000eec:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <LoopForever+0x26>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef0:	e002      	b.n	8000ef8 <LoopCopyDataInit>

08000ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef6:	3304      	adds	r3, #4

08000ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000efc:	d3f9      	bcc.n	8000ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000f00:	4c11      	ldr	r4, [pc, #68]	; (8000f48 <LoopForever+0x2e>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f04:	e001      	b.n	8000f0a <LoopFillZerobss>

08000f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f08:	3204      	adds	r2, #4

08000f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f0c:	d3fb      	bcc.n	8000f06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f0e:	f7ff ffd7 	bl	8000ec0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000f12:	f003 fd2f 	bl	8004974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f16:	f7ff fa89 	bl	800042c <main>

08000f1a <LoopForever>:

LoopForever:
    b LoopForever
 8000f1a:	e7fe      	b.n	8000f1a <LoopForever>
  ldr   r0, =_estack
 8000f1c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000f20:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000f24:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000f28:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000f2c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000f30:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000f34:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f40:	08005ac0 	.word	0x08005ac0
  ldr r2, =_sbss
 8000f44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f48:	20000288 	.word	0x20000288

08000f4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC1_IRQHandler>
	...

08000f50 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <HAL_Init+0x24>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_Init+0x24>)
 8000f5a:	2110      	movs	r1, #16
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 f809 	bl	8000f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f66:	f7ff fd85 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	40022000 	.word	0x40022000

08000f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <HAL_InitTick+0x5c>)
 8000f82:	681c      	ldr	r4, [r3, #0]
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_InitTick+0x60>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	0019      	movs	r1, r3
 8000f8a:	23fa      	movs	r3, #250	; 0xfa
 8000f8c:	0098      	lsls	r0, r3, #2
 8000f8e:	f7ff f8c5 	bl	800011c <__udivsi3>
 8000f92:	0003      	movs	r3, r0
 8000f94:	0019      	movs	r1, r3
 8000f96:	0020      	movs	r0, r4
 8000f98:	f7ff f8c0 	bl	800011c <__udivsi3>
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 fd17 	bl	80019d2 <HAL_SYSTICK_Config>
 8000fa4:	1e03      	subs	r3, r0, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e00f      	b.n	8000fcc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	d80b      	bhi.n	8000fca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	425b      	negs	r3, r3
 8000fb8:	2200      	movs	r2, #0
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f000 fce4 	bl	8001988 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_InitTick+0x64>)
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e000      	b.n	8000fcc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	0018      	movs	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b003      	add	sp, #12
 8000fd2:	bd90      	pop	{r4, r7, pc}
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000004 	.word	0x20000004

08000fe0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <HAL_IncTick+0x1c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	001a      	movs	r2, r3
 8000fea:	4b05      	ldr	r3, [pc, #20]	; (8001000 <HAL_IncTick+0x20>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	18d2      	adds	r2, r2, r3
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <HAL_IncTick+0x20>)
 8000ff2:	601a      	str	r2, [r3, #0]
}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000274 	.word	0x20000274

08001004 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b02      	ldr	r3, [pc, #8]	; (8001014 <HAL_GetTick+0x10>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	0018      	movs	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	20000274 	.word	0x20000274

08001018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001020:	f7ff fff0 	bl	8001004 <HAL_GetTick>
 8001024:	0003      	movs	r3, r0
 8001026:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3301      	adds	r3, #1
 8001030:	d005      	beq.n	800103e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_Delay+0x44>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	001a      	movs	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	189b      	adds	r3, r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	f7ff ffe0 	bl	8001004 <HAL_GetTick>
 8001044:	0002      	movs	r2, r0
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	429a      	cmp	r2, r3
 800104e:	d8f7      	bhi.n	8001040 <HAL_Delay+0x28>
  {
  }
}
 8001050:	46c0      	nop			; (mov r8, r8)
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b004      	add	sp, #16
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	20000008 	.word	0x20000008

08001060 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	230f      	movs	r3, #15
 800106a:	18fb      	adds	r3, r7, r3
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e125      	b.n	80012ca <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10a      	bne.n	800109c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2234      	movs	r2, #52	; 0x34
 8001090:	2100      	movs	r1, #0
 8001092:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	0018      	movs	r0, r3
 8001098:	f7ff fd10 	bl	8000abc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a0:	2210      	movs	r2, #16
 80010a2:	4013      	ands	r3, r2
 80010a4:	d000      	beq.n	80010a8 <HAL_ADC_Init+0x48>
 80010a6:	e103      	b.n	80012b0 <HAL_ADC_Init+0x250>
 80010a8:	230f      	movs	r3, #15
 80010aa:	18fb      	adds	r3, r7, r3
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d000      	beq.n	80010b4 <HAL_ADC_Init+0x54>
 80010b2:	e0fd      	b.n	80012b0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	2204      	movs	r2, #4
 80010bc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80010be:	d000      	beq.n	80010c2 <HAL_ADC_Init+0x62>
 80010c0:	e0f6      	b.n	80012b0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c6:	4a83      	ldr	r2, [pc, #524]	; (80012d4 <HAL_ADC_Init+0x274>)
 80010c8:	4013      	ands	r3, r2
 80010ca:	2202      	movs	r2, #2
 80010cc:	431a      	orrs	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	2203      	movs	r2, #3
 80010da:	4013      	ands	r3, r2
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d112      	bne.n	8001106 <HAL_ADC_Init+0xa6>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2201      	movs	r2, #1
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d009      	beq.n	8001102 <HAL_ADC_Init+0xa2>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68da      	ldr	r2, [r3, #12]
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	401a      	ands	r2, r3
 80010fa:	2380      	movs	r3, #128	; 0x80
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	429a      	cmp	r2, r3
 8001100:	d101      	bne.n	8001106 <HAL_ADC_Init+0xa6>
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <HAL_ADC_Init+0xa8>
 8001106:	2300      	movs	r3, #0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d116      	bne.n	800113a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	2218      	movs	r2, #24
 8001114:	4393      	bics	r3, r2
 8001116:	0019      	movs	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	0899      	lsrs	r1, r3, #2
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4964      	ldr	r1, [pc, #400]	; (80012d8 <HAL_ADC_Init+0x278>)
 8001146:	400a      	ands	r2, r1
 8001148:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7e1b      	ldrb	r3, [r3, #24]
 800114e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7e5b      	ldrb	r3, [r3, #25]
 8001154:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001156:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7e9b      	ldrb	r3, [r3, #26]
 800115c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800115e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001164:	2b01      	cmp	r3, #1
 8001166:	d002      	beq.n	800116e <HAL_ADC_Init+0x10e>
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	015b      	lsls	r3, r3, #5
 800116c:	e000      	b.n	8001170 <HAL_ADC_Init+0x110>
 800116e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001170:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001176:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	2b02      	cmp	r3, #2
 800117e:	d101      	bne.n	8001184 <HAL_ADC_Init+0x124>
 8001180:	2304      	movs	r3, #4
 8001182:	e000      	b.n	8001186 <HAL_ADC_Init+0x126>
 8001184:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001186:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2124      	movs	r1, #36	; 0x24
 800118c:	5c5b      	ldrb	r3, [r3, r1]
 800118e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001190:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	4313      	orrs	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	7edb      	ldrb	r3, [r3, #27]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d115      	bne.n	80011cc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7e9b      	ldrb	r3, [r3, #26]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d105      	bne.n	80011b4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	2280      	movs	r2, #128	; 0x80
 80011ac:	0252      	lsls	r2, r2, #9
 80011ae:	4313      	orrs	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	e00b      	b.n	80011cc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b8:	2220      	movs	r2, #32
 80011ba:	431a      	orrs	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c4:	2201      	movs	r2, #1
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69da      	ldr	r2, [r3, #28]
 80011d0:	23c2      	movs	r3, #194	; 0xc2
 80011d2:	33ff      	adds	r3, #255	; 0xff
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d007      	beq.n	80011e8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80011e0:	4313      	orrs	r3, r2
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68d9      	ldr	r1, [r3, #12]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	055b      	lsls	r3, r3, #21
 8001200:	429a      	cmp	r2, r3
 8001202:	d01b      	beq.n	800123c <HAL_ADC_Init+0x1dc>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001208:	2b01      	cmp	r3, #1
 800120a:	d017      	beq.n	800123c <HAL_ADC_Init+0x1dc>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001210:	2b02      	cmp	r3, #2
 8001212:	d013      	beq.n	800123c <HAL_ADC_Init+0x1dc>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001218:	2b03      	cmp	r3, #3
 800121a:	d00f      	beq.n	800123c <HAL_ADC_Init+0x1dc>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001220:	2b04      	cmp	r3, #4
 8001222:	d00b      	beq.n	800123c <HAL_ADC_Init+0x1dc>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001228:	2b05      	cmp	r3, #5
 800122a:	d007      	beq.n	800123c <HAL_ADC_Init+0x1dc>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001230:	2b06      	cmp	r3, #6
 8001232:	d003      	beq.n	800123c <HAL_ADC_Init+0x1dc>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001238:	2b07      	cmp	r3, #7
 800123a:	d112      	bne.n	8001262 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	695a      	ldr	r2, [r3, #20]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2107      	movs	r1, #7
 8001248:	438a      	bics	r2, r1
 800124a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6959      	ldr	r1, [r3, #20]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001256:	2207      	movs	r2, #7
 8001258:	401a      	ands	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <HAL_ADC_Init+0x27c>)
 800126a:	4013      	ands	r3, r2
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	429a      	cmp	r2, r3
 8001270:	d10b      	bne.n	800128a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127c:	2203      	movs	r2, #3
 800127e:	4393      	bics	r3, r2
 8001280:	2201      	movs	r2, #1
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001288:	e01c      	b.n	80012c4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128e:	2212      	movs	r2, #18
 8001290:	4393      	bics	r3, r2
 8001292:	2210      	movs	r2, #16
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800129e:	2201      	movs	r2, #1
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80012a6:	230f      	movs	r3, #15
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	2201      	movs	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80012ae:	e009      	b.n	80012c4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b4:	2210      	movs	r2, #16
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80012bc:	230f      	movs	r3, #15
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012c4:	230f      	movs	r3, #15
 80012c6:	18fb      	adds	r3, r7, r3
 80012c8:	781b      	ldrb	r3, [r3, #0]
}
 80012ca:	0018      	movs	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b004      	add	sp, #16
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	fffffefd 	.word	0xfffffefd
 80012d8:	fffe0219 	.word	0xfffe0219
 80012dc:	833fffe7 	.word	0x833fffe7

080012e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ec:	2317      	movs	r3, #23
 80012ee:	18fb      	adds	r3, r7, r3
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2204      	movs	r2, #4
 80012fc:	4013      	ands	r3, r2
 80012fe:	d15e      	bne.n	80013be <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2234      	movs	r2, #52	; 0x34
 8001304:	5c9b      	ldrb	r3, [r3, r2]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <HAL_ADC_Start_DMA+0x2e>
 800130a:	2302      	movs	r3, #2
 800130c:	e05e      	b.n	80013cc <HAL_ADC_Start_DMA+0xec>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2234      	movs	r2, #52	; 0x34
 8001312:	2101      	movs	r1, #1
 8001314:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	7e5b      	ldrb	r3, [r3, #25]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d007      	beq.n	800132e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800131e:	2317      	movs	r3, #23
 8001320:	18fc      	adds	r4, r7, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	0018      	movs	r0, r3
 8001326:	f000 f97b 	bl	8001620 <ADC_Enable>
 800132a:	0003      	movs	r3, r0
 800132c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800132e:	2317      	movs	r3, #23
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d146      	bne.n	80013c6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133c:	4a25      	ldr	r2, [pc, #148]	; (80013d4 <HAL_ADC_Start_DMA+0xf4>)
 800133e:	4013      	ands	r3, r2
 8001340:	2280      	movs	r2, #128	; 0x80
 8001342:	0052      	lsls	r2, r2, #1
 8001344:	431a      	orrs	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2200      	movs	r2, #0
 800134e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2234      	movs	r2, #52	; 0x34
 8001354:	2100      	movs	r1, #0
 8001356:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	4a1e      	ldr	r2, [pc, #120]	; (80013d8 <HAL_ADC_Start_DMA+0xf8>)
 800135e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <HAL_ADC_Start_DMA+0xfc>)
 8001366:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	4a1c      	ldr	r2, [pc, #112]	; (80013e0 <HAL_ADC_Start_DMA+0x100>)
 800136e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	221c      	movs	r2, #28
 8001376:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2110      	movs	r1, #16
 8001384:	430a      	orrs	r2, r1
 8001386:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2101      	movs	r1, #1
 8001394:	430a      	orrs	r2, r1
 8001396:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	3340      	adds	r3, #64	; 0x40
 80013a2:	0019      	movs	r1, r3
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f000 fb68 	bl	8001a7c <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2104      	movs	r1, #4
 80013b8:	430a      	orrs	r2, r1
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	e003      	b.n	80013c6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013be:	2317      	movs	r3, #23
 80013c0:	18fb      	adds	r3, r7, r3
 80013c2:	2202      	movs	r2, #2
 80013c4:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80013c6:	2317      	movs	r3, #23
 80013c8:	18fb      	adds	r3, r7, r3
 80013ca:	781b      	ldrb	r3, [r3, #0]
}
 80013cc:	0018      	movs	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b007      	add	sp, #28
 80013d2:	bd90      	pop	{r4, r7, pc}
 80013d4:	fffff0fe 	.word	0xfffff0fe
 80013d8:	08001729 	.word	0x08001729
 80013dc:	080017dd 	.word	0x080017dd
 80013e0:	080017fb 	.word	0x080017fb

080013e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80013ec:	46c0      	nop			; (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b002      	add	sp, #8
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80013fc:	46c0      	nop			; (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	b002      	add	sp, #8
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800140e:	230f      	movs	r3, #15
 8001410:	18fb      	adds	r3, r7, r3
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	055b      	lsls	r3, r3, #21
 8001422:	429a      	cmp	r2, r3
 8001424:	d011      	beq.n	800144a <HAL_ADC_ConfigChannel+0x46>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142a:	2b01      	cmp	r3, #1
 800142c:	d00d      	beq.n	800144a <HAL_ADC_ConfigChannel+0x46>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001432:	2b02      	cmp	r3, #2
 8001434:	d009      	beq.n	800144a <HAL_ADC_ConfigChannel+0x46>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143a:	2b03      	cmp	r3, #3
 800143c:	d005      	beq.n	800144a <HAL_ADC_ConfigChannel+0x46>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001442:	2b04      	cmp	r3, #4
 8001444:	d001      	beq.n	800144a <HAL_ADC_ConfigChannel+0x46>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2234      	movs	r2, #52	; 0x34
 800144e:	5c9b      	ldrb	r3, [r3, r2]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d101      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x54>
 8001454:	2302      	movs	r3, #2
 8001456:	e0d0      	b.n	80015fa <HAL_ADC_ConfigChannel+0x1f6>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2234      	movs	r2, #52	; 0x34
 800145c:	2101      	movs	r1, #1
 800145e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2204      	movs	r2, #4
 8001468:	4013      	ands	r3, r2
 800146a:	d000      	beq.n	800146e <HAL_ADC_ConfigChannel+0x6a>
 800146c:	e0b4      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4a64      	ldr	r2, [pc, #400]	; (8001604 <HAL_ADC_ConfigChannel+0x200>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d100      	bne.n	800147a <HAL_ADC_ConfigChannel+0x76>
 8001478:	e082      	b.n	8001580 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2201      	movs	r2, #1
 8001486:	409a      	lsls	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001494:	2380      	movs	r3, #128	; 0x80
 8001496:	055b      	lsls	r3, r3, #21
 8001498:	429a      	cmp	r2, r3
 800149a:	d037      	beq.n	800150c <HAL_ADC_ConfigChannel+0x108>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d033      	beq.n	800150c <HAL_ADC_ConfigChannel+0x108>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d02f      	beq.n	800150c <HAL_ADC_ConfigChannel+0x108>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d02b      	beq.n	800150c <HAL_ADC_ConfigChannel+0x108>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d027      	beq.n	800150c <HAL_ADC_ConfigChannel+0x108>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c0:	2b05      	cmp	r3, #5
 80014c2:	d023      	beq.n	800150c <HAL_ADC_ConfigChannel+0x108>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c8:	2b06      	cmp	r3, #6
 80014ca:	d01f      	beq.n	800150c <HAL_ADC_ConfigChannel+0x108>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	2b07      	cmp	r3, #7
 80014d2:	d01b      	beq.n	800150c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	2107      	movs	r1, #7
 80014e0:	400b      	ands	r3, r1
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d012      	beq.n	800150c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2107      	movs	r1, #7
 80014f2:	438a      	bics	r2, r1
 80014f4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6959      	ldr	r1, [r3, #20]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2207      	movs	r2, #7
 8001502:	401a      	ands	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b10      	cmp	r3, #16
 8001512:	d007      	beq.n	8001524 <HAL_ADC_ConfigChannel+0x120>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b11      	cmp	r3, #17
 800151a:	d003      	beq.n	8001524 <HAL_ADC_ConfigChannel+0x120>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b12      	cmp	r3, #18
 8001522:	d163      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001524:	4b38      	ldr	r3, [pc, #224]	; (8001608 <HAL_ADC_ConfigChannel+0x204>)
 8001526:	6819      	ldr	r1, [r3, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b10      	cmp	r3, #16
 800152e:	d009      	beq.n	8001544 <HAL_ADC_ConfigChannel+0x140>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b11      	cmp	r3, #17
 8001536:	d102      	bne.n	800153e <HAL_ADC_ConfigChannel+0x13a>
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	03db      	lsls	r3, r3, #15
 800153c:	e004      	b.n	8001548 <HAL_ADC_ConfigChannel+0x144>
 800153e:	2380      	movs	r3, #128	; 0x80
 8001540:	045b      	lsls	r3, r3, #17
 8001542:	e001      	b.n	8001548 <HAL_ADC_ConfigChannel+0x144>
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	041b      	lsls	r3, r3, #16
 8001548:	4a2f      	ldr	r2, [pc, #188]	; (8001608 <HAL_ADC_ConfigChannel+0x204>)
 800154a:	430b      	orrs	r3, r1
 800154c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b10      	cmp	r3, #16
 8001554:	d14a      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001556:	4b2d      	ldr	r3, [pc, #180]	; (800160c <HAL_ADC_ConfigChannel+0x208>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	492d      	ldr	r1, [pc, #180]	; (8001610 <HAL_ADC_ConfigChannel+0x20c>)
 800155c:	0018      	movs	r0, r3
 800155e:	f7fe fddd 	bl	800011c <__udivsi3>
 8001562:	0003      	movs	r3, r0
 8001564:	001a      	movs	r2, r3
 8001566:	0013      	movs	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	189b      	adds	r3, r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001570:	e002      	b.n	8001578 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	3b01      	subs	r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f9      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x16e>
 800157e:	e035      	b.n	80015ec <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2101      	movs	r1, #1
 800158c:	4099      	lsls	r1, r3
 800158e:	000b      	movs	r3, r1
 8001590:	43d9      	mvns	r1, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	400a      	ands	r2, r1
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b10      	cmp	r3, #16
 80015a0:	d007      	beq.n	80015b2 <HAL_ADC_ConfigChannel+0x1ae>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b11      	cmp	r3, #17
 80015a8:	d003      	beq.n	80015b2 <HAL_ADC_ConfigChannel+0x1ae>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b12      	cmp	r3, #18
 80015b0:	d11c      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_ADC_ConfigChannel+0x204>)
 80015b4:	6819      	ldr	r1, [r3, #0]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b10      	cmp	r3, #16
 80015bc:	d007      	beq.n	80015ce <HAL_ADC_ConfigChannel+0x1ca>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b11      	cmp	r3, #17
 80015c4:	d101      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x1c6>
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <HAL_ADC_ConfigChannel+0x210>)
 80015c8:	e002      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x1cc>
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HAL_ADC_ConfigChannel+0x214>)
 80015cc:	e000      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x1cc>
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <HAL_ADC_ConfigChannel+0x218>)
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <HAL_ADC_ConfigChannel+0x204>)
 80015d2:	400b      	ands	r3, r1
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e009      	b.n	80015ec <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015dc:	2220      	movs	r2, #32
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80015e4:	230f      	movs	r3, #15
 80015e6:	18fb      	adds	r3, r7, r3
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2234      	movs	r2, #52	; 0x34
 80015f0:	2100      	movs	r1, #0
 80015f2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80015f4:	230f      	movs	r3, #15
 80015f6:	18fb      	adds	r3, r7, r3
 80015f8:	781b      	ldrb	r3, [r3, #0]
}
 80015fa:	0018      	movs	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b004      	add	sp, #16
 8001600:	bd80      	pop	{r7, pc}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	00001001 	.word	0x00001001
 8001608:	40012708 	.word	0x40012708
 800160c:	20000000 	.word	0x20000000
 8001610:	000f4240 	.word	0x000f4240
 8001614:	ffbfffff 	.word	0xffbfffff
 8001618:	feffffff 	.word	0xfeffffff
 800161c:	ff7fffff 	.word	0xff7fffff

08001620 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2203      	movs	r2, #3
 8001638:	4013      	ands	r3, r2
 800163a:	2b01      	cmp	r3, #1
 800163c:	d112      	bne.n	8001664 <ADC_Enable+0x44>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2201      	movs	r2, #1
 8001646:	4013      	ands	r3, r2
 8001648:	2b01      	cmp	r3, #1
 800164a:	d009      	beq.n	8001660 <ADC_Enable+0x40>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	401a      	ands	r2, r3
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	429a      	cmp	r2, r3
 800165e:	d101      	bne.n	8001664 <ADC_Enable+0x44>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <ADC_Enable+0x46>
 8001664:	2300      	movs	r3, #0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d152      	bne.n	8001710 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	4a2a      	ldr	r2, [pc, #168]	; (800171c <ADC_Enable+0xfc>)
 8001672:	4013      	ands	r3, r2
 8001674:	d00d      	beq.n	8001692 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167a:	2210      	movs	r2, #16
 800167c:	431a      	orrs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001686:	2201      	movs	r2, #1
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e03f      	b.n	8001712 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2101      	movs	r1, #1
 800169e:	430a      	orrs	r2, r1
 80016a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016a2:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <ADC_Enable+0x100>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	491f      	ldr	r1, [pc, #124]	; (8001724 <ADC_Enable+0x104>)
 80016a8:	0018      	movs	r0, r3
 80016aa:	f7fe fd37 	bl	800011c <__udivsi3>
 80016ae:	0003      	movs	r3, r0
 80016b0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016b2:	e002      	b.n	80016ba <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f9      	bne.n	80016b4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80016c0:	f7ff fca0 	bl	8001004 <HAL_GetTick>
 80016c4:	0003      	movs	r3, r0
 80016c6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016c8:	e01b      	b.n	8001702 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016ca:	f7ff fc9b 	bl	8001004 <HAL_GetTick>
 80016ce:	0002      	movs	r2, r0
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d914      	bls.n	8001702 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2201      	movs	r2, #1
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d00d      	beq.n	8001702 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ea:	2210      	movs	r2, #16
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f6:	2201      	movs	r2, #1
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e007      	b.n	8001712 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2201      	movs	r2, #1
 800170a:	4013      	ands	r3, r2
 800170c:	2b01      	cmp	r3, #1
 800170e:	d1dc      	bne.n	80016ca <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	0018      	movs	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	b004      	add	sp, #16
 8001718:	bd80      	pop	{r7, pc}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	80000017 	.word	0x80000017
 8001720:	20000000 	.word	0x20000000
 8001724:	000f4240 	.word	0x000f4240

08001728 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173a:	2250      	movs	r2, #80	; 0x50
 800173c:	4013      	ands	r3, r2
 800173e:	d140      	bne.n	80017c2 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001744:	2280      	movs	r2, #128	; 0x80
 8001746:	0092      	lsls	r2, r2, #2
 8001748:	431a      	orrs	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	23c0      	movs	r3, #192	; 0xc0
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	4013      	ands	r3, r2
 800175a:	d12d      	bne.n	80017b8 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001760:	2b00      	cmp	r3, #0
 8001762:	d129      	bne.n	80017b8 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2208      	movs	r2, #8
 800176c:	4013      	ands	r3, r2
 800176e:	2b08      	cmp	r3, #8
 8001770:	d122      	bne.n	80017b8 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2204      	movs	r2, #4
 800177a:	4013      	ands	r3, r2
 800177c:	d110      	bne.n	80017a0 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	210c      	movs	r1, #12
 800178a:	438a      	bics	r2, r1
 800178c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001792:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <ADC_DMAConvCplt+0xb0>)
 8001794:	4013      	ands	r3, r2
 8001796:	2201      	movs	r2, #1
 8001798:	431a      	orrs	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	639a      	str	r2, [r3, #56]	; 0x38
 800179e:	e00b      	b.n	80017b8 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a4:	2220      	movs	r2, #32
 80017a6:	431a      	orrs	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b0:	2201      	movs	r2, #1
 80017b2:	431a      	orrs	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	0018      	movs	r0, r3
 80017bc:	f7ff f914 	bl	80009e8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80017c0:	e005      	b.n	80017ce <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	0010      	movs	r0, r2
 80017cc:	4798      	blx	r3
}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b004      	add	sp, #16
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	fffffefe 	.word	0xfffffefe

080017dc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	0018      	movs	r0, r3
 80017ee:	f7ff fdf9 	bl	80013e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b004      	add	sp, #16
 80017f8:	bd80      	pop	{r7, pc}

080017fa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b084      	sub	sp, #16
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180c:	2240      	movs	r2, #64	; 0x40
 800180e:	431a      	orrs	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001818:	2204      	movs	r2, #4
 800181a:	431a      	orrs	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	0018      	movs	r0, r3
 8001824:	f7ff fde6 	bl	80013f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001828:	46c0      	nop			; (mov r8, r8)
 800182a:	46bd      	mov	sp, r7
 800182c:	b004      	add	sp, #16
 800182e:	bd80      	pop	{r7, pc}

08001830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	0002      	movs	r2, r0
 8001838:	1dfb      	adds	r3, r7, #7
 800183a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800183c:	1dfb      	adds	r3, r7, #7
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b7f      	cmp	r3, #127	; 0x7f
 8001842:	d809      	bhi.n	8001858 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001844:	1dfb      	adds	r3, r7, #7
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	001a      	movs	r2, r3
 800184a:	231f      	movs	r3, #31
 800184c:	401a      	ands	r2, r3
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <__NVIC_EnableIRQ+0x30>)
 8001850:	2101      	movs	r1, #1
 8001852:	4091      	lsls	r1, r2
 8001854:	000a      	movs	r2, r1
 8001856:	601a      	str	r2, [r3, #0]
  }
}
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b002      	add	sp, #8
 800185e:	bd80      	pop	{r7, pc}
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	0002      	movs	r2, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	1dfb      	adds	r3, r7, #7
 8001870:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001872:	1dfb      	adds	r3, r7, #7
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b7f      	cmp	r3, #127	; 0x7f
 8001878:	d828      	bhi.n	80018cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800187a:	4a2f      	ldr	r2, [pc, #188]	; (8001938 <__NVIC_SetPriority+0xd4>)
 800187c:	1dfb      	adds	r3, r7, #7
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	b25b      	sxtb	r3, r3
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	33c0      	adds	r3, #192	; 0xc0
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	589b      	ldr	r3, [r3, r2]
 800188a:	1dfa      	adds	r2, r7, #7
 800188c:	7812      	ldrb	r2, [r2, #0]
 800188e:	0011      	movs	r1, r2
 8001890:	2203      	movs	r2, #3
 8001892:	400a      	ands	r2, r1
 8001894:	00d2      	lsls	r2, r2, #3
 8001896:	21ff      	movs	r1, #255	; 0xff
 8001898:	4091      	lsls	r1, r2
 800189a:	000a      	movs	r2, r1
 800189c:	43d2      	mvns	r2, r2
 800189e:	401a      	ands	r2, r3
 80018a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	019b      	lsls	r3, r3, #6
 80018a6:	22ff      	movs	r2, #255	; 0xff
 80018a8:	401a      	ands	r2, r3
 80018aa:	1dfb      	adds	r3, r7, #7
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	0018      	movs	r0, r3
 80018b0:	2303      	movs	r3, #3
 80018b2:	4003      	ands	r3, r0
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018b8:	481f      	ldr	r0, [pc, #124]	; (8001938 <__NVIC_SetPriority+0xd4>)
 80018ba:	1dfb      	adds	r3, r7, #7
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	430a      	orrs	r2, r1
 80018c4:	33c0      	adds	r3, #192	; 0xc0
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018ca:	e031      	b.n	8001930 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018cc:	4a1b      	ldr	r2, [pc, #108]	; (800193c <__NVIC_SetPriority+0xd8>)
 80018ce:	1dfb      	adds	r3, r7, #7
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	0019      	movs	r1, r3
 80018d4:	230f      	movs	r3, #15
 80018d6:	400b      	ands	r3, r1
 80018d8:	3b08      	subs	r3, #8
 80018da:	089b      	lsrs	r3, r3, #2
 80018dc:	3306      	adds	r3, #6
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	18d3      	adds	r3, r2, r3
 80018e2:	3304      	adds	r3, #4
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	1dfa      	adds	r2, r7, #7
 80018e8:	7812      	ldrb	r2, [r2, #0]
 80018ea:	0011      	movs	r1, r2
 80018ec:	2203      	movs	r2, #3
 80018ee:	400a      	ands	r2, r1
 80018f0:	00d2      	lsls	r2, r2, #3
 80018f2:	21ff      	movs	r1, #255	; 0xff
 80018f4:	4091      	lsls	r1, r2
 80018f6:	000a      	movs	r2, r1
 80018f8:	43d2      	mvns	r2, r2
 80018fa:	401a      	ands	r2, r3
 80018fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	019b      	lsls	r3, r3, #6
 8001902:	22ff      	movs	r2, #255	; 0xff
 8001904:	401a      	ands	r2, r3
 8001906:	1dfb      	adds	r3, r7, #7
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	0018      	movs	r0, r3
 800190c:	2303      	movs	r3, #3
 800190e:	4003      	ands	r3, r0
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001914:	4809      	ldr	r0, [pc, #36]	; (800193c <__NVIC_SetPriority+0xd8>)
 8001916:	1dfb      	adds	r3, r7, #7
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	001c      	movs	r4, r3
 800191c:	230f      	movs	r3, #15
 800191e:	4023      	ands	r3, r4
 8001920:	3b08      	subs	r3, #8
 8001922:	089b      	lsrs	r3, r3, #2
 8001924:	430a      	orrs	r2, r1
 8001926:	3306      	adds	r3, #6
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	18c3      	adds	r3, r0, r3
 800192c:	3304      	adds	r3, #4
 800192e:	601a      	str	r2, [r3, #0]
}
 8001930:	46c0      	nop			; (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	b003      	add	sp, #12
 8001936:	bd90      	pop	{r4, r7, pc}
 8001938:	e000e100 	.word	0xe000e100
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	1e5a      	subs	r2, r3, #1
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	045b      	lsls	r3, r3, #17
 8001950:	429a      	cmp	r2, r3
 8001952:	d301      	bcc.n	8001958 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001954:	2301      	movs	r3, #1
 8001956:	e010      	b.n	800197a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <SysTick_Config+0x44>)
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	3a01      	subs	r2, #1
 800195e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001960:	2301      	movs	r3, #1
 8001962:	425b      	negs	r3, r3
 8001964:	2103      	movs	r1, #3
 8001966:	0018      	movs	r0, r3
 8001968:	f7ff ff7c 	bl	8001864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <SysTick_Config+0x44>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <SysTick_Config+0x44>)
 8001974:	2207      	movs	r2, #7
 8001976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001978:	2300      	movs	r3, #0
}
 800197a:	0018      	movs	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	b002      	add	sp, #8
 8001980:	bd80      	pop	{r7, pc}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	e000e010 	.word	0xe000e010

08001988 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
 8001992:	210f      	movs	r1, #15
 8001994:	187b      	adds	r3, r7, r1
 8001996:	1c02      	adds	r2, r0, #0
 8001998:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	187b      	adds	r3, r7, r1
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b25b      	sxtb	r3, r3
 80019a2:	0011      	movs	r1, r2
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7ff ff5d 	bl	8001864 <__NVIC_SetPriority>
}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b004      	add	sp, #16
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	0002      	movs	r2, r0
 80019ba:	1dfb      	adds	r3, r7, #7
 80019bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019be:	1dfb      	adds	r3, r7, #7
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	0018      	movs	r0, r3
 80019c6:	f7ff ff33 	bl	8001830 <__NVIC_EnableIRQ>
}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b002      	add	sp, #8
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	0018      	movs	r0, r3
 80019de:	f7ff ffaf 	bl	8001940 <SysTick_Config>
 80019e2:	0003      	movs	r3, r0
}
 80019e4:	0018      	movs	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b002      	add	sp, #8
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e036      	b.n	8001a70 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2221      	movs	r2, #33	; 0x21
 8001a06:	2102      	movs	r1, #2
 8001a08:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <HAL_DMA_Init+0x8c>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	0018      	movs	r0, r3
 8001a54:	f000 f9c4 	bl	8001de0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2221      	movs	r2, #33	; 0x21
 8001a62:	2101      	movs	r1, #1
 8001a64:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}  
 8001a70:	0018      	movs	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b004      	add	sp, #16
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	ffffc00f 	.word	0xffffc00f

08001a7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001a8a:	2317      	movs	r3, #23
 8001a8c:	18fb      	adds	r3, r7, r3
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2220      	movs	r2, #32
 8001a96:	5c9b      	ldrb	r3, [r3, r2]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_DMA_Start_IT+0x24>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e04f      	b.n	8001b40 <HAL_DMA_Start_IT+0xc4>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2221      	movs	r2, #33	; 0x21
 8001aac:	5c9b      	ldrb	r3, [r3, r2]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d13a      	bne.n	8001b2a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2221      	movs	r2, #33	; 0x21
 8001ab8:	2102      	movs	r1, #2
 8001aba:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2101      	movs	r1, #1
 8001ace:	438a      	bics	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f954 	bl	8001d86 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d008      	beq.n	8001af8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	210e      	movs	r1, #14
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e00f      	b.n	8001b18 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	210a      	movs	r1, #10
 8001b04:	430a      	orrs	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2104      	movs	r1, #4
 8001b14:	438a      	bics	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2101      	movs	r1, #1
 8001b24:	430a      	orrs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	e007      	b.n	8001b3a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	2100      	movs	r1, #0
 8001b30:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001b32:	2317      	movs	r3, #23
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	2202      	movs	r2, #2
 8001b38:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8001b3a:	2317      	movs	r3, #23
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	781b      	ldrb	r3, [r3, #0]
} 
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b006      	add	sp, #24
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2221      	movs	r2, #33	; 0x21
 8001b54:	5c9b      	ldrb	r3, [r3, r2]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d008      	beq.n	8001b6e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2204      	movs	r2, #4
 8001b60:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2220      	movs	r2, #32
 8001b66:	2100      	movs	r1, #0
 8001b68:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e020      	b.n	8001bb0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	210e      	movs	r1, #14
 8001b7a:	438a      	bics	r2, r1
 8001b7c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2101      	movs	r1, #1
 8001b8a:	438a      	bics	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b96:	2101      	movs	r1, #1
 8001b98:	4091      	lsls	r1, r2
 8001b9a:	000a      	movs	r2, r1
 8001b9c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2221      	movs	r2, #33	; 0x21
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2220      	movs	r2, #32
 8001baa:	2100      	movs	r1, #0
 8001bac:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b002      	add	sp, #8
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc0:	210f      	movs	r1, #15
 8001bc2:	187b      	adds	r3, r7, r1
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2221      	movs	r2, #33	; 0x21
 8001bcc:	5c9b      	ldrb	r3, [r3, r2]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d006      	beq.n	8001be2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001bda:	187b      	adds	r3, r7, r1
 8001bdc:	2201      	movs	r2, #1
 8001bde:	701a      	strb	r2, [r3, #0]
 8001be0:	e028      	b.n	8001c34 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	210e      	movs	r1, #14
 8001bee:	438a      	bics	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	438a      	bics	r2, r1
 8001c00:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	4091      	lsls	r1, r2
 8001c0e:	000a      	movs	r2, r1
 8001c10:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2221      	movs	r2, #33	; 0x21
 8001c16:	2101      	movs	r1, #1
 8001c18:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	2100      	movs	r1, #0
 8001c20:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d004      	beq.n	8001c34 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	0010      	movs	r0, r2
 8001c32:	4798      	blx	r3
    } 
  }
  return status;
 8001c34:	230f      	movs	r3, #15
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	781b      	ldrb	r3, [r3, #0]
}
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b004      	add	sp, #16
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	2204      	movs	r2, #4
 8001c60:	409a      	lsls	r2, r3
 8001c62:	0013      	movs	r3, r2
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4013      	ands	r3, r2
 8001c68:	d024      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x72>
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d020      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d107      	bne.n	8001c8e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2104      	movs	r1, #4
 8001c8a:	438a      	bics	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c96:	2104      	movs	r1, #4
 8001c98:	4091      	lsls	r1, r2
 8001c9a:	000a      	movs	r2, r1
 8001c9c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d100      	bne.n	8001ca8 <HAL_DMA_IRQHandler+0x66>
 8001ca6:	e06a      	b.n	8001d7e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	0010      	movs	r0, r2
 8001cb0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001cb2:	e064      	b.n	8001d7e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	2202      	movs	r2, #2
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	0013      	movs	r3, r2
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d02b      	beq.n	8001d1c <HAL_DMA_IRQHandler+0xda>
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d027      	beq.n	8001d1c <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d10b      	bne.n	8001cf0 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	210a      	movs	r1, #10
 8001ce4:	438a      	bics	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2221      	movs	r2, #33	; 0x21
 8001cec:	2101      	movs	r1, #1
 8001cee:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	4091      	lsls	r1, r2
 8001cfc:	000a      	movs	r2, r1
 8001cfe:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2220      	movs	r2, #32
 8001d04:	2100      	movs	r1, #0
 8001d06:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d036      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	0010      	movs	r0, r2
 8001d18:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001d1a:	e030      	b.n	8001d7e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	2208      	movs	r2, #8
 8001d22:	409a      	lsls	r2, r3
 8001d24:	0013      	movs	r3, r2
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d028      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x13c>
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2208      	movs	r2, #8
 8001d30:	4013      	ands	r3, r2
 8001d32:	d024      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	210e      	movs	r1, #14
 8001d40:	438a      	bics	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	4091      	lsls	r1, r2
 8001d50:	000a      	movs	r2, r1
 8001d52:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2221      	movs	r2, #33	; 0x21
 8001d5e:	2101      	movs	r1, #1
 8001d60:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2220      	movs	r2, #32
 8001d66:	2100      	movs	r1, #0
 8001d68:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	0010      	movs	r0, r2
 8001d7a:	4798      	blx	r3
    }
   }
}  
 8001d7c:	e7ff      	b.n	8001d7e <HAL_DMA_IRQHandler+0x13c>
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b004      	add	sp, #16
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	4091      	lsls	r1, r2
 8001da0:	000a      	movs	r2, r1
 8001da2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b10      	cmp	r3, #16
 8001db2:	d108      	bne.n	8001dc6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001dc4:	e007      	b.n	8001dd6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	60da      	str	r2, [r3, #12]
}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b004      	add	sp, #16
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a08      	ldr	r2, [pc, #32]	; (8001e10 <DMA_CalcBaseAndBitshift+0x30>)
 8001dee:	4694      	mov	ip, r2
 8001df0:	4463      	add	r3, ip
 8001df2:	2114      	movs	r1, #20
 8001df4:	0018      	movs	r0, r3
 8001df6:	f7fe f991 	bl	800011c <__udivsi3>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	009a      	lsls	r2, r3, #2
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a03      	ldr	r2, [pc, #12]	; (8001e14 <DMA_CalcBaseAndBitshift+0x34>)
 8001e06:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001e08:	46c0      	nop			; (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b002      	add	sp, #8
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	bffdfff8 	.word	0xbffdfff8
 8001e14:	40020000 	.word	0x40020000

08001e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e26:	e149      	b.n	80020bc <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4091      	lsls	r1, r2
 8001e32:	000a      	movs	r2, r1
 8001e34:	4013      	ands	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d100      	bne.n	8001e40 <HAL_GPIO_Init+0x28>
 8001e3e:	e13a      	b.n	80020b6 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2203      	movs	r2, #3
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d005      	beq.n	8001e58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2203      	movs	r2, #3
 8001e52:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d130      	bne.n	8001eba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	2203      	movs	r2, #3
 8001e64:	409a      	lsls	r2, r3
 8001e66:	0013      	movs	r3, r2
 8001e68:	43da      	mvns	r2, r3
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	0013      	movs	r3, r2
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e8e:	2201      	movs	r2, #1
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	409a      	lsls	r2, r3
 8001e94:	0013      	movs	r3, r2
 8001e96:	43da      	mvns	r2, r3
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	0013      	movs	r3, r2
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d017      	beq.n	8001ef6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	0013      	movs	r3, r2
 8001ed6:	43da      	mvns	r2, r3
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	0013      	movs	r3, r2
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2203      	movs	r2, #3
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d123      	bne.n	8001f4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	08da      	lsrs	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3208      	adds	r2, #8
 8001f0a:	0092      	lsls	r2, r2, #2
 8001f0c:	58d3      	ldr	r3, [r2, r3]
 8001f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	2207      	movs	r2, #7
 8001f14:	4013      	ands	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	220f      	movs	r2, #15
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	0013      	movs	r3, r2
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	691a      	ldr	r2, [r3, #16]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2107      	movs	r1, #7
 8001f2e:	400b      	ands	r3, r1
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	409a      	lsls	r2, r3
 8001f34:	0013      	movs	r3, r2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	08da      	lsrs	r2, r3, #3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3208      	adds	r2, #8
 8001f44:	0092      	lsls	r2, r2, #2
 8001f46:	6939      	ldr	r1, [r7, #16]
 8001f48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	2203      	movs	r2, #3
 8001f56:	409a      	lsls	r2, r3
 8001f58:	0013      	movs	r3, r2
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2203      	movs	r2, #3
 8001f68:	401a      	ands	r2, r3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	0013      	movs	r3, r2
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	23c0      	movs	r3, #192	; 0xc0
 8001f84:	029b      	lsls	r3, r3, #10
 8001f86:	4013      	ands	r3, r2
 8001f88:	d100      	bne.n	8001f8c <HAL_GPIO_Init+0x174>
 8001f8a:	e094      	b.n	80020b6 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8c:	4b51      	ldr	r3, [pc, #324]	; (80020d4 <HAL_GPIO_Init+0x2bc>)
 8001f8e:	699a      	ldr	r2, [r3, #24]
 8001f90:	4b50      	ldr	r3, [pc, #320]	; (80020d4 <HAL_GPIO_Init+0x2bc>)
 8001f92:	2101      	movs	r1, #1
 8001f94:	430a      	orrs	r2, r1
 8001f96:	619a      	str	r2, [r3, #24]
 8001f98:	4b4e      	ldr	r3, [pc, #312]	; (80020d4 <HAL_GPIO_Init+0x2bc>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fa4:	4a4c      	ldr	r2, [pc, #304]	; (80020d8 <HAL_GPIO_Init+0x2c0>)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	089b      	lsrs	r3, r3, #2
 8001faa:	3302      	adds	r3, #2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	589b      	ldr	r3, [r3, r2]
 8001fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	220f      	movs	r2, #15
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	0013      	movs	r3, r2
 8001fc0:	43da      	mvns	r2, r3
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	2390      	movs	r3, #144	; 0x90
 8001fcc:	05db      	lsls	r3, r3, #23
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d00d      	beq.n	8001fee <HAL_GPIO_Init+0x1d6>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a41      	ldr	r2, [pc, #260]	; (80020dc <HAL_GPIO_Init+0x2c4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d007      	beq.n	8001fea <HAL_GPIO_Init+0x1d2>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a40      	ldr	r2, [pc, #256]	; (80020e0 <HAL_GPIO_Init+0x2c8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d101      	bne.n	8001fe6 <HAL_GPIO_Init+0x1ce>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e004      	b.n	8001ff0 <HAL_GPIO_Init+0x1d8>
 8001fe6:	2305      	movs	r3, #5
 8001fe8:	e002      	b.n	8001ff0 <HAL_GPIO_Init+0x1d8>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_GPIO_Init+0x1d8>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	2103      	movs	r1, #3
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	0092      	lsls	r2, r2, #2
 8001ff8:	4093      	lsls	r3, r2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002000:	4935      	ldr	r1, [pc, #212]	; (80020d8 <HAL_GPIO_Init+0x2c0>)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	3302      	adds	r3, #2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800200e:	4b35      	ldr	r3, [pc, #212]	; (80020e4 <HAL_GPIO_Init+0x2cc>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	43da      	mvns	r2, r3
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	025b      	lsls	r3, r3, #9
 8002026:	4013      	ands	r3, r2
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002032:	4b2c      	ldr	r3, [pc, #176]	; (80020e4 <HAL_GPIO_Init+0x2cc>)
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002038:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <HAL_GPIO_Init+0x2cc>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	43da      	mvns	r2, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	029b      	lsls	r3, r3, #10
 8002050:	4013      	ands	r3, r2
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <HAL_GPIO_Init+0x2cc>)
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_GPIO_Init+0x2cc>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	43da      	mvns	r2, r3
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	2380      	movs	r3, #128	; 0x80
 8002078:	035b      	lsls	r3, r3, #13
 800207a:	4013      	ands	r3, r2
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <HAL_GPIO_Init+0x2cc>)
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_GPIO_Init+0x2cc>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	43da      	mvns	r2, r3
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	039b      	lsls	r3, r3, #14
 80020a4:	4013      	ands	r3, r2
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <HAL_GPIO_Init+0x2cc>)
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3301      	adds	r3, #1
 80020ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	40da      	lsrs	r2, r3
 80020c4:	1e13      	subs	r3, r2, #0
 80020c6:	d000      	beq.n	80020ca <HAL_GPIO_Init+0x2b2>
 80020c8:	e6ae      	b.n	8001e28 <HAL_GPIO_Init+0x10>
  } 
}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b006      	add	sp, #24
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40010000 	.word	0x40010000
 80020dc:	48000400 	.word	0x48000400
 80020e0:	48000800 	.word	0x48000800
 80020e4:	40010400 	.word	0x40010400

080020e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	0008      	movs	r0, r1
 80020f2:	0011      	movs	r1, r2
 80020f4:	1cbb      	adds	r3, r7, #2
 80020f6:	1c02      	adds	r2, r0, #0
 80020f8:	801a      	strh	r2, [r3, #0]
 80020fa:	1c7b      	adds	r3, r7, #1
 80020fc:	1c0a      	adds	r2, r1, #0
 80020fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002100:	1c7b      	adds	r3, r7, #1
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002108:	1cbb      	adds	r3, r7, #2
 800210a:	881a      	ldrh	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002110:	e003      	b.n	800211a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002112:	1cbb      	adds	r3, r7, #2
 8002114:	881a      	ldrh	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	629a      	str	r2, [r3, #40]	; 0x28
}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	46bd      	mov	sp, r7
 800211e:	b002      	add	sp, #8
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d102      	bne.n	8002138 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	f000 fb76 	bl	8002824 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2201      	movs	r2, #1
 800213e:	4013      	ands	r3, r2
 8002140:	d100      	bne.n	8002144 <HAL_RCC_OscConfig+0x20>
 8002142:	e08e      	b.n	8002262 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002144:	4bc5      	ldr	r3, [pc, #788]	; (800245c <HAL_RCC_OscConfig+0x338>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	220c      	movs	r2, #12
 800214a:	4013      	ands	r3, r2
 800214c:	2b04      	cmp	r3, #4
 800214e:	d00e      	beq.n	800216e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002150:	4bc2      	ldr	r3, [pc, #776]	; (800245c <HAL_RCC_OscConfig+0x338>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	220c      	movs	r2, #12
 8002156:	4013      	ands	r3, r2
 8002158:	2b08      	cmp	r3, #8
 800215a:	d117      	bne.n	800218c <HAL_RCC_OscConfig+0x68>
 800215c:	4bbf      	ldr	r3, [pc, #764]	; (800245c <HAL_RCC_OscConfig+0x338>)
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	23c0      	movs	r3, #192	; 0xc0
 8002162:	025b      	lsls	r3, r3, #9
 8002164:	401a      	ands	r2, r3
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	025b      	lsls	r3, r3, #9
 800216a:	429a      	cmp	r2, r3
 800216c:	d10e      	bne.n	800218c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216e:	4bbb      	ldr	r3, [pc, #748]	; (800245c <HAL_RCC_OscConfig+0x338>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	029b      	lsls	r3, r3, #10
 8002176:	4013      	ands	r3, r2
 8002178:	d100      	bne.n	800217c <HAL_RCC_OscConfig+0x58>
 800217a:	e071      	b.n	8002260 <HAL_RCC_OscConfig+0x13c>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d000      	beq.n	8002186 <HAL_RCC_OscConfig+0x62>
 8002184:	e06c      	b.n	8002260 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	f000 fb4c 	bl	8002824 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d107      	bne.n	80021a4 <HAL_RCC_OscConfig+0x80>
 8002194:	4bb1      	ldr	r3, [pc, #708]	; (800245c <HAL_RCC_OscConfig+0x338>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4bb0      	ldr	r3, [pc, #704]	; (800245c <HAL_RCC_OscConfig+0x338>)
 800219a:	2180      	movs	r1, #128	; 0x80
 800219c:	0249      	lsls	r1, r1, #9
 800219e:	430a      	orrs	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	e02f      	b.n	8002204 <HAL_RCC_OscConfig+0xe0>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10c      	bne.n	80021c6 <HAL_RCC_OscConfig+0xa2>
 80021ac:	4bab      	ldr	r3, [pc, #684]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4baa      	ldr	r3, [pc, #680]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80021b2:	49ab      	ldr	r1, [pc, #684]	; (8002460 <HAL_RCC_OscConfig+0x33c>)
 80021b4:	400a      	ands	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	4ba8      	ldr	r3, [pc, #672]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4ba7      	ldr	r3, [pc, #668]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80021be:	49a9      	ldr	r1, [pc, #676]	; (8002464 <HAL_RCC_OscConfig+0x340>)
 80021c0:	400a      	ands	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e01e      	b.n	8002204 <HAL_RCC_OscConfig+0xe0>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b05      	cmp	r3, #5
 80021cc:	d10e      	bne.n	80021ec <HAL_RCC_OscConfig+0xc8>
 80021ce:	4ba3      	ldr	r3, [pc, #652]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4ba2      	ldr	r3, [pc, #648]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80021d4:	2180      	movs	r1, #128	; 0x80
 80021d6:	02c9      	lsls	r1, r1, #11
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	4b9f      	ldr	r3, [pc, #636]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b9e      	ldr	r3, [pc, #632]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80021e2:	2180      	movs	r1, #128	; 0x80
 80021e4:	0249      	lsls	r1, r1, #9
 80021e6:	430a      	orrs	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	e00b      	b.n	8002204 <HAL_RCC_OscConfig+0xe0>
 80021ec:	4b9b      	ldr	r3, [pc, #620]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b9a      	ldr	r3, [pc, #616]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80021f2:	499b      	ldr	r1, [pc, #620]	; (8002460 <HAL_RCC_OscConfig+0x33c>)
 80021f4:	400a      	ands	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	4b98      	ldr	r3, [pc, #608]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b97      	ldr	r3, [pc, #604]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80021fe:	4999      	ldr	r1, [pc, #612]	; (8002464 <HAL_RCC_OscConfig+0x340>)
 8002200:	400a      	ands	r2, r1
 8002202:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d014      	beq.n	8002236 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe fefa 	bl	8001004 <HAL_GetTick>
 8002210:	0003      	movs	r3, r0
 8002212:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002216:	f7fe fef5 	bl	8001004 <HAL_GetTick>
 800221a:	0002      	movs	r2, r0
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b64      	cmp	r3, #100	; 0x64
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e2fd      	b.n	8002824 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002228:	4b8c      	ldr	r3, [pc, #560]	; (800245c <HAL_RCC_OscConfig+0x338>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	029b      	lsls	r3, r3, #10
 8002230:	4013      	ands	r3, r2
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0xf2>
 8002234:	e015      	b.n	8002262 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7fe fee5 	bl	8001004 <HAL_GetTick>
 800223a:	0003      	movs	r3, r0
 800223c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002240:	f7fe fee0 	bl	8001004 <HAL_GetTick>
 8002244:	0002      	movs	r2, r0
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	; 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e2e8      	b.n	8002824 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002252:	4b82      	ldr	r3, [pc, #520]	; (800245c <HAL_RCC_OscConfig+0x338>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	029b      	lsls	r3, r3, #10
 800225a:	4013      	ands	r3, r2
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x11c>
 800225e:	e000      	b.n	8002262 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2202      	movs	r2, #2
 8002268:	4013      	ands	r3, r2
 800226a:	d100      	bne.n	800226e <HAL_RCC_OscConfig+0x14a>
 800226c:	e06c      	b.n	8002348 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800226e:	4b7b      	ldr	r3, [pc, #492]	; (800245c <HAL_RCC_OscConfig+0x338>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	220c      	movs	r2, #12
 8002274:	4013      	ands	r3, r2
 8002276:	d00e      	beq.n	8002296 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002278:	4b78      	ldr	r3, [pc, #480]	; (800245c <HAL_RCC_OscConfig+0x338>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	220c      	movs	r2, #12
 800227e:	4013      	ands	r3, r2
 8002280:	2b08      	cmp	r3, #8
 8002282:	d11f      	bne.n	80022c4 <HAL_RCC_OscConfig+0x1a0>
 8002284:	4b75      	ldr	r3, [pc, #468]	; (800245c <HAL_RCC_OscConfig+0x338>)
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	23c0      	movs	r3, #192	; 0xc0
 800228a:	025b      	lsls	r3, r3, #9
 800228c:	401a      	ands	r2, r3
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	429a      	cmp	r2, r3
 8002294:	d116      	bne.n	80022c4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002296:	4b71      	ldr	r3, [pc, #452]	; (800245c <HAL_RCC_OscConfig+0x338>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2202      	movs	r2, #2
 800229c:	4013      	ands	r3, r2
 800229e:	d005      	beq.n	80022ac <HAL_RCC_OscConfig+0x188>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e2bb      	b.n	8002824 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ac:	4b6b      	ldr	r3, [pc, #428]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	22f8      	movs	r2, #248	; 0xf8
 80022b2:	4393      	bics	r3, r2
 80022b4:	0019      	movs	r1, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	00da      	lsls	r2, r3, #3
 80022bc:	4b67      	ldr	r3, [pc, #412]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80022be:	430a      	orrs	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c2:	e041      	b.n	8002348 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d024      	beq.n	8002316 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022cc:	4b63      	ldr	r3, [pc, #396]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b62      	ldr	r3, [pc, #392]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80022d2:	2101      	movs	r1, #1
 80022d4:	430a      	orrs	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7fe fe94 	bl	8001004 <HAL_GetTick>
 80022dc:	0003      	movs	r3, r0
 80022de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e2:	f7fe fe8f 	bl	8001004 <HAL_GetTick>
 80022e6:	0002      	movs	r2, r0
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e297      	b.n	8002824 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f4:	4b59      	ldr	r3, [pc, #356]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2202      	movs	r2, #2
 80022fa:	4013      	ands	r3, r2
 80022fc:	d0f1      	beq.n	80022e2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fe:	4b57      	ldr	r3, [pc, #348]	; (800245c <HAL_RCC_OscConfig+0x338>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	22f8      	movs	r2, #248	; 0xf8
 8002304:	4393      	bics	r3, r2
 8002306:	0019      	movs	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	00da      	lsls	r2, r3, #3
 800230e:	4b53      	ldr	r3, [pc, #332]	; (800245c <HAL_RCC_OscConfig+0x338>)
 8002310:	430a      	orrs	r2, r1
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	e018      	b.n	8002348 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002316:	4b51      	ldr	r3, [pc, #324]	; (800245c <HAL_RCC_OscConfig+0x338>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	4b50      	ldr	r3, [pc, #320]	; (800245c <HAL_RCC_OscConfig+0x338>)
 800231c:	2101      	movs	r1, #1
 800231e:	438a      	bics	r2, r1
 8002320:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002322:	f7fe fe6f 	bl	8001004 <HAL_GetTick>
 8002326:	0003      	movs	r3, r0
 8002328:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800232c:	f7fe fe6a 	bl	8001004 <HAL_GetTick>
 8002330:	0002      	movs	r2, r0
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e272      	b.n	8002824 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	4b47      	ldr	r3, [pc, #284]	; (800245c <HAL_RCC_OscConfig+0x338>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2202      	movs	r2, #2
 8002344:	4013      	ands	r3, r2
 8002346:	d1f1      	bne.n	800232c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2208      	movs	r2, #8
 800234e:	4013      	ands	r3, r2
 8002350:	d036      	beq.n	80023c0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d019      	beq.n	800238e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800235a:	4b40      	ldr	r3, [pc, #256]	; (800245c <HAL_RCC_OscConfig+0x338>)
 800235c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800235e:	4b3f      	ldr	r3, [pc, #252]	; (800245c <HAL_RCC_OscConfig+0x338>)
 8002360:	2101      	movs	r1, #1
 8002362:	430a      	orrs	r2, r1
 8002364:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7fe fe4d 	bl	8001004 <HAL_GetTick>
 800236a:	0003      	movs	r3, r0
 800236c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002370:	f7fe fe48 	bl	8001004 <HAL_GetTick>
 8002374:	0002      	movs	r2, r0
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e250      	b.n	8002824 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002382:	4b36      	ldr	r3, [pc, #216]	; (800245c <HAL_RCC_OscConfig+0x338>)
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	2202      	movs	r2, #2
 8002388:	4013      	ands	r3, r2
 800238a:	d0f1      	beq.n	8002370 <HAL_RCC_OscConfig+0x24c>
 800238c:	e018      	b.n	80023c0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800238e:	4b33      	ldr	r3, [pc, #204]	; (800245c <HAL_RCC_OscConfig+0x338>)
 8002390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002392:	4b32      	ldr	r3, [pc, #200]	; (800245c <HAL_RCC_OscConfig+0x338>)
 8002394:	2101      	movs	r1, #1
 8002396:	438a      	bics	r2, r1
 8002398:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239a:	f7fe fe33 	bl	8001004 <HAL_GetTick>
 800239e:	0003      	movs	r3, r0
 80023a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a4:	f7fe fe2e 	bl	8001004 <HAL_GetTick>
 80023a8:	0002      	movs	r2, r0
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e236      	b.n	8002824 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b6:	4b29      	ldr	r3, [pc, #164]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	2202      	movs	r2, #2
 80023bc:	4013      	ands	r3, r2
 80023be:	d1f1      	bne.n	80023a4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2204      	movs	r2, #4
 80023c6:	4013      	ands	r3, r2
 80023c8:	d100      	bne.n	80023cc <HAL_RCC_OscConfig+0x2a8>
 80023ca:	e0b5      	b.n	8002538 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023cc:	201f      	movs	r0, #31
 80023ce:	183b      	adds	r3, r7, r0
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d4:	4b21      	ldr	r3, [pc, #132]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80023d6:	69da      	ldr	r2, [r3, #28]
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	055b      	lsls	r3, r3, #21
 80023dc:	4013      	ands	r3, r2
 80023de:	d110      	bne.n	8002402 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e0:	4b1e      	ldr	r3, [pc, #120]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80023e2:	69da      	ldr	r2, [r3, #28]
 80023e4:	4b1d      	ldr	r3, [pc, #116]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80023e6:	2180      	movs	r1, #128	; 0x80
 80023e8:	0549      	lsls	r1, r1, #21
 80023ea:	430a      	orrs	r2, r1
 80023ec:	61da      	str	r2, [r3, #28]
 80023ee:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_RCC_OscConfig+0x338>)
 80023f0:	69da      	ldr	r2, [r3, #28]
 80023f2:	2380      	movs	r3, #128	; 0x80
 80023f4:	055b      	lsls	r3, r3, #21
 80023f6:	4013      	ands	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023fc:	183b      	adds	r3, r7, r0
 80023fe:	2201      	movs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002402:	4b19      	ldr	r3, [pc, #100]	; (8002468 <HAL_RCC_OscConfig+0x344>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4013      	ands	r3, r2
 800240c:	d11a      	bne.n	8002444 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800240e:	4b16      	ldr	r3, [pc, #88]	; (8002468 <HAL_RCC_OscConfig+0x344>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <HAL_RCC_OscConfig+0x344>)
 8002414:	2180      	movs	r1, #128	; 0x80
 8002416:	0049      	lsls	r1, r1, #1
 8002418:	430a      	orrs	r2, r1
 800241a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241c:	f7fe fdf2 	bl	8001004 <HAL_GetTick>
 8002420:	0003      	movs	r3, r0
 8002422:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002426:	f7fe fded 	bl	8001004 <HAL_GetTick>
 800242a:	0002      	movs	r2, r0
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b64      	cmp	r3, #100	; 0x64
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e1f5      	b.n	8002824 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_RCC_OscConfig+0x344>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4013      	ands	r3, r2
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d10f      	bne.n	800246c <HAL_RCC_OscConfig+0x348>
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <HAL_RCC_OscConfig+0x338>)
 800244e:	6a1a      	ldr	r2, [r3, #32]
 8002450:	4b02      	ldr	r3, [pc, #8]	; (800245c <HAL_RCC_OscConfig+0x338>)
 8002452:	2101      	movs	r1, #1
 8002454:	430a      	orrs	r2, r1
 8002456:	621a      	str	r2, [r3, #32]
 8002458:	e036      	b.n	80024c8 <HAL_RCC_OscConfig+0x3a4>
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	40021000 	.word	0x40021000
 8002460:	fffeffff 	.word	0xfffeffff
 8002464:	fffbffff 	.word	0xfffbffff
 8002468:	40007000 	.word	0x40007000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10c      	bne.n	800248e <HAL_RCC_OscConfig+0x36a>
 8002474:	4bca      	ldr	r3, [pc, #808]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 8002476:	6a1a      	ldr	r2, [r3, #32]
 8002478:	4bc9      	ldr	r3, [pc, #804]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 800247a:	2101      	movs	r1, #1
 800247c:	438a      	bics	r2, r1
 800247e:	621a      	str	r2, [r3, #32]
 8002480:	4bc7      	ldr	r3, [pc, #796]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 8002482:	6a1a      	ldr	r2, [r3, #32]
 8002484:	4bc6      	ldr	r3, [pc, #792]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 8002486:	2104      	movs	r1, #4
 8002488:	438a      	bics	r2, r1
 800248a:	621a      	str	r2, [r3, #32]
 800248c:	e01c      	b.n	80024c8 <HAL_RCC_OscConfig+0x3a4>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b05      	cmp	r3, #5
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x38c>
 8002496:	4bc2      	ldr	r3, [pc, #776]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 8002498:	6a1a      	ldr	r2, [r3, #32]
 800249a:	4bc1      	ldr	r3, [pc, #772]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 800249c:	2104      	movs	r1, #4
 800249e:	430a      	orrs	r2, r1
 80024a0:	621a      	str	r2, [r3, #32]
 80024a2:	4bbf      	ldr	r3, [pc, #764]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 80024a4:	6a1a      	ldr	r2, [r3, #32]
 80024a6:	4bbe      	ldr	r3, [pc, #760]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 80024a8:	2101      	movs	r1, #1
 80024aa:	430a      	orrs	r2, r1
 80024ac:	621a      	str	r2, [r3, #32]
 80024ae:	e00b      	b.n	80024c8 <HAL_RCC_OscConfig+0x3a4>
 80024b0:	4bbb      	ldr	r3, [pc, #748]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 80024b2:	6a1a      	ldr	r2, [r3, #32]
 80024b4:	4bba      	ldr	r3, [pc, #744]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 80024b6:	2101      	movs	r1, #1
 80024b8:	438a      	bics	r2, r1
 80024ba:	621a      	str	r2, [r3, #32]
 80024bc:	4bb8      	ldr	r3, [pc, #736]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 80024be:	6a1a      	ldr	r2, [r3, #32]
 80024c0:	4bb7      	ldr	r3, [pc, #732]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 80024c2:	2104      	movs	r1, #4
 80024c4:	438a      	bics	r2, r1
 80024c6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d014      	beq.n	80024fa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d0:	f7fe fd98 	bl	8001004 <HAL_GetTick>
 80024d4:	0003      	movs	r3, r0
 80024d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d8:	e009      	b.n	80024ee <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7fe fd93 	bl	8001004 <HAL_GetTick>
 80024de:	0002      	movs	r2, r0
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	4aaf      	ldr	r2, [pc, #700]	; (80027a4 <HAL_RCC_OscConfig+0x680>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e19a      	b.n	8002824 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ee:	4bac      	ldr	r3, [pc, #688]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	2202      	movs	r2, #2
 80024f4:	4013      	ands	r3, r2
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x3b6>
 80024f8:	e013      	b.n	8002522 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fa:	f7fe fd83 	bl	8001004 <HAL_GetTick>
 80024fe:	0003      	movs	r3, r0
 8002500:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002502:	e009      	b.n	8002518 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002504:	f7fe fd7e 	bl	8001004 <HAL_GetTick>
 8002508:	0002      	movs	r2, r0
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	4aa5      	ldr	r2, [pc, #660]	; (80027a4 <HAL_RCC_OscConfig+0x680>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e185      	b.n	8002824 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002518:	4ba1      	ldr	r3, [pc, #644]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	2202      	movs	r2, #2
 800251e:	4013      	ands	r3, r2
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002522:	231f      	movs	r3, #31
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d105      	bne.n	8002538 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252c:	4b9c      	ldr	r3, [pc, #624]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 800252e:	69da      	ldr	r2, [r3, #28]
 8002530:	4b9b      	ldr	r3, [pc, #620]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 8002532:	499d      	ldr	r1, [pc, #628]	; (80027a8 <HAL_RCC_OscConfig+0x684>)
 8002534:	400a      	ands	r2, r1
 8002536:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2210      	movs	r2, #16
 800253e:	4013      	ands	r3, r2
 8002540:	d063      	beq.n	800260a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d12a      	bne.n	80025a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800254a:	4b95      	ldr	r3, [pc, #596]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 800254c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800254e:	4b94      	ldr	r3, [pc, #592]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 8002550:	2104      	movs	r1, #4
 8002552:	430a      	orrs	r2, r1
 8002554:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002556:	4b92      	ldr	r3, [pc, #584]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 8002558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800255a:	4b91      	ldr	r3, [pc, #580]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 800255c:	2101      	movs	r1, #1
 800255e:	430a      	orrs	r2, r1
 8002560:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002562:	f7fe fd4f 	bl	8001004 <HAL_GetTick>
 8002566:	0003      	movs	r3, r0
 8002568:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800256c:	f7fe fd4a 	bl	8001004 <HAL_GetTick>
 8002570:	0002      	movs	r2, r0
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e152      	b.n	8002824 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800257e:	4b88      	ldr	r3, [pc, #544]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 8002580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002582:	2202      	movs	r2, #2
 8002584:	4013      	ands	r3, r2
 8002586:	d0f1      	beq.n	800256c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002588:	4b85      	ldr	r3, [pc, #532]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 800258a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258c:	22f8      	movs	r2, #248	; 0xf8
 800258e:	4393      	bics	r3, r2
 8002590:	0019      	movs	r1, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	00da      	lsls	r2, r3, #3
 8002598:	4b81      	ldr	r3, [pc, #516]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 800259a:	430a      	orrs	r2, r1
 800259c:	635a      	str	r2, [r3, #52]	; 0x34
 800259e:	e034      	b.n	800260a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	3305      	adds	r3, #5
 80025a6:	d111      	bne.n	80025cc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80025a8:	4b7d      	ldr	r3, [pc, #500]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 80025aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ac:	4b7c      	ldr	r3, [pc, #496]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 80025ae:	2104      	movs	r1, #4
 80025b0:	438a      	bics	r2, r1
 80025b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80025b4:	4b7a      	ldr	r3, [pc, #488]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 80025b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b8:	22f8      	movs	r2, #248	; 0xf8
 80025ba:	4393      	bics	r3, r2
 80025bc:	0019      	movs	r1, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	00da      	lsls	r2, r3, #3
 80025c4:	4b76      	ldr	r3, [pc, #472]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 80025c6:	430a      	orrs	r2, r1
 80025c8:	635a      	str	r2, [r3, #52]	; 0x34
 80025ca:	e01e      	b.n	800260a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80025cc:	4b74      	ldr	r3, [pc, #464]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 80025ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025d0:	4b73      	ldr	r3, [pc, #460]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 80025d2:	2104      	movs	r1, #4
 80025d4:	430a      	orrs	r2, r1
 80025d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80025d8:	4b71      	ldr	r3, [pc, #452]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 80025da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025dc:	4b70      	ldr	r3, [pc, #448]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 80025de:	2101      	movs	r1, #1
 80025e0:	438a      	bics	r2, r1
 80025e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e4:	f7fe fd0e 	bl	8001004 <HAL_GetTick>
 80025e8:	0003      	movs	r3, r0
 80025ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025ee:	f7fe fd09 	bl	8001004 <HAL_GetTick>
 80025f2:	0002      	movs	r2, r0
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e111      	b.n	8002824 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002600:	4b67      	ldr	r3, [pc, #412]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 8002602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002604:	2202      	movs	r2, #2
 8002606:	4013      	ands	r3, r2
 8002608:	d1f1      	bne.n	80025ee <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2220      	movs	r2, #32
 8002610:	4013      	ands	r3, r2
 8002612:	d05c      	beq.n	80026ce <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002614:	4b62      	ldr	r3, [pc, #392]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	220c      	movs	r2, #12
 800261a:	4013      	ands	r3, r2
 800261c:	2b0c      	cmp	r3, #12
 800261e:	d00e      	beq.n	800263e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002620:	4b5f      	ldr	r3, [pc, #380]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	220c      	movs	r2, #12
 8002626:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002628:	2b08      	cmp	r3, #8
 800262a:	d114      	bne.n	8002656 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800262c:	4b5c      	ldr	r3, [pc, #368]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	23c0      	movs	r3, #192	; 0xc0
 8002632:	025b      	lsls	r3, r3, #9
 8002634:	401a      	ands	r2, r3
 8002636:	23c0      	movs	r3, #192	; 0xc0
 8002638:	025b      	lsls	r3, r3, #9
 800263a:	429a      	cmp	r2, r3
 800263c:	d10b      	bne.n	8002656 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800263e:	4b58      	ldr	r3, [pc, #352]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 8002640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	025b      	lsls	r3, r3, #9
 8002646:	4013      	ands	r3, r2
 8002648:	d040      	beq.n	80026cc <HAL_RCC_OscConfig+0x5a8>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d03c      	beq.n	80026cc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e0e6      	b.n	8002824 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d01b      	beq.n	8002696 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800265e:	4b50      	ldr	r3, [pc, #320]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 8002660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002662:	4b4f      	ldr	r3, [pc, #316]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 8002664:	2180      	movs	r1, #128	; 0x80
 8002666:	0249      	lsls	r1, r1, #9
 8002668:	430a      	orrs	r2, r1
 800266a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266c:	f7fe fcca 	bl	8001004 <HAL_GetTick>
 8002670:	0003      	movs	r3, r0
 8002672:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002676:	f7fe fcc5 	bl	8001004 <HAL_GetTick>
 800267a:	0002      	movs	r2, r0
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e0cd      	b.n	8002824 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002688:	4b45      	ldr	r3, [pc, #276]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 800268a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800268c:	2380      	movs	r3, #128	; 0x80
 800268e:	025b      	lsls	r3, r3, #9
 8002690:	4013      	ands	r3, r2
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x552>
 8002694:	e01b      	b.n	80026ce <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002696:	4b42      	ldr	r3, [pc, #264]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 8002698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800269a:	4b41      	ldr	r3, [pc, #260]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 800269c:	4943      	ldr	r1, [pc, #268]	; (80027ac <HAL_RCC_OscConfig+0x688>)
 800269e:	400a      	ands	r2, r1
 80026a0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a2:	f7fe fcaf 	bl	8001004 <HAL_GetTick>
 80026a6:	0003      	movs	r3, r0
 80026a8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026ac:	f7fe fcaa 	bl	8001004 <HAL_GetTick>
 80026b0:	0002      	movs	r2, r0
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e0b2      	b.n	8002824 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80026be:	4b38      	ldr	r3, [pc, #224]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 80026c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026c2:	2380      	movs	r3, #128	; 0x80
 80026c4:	025b      	lsls	r3, r3, #9
 80026c6:	4013      	ands	r3, r2
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x588>
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80026cc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d100      	bne.n	80026d8 <HAL_RCC_OscConfig+0x5b4>
 80026d6:	e0a4      	b.n	8002822 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026d8:	4b31      	ldr	r3, [pc, #196]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	220c      	movs	r2, #12
 80026de:	4013      	ands	r3, r2
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d100      	bne.n	80026e6 <HAL_RCC_OscConfig+0x5c2>
 80026e4:	e078      	b.n	80027d8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d14c      	bne.n	8002788 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	4b2b      	ldr	r3, [pc, #172]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 80026f4:	492e      	ldr	r1, [pc, #184]	; (80027b0 <HAL_RCC_OscConfig+0x68c>)
 80026f6:	400a      	ands	r2, r1
 80026f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fa:	f7fe fc83 	bl	8001004 <HAL_GetTick>
 80026fe:	0003      	movs	r3, r0
 8002700:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002704:	f7fe fc7e 	bl	8001004 <HAL_GetTick>
 8002708:	0002      	movs	r2, r0
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e086      	b.n	8002824 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002716:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	049b      	lsls	r3, r3, #18
 800271e:	4013      	ands	r3, r2
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002722:	4b1f      	ldr	r3, [pc, #124]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 8002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002726:	220f      	movs	r2, #15
 8002728:	4393      	bics	r3, r2
 800272a:	0019      	movs	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 8002732:	430a      	orrs	r2, r1
 8002734:	62da      	str	r2, [r3, #44]	; 0x2c
 8002736:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4a1e      	ldr	r2, [pc, #120]	; (80027b4 <HAL_RCC_OscConfig+0x690>)
 800273c:	4013      	ands	r3, r2
 800273e:	0019      	movs	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	431a      	orrs	r2, r3
 800274a:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 800274c:	430a      	orrs	r2, r1
 800274e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002750:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 8002756:	2180      	movs	r1, #128	; 0x80
 8002758:	0449      	lsls	r1, r1, #17
 800275a:	430a      	orrs	r2, r1
 800275c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275e:	f7fe fc51 	bl	8001004 <HAL_GetTick>
 8002762:	0003      	movs	r3, r0
 8002764:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002768:	f7fe fc4c 	bl	8001004 <HAL_GetTick>
 800276c:	0002      	movs	r2, r0
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e054      	b.n	8002824 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	049b      	lsls	r3, r3, #18
 8002782:	4013      	ands	r3, r2
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x644>
 8002786:	e04c      	b.n	8002822 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <HAL_RCC_OscConfig+0x67c>)
 800278e:	4908      	ldr	r1, [pc, #32]	; (80027b0 <HAL_RCC_OscConfig+0x68c>)
 8002790:	400a      	ands	r2, r1
 8002792:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe fc36 	bl	8001004 <HAL_GetTick>
 8002798:	0003      	movs	r3, r0
 800279a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279c:	e015      	b.n	80027ca <HAL_RCC_OscConfig+0x6a6>
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	40021000 	.word	0x40021000
 80027a4:	00001388 	.word	0x00001388
 80027a8:	efffffff 	.word	0xefffffff
 80027ac:	fffeffff 	.word	0xfffeffff
 80027b0:	feffffff 	.word	0xfeffffff
 80027b4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b8:	f7fe fc24 	bl	8001004 <HAL_GetTick>
 80027bc:	0002      	movs	r2, r0
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e02c      	b.n	8002824 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ca:	4b18      	ldr	r3, [pc, #96]	; (800282c <HAL_RCC_OscConfig+0x708>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	2380      	movs	r3, #128	; 0x80
 80027d0:	049b      	lsls	r3, r3, #18
 80027d2:	4013      	ands	r3, r2
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x694>
 80027d6:	e024      	b.n	8002822 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e01f      	b.n	8002824 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80027e4:	4b11      	ldr	r3, [pc, #68]	; (800282c <HAL_RCC_OscConfig+0x708>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80027ea:	4b10      	ldr	r3, [pc, #64]	; (800282c <HAL_RCC_OscConfig+0x708>)
 80027ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ee:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	23c0      	movs	r3, #192	; 0xc0
 80027f4:	025b      	lsls	r3, r3, #9
 80027f6:	401a      	ands	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d10e      	bne.n	800281e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	220f      	movs	r2, #15
 8002804:	401a      	ands	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d107      	bne.n	800281e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	23f0      	movs	r3, #240	; 0xf0
 8002812:	039b      	lsls	r3, r3, #14
 8002814:	401a      	ands	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d001      	beq.n	8002822 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	0018      	movs	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	b008      	add	sp, #32
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021000 	.word	0x40021000

08002830 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0bf      	b.n	80029c4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002844:	4b61      	ldr	r3, [pc, #388]	; (80029cc <HAL_RCC_ClockConfig+0x19c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2201      	movs	r2, #1
 800284a:	4013      	ands	r3, r2
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d911      	bls.n	8002876 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002852:	4b5e      	ldr	r3, [pc, #376]	; (80029cc <HAL_RCC_ClockConfig+0x19c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2201      	movs	r2, #1
 8002858:	4393      	bics	r3, r2
 800285a:	0019      	movs	r1, r3
 800285c:	4b5b      	ldr	r3, [pc, #364]	; (80029cc <HAL_RCC_ClockConfig+0x19c>)
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002864:	4b59      	ldr	r3, [pc, #356]	; (80029cc <HAL_RCC_ClockConfig+0x19c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2201      	movs	r2, #1
 800286a:	4013      	ands	r3, r2
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d001      	beq.n	8002876 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0a6      	b.n	80029c4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2202      	movs	r2, #2
 800287c:	4013      	ands	r3, r2
 800287e:	d015      	beq.n	80028ac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2204      	movs	r2, #4
 8002886:	4013      	ands	r3, r2
 8002888:	d006      	beq.n	8002898 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800288a:	4b51      	ldr	r3, [pc, #324]	; (80029d0 <HAL_RCC_ClockConfig+0x1a0>)
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	4b50      	ldr	r3, [pc, #320]	; (80029d0 <HAL_RCC_ClockConfig+0x1a0>)
 8002890:	21e0      	movs	r1, #224	; 0xe0
 8002892:	00c9      	lsls	r1, r1, #3
 8002894:	430a      	orrs	r2, r1
 8002896:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002898:	4b4d      	ldr	r3, [pc, #308]	; (80029d0 <HAL_RCC_ClockConfig+0x1a0>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	22f0      	movs	r2, #240	; 0xf0
 800289e:	4393      	bics	r3, r2
 80028a0:	0019      	movs	r1, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	4b4a      	ldr	r3, [pc, #296]	; (80029d0 <HAL_RCC_ClockConfig+0x1a0>)
 80028a8:	430a      	orrs	r2, r1
 80028aa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2201      	movs	r2, #1
 80028b2:	4013      	ands	r3, r2
 80028b4:	d04c      	beq.n	8002950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	4b44      	ldr	r3, [pc, #272]	; (80029d0 <HAL_RCC_ClockConfig+0x1a0>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	029b      	lsls	r3, r3, #10
 80028c6:	4013      	ands	r3, r2
 80028c8:	d120      	bne.n	800290c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e07a      	b.n	80029c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d107      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d6:	4b3e      	ldr	r3, [pc, #248]	; (80029d0 <HAL_RCC_ClockConfig+0x1a0>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	2380      	movs	r3, #128	; 0x80
 80028dc:	049b      	lsls	r3, r3, #18
 80028de:	4013      	ands	r3, r2
 80028e0:	d114      	bne.n	800290c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e06e      	b.n	80029c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d107      	bne.n	80028fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028ee:	4b38      	ldr	r3, [pc, #224]	; (80029d0 <HAL_RCC_ClockConfig+0x1a0>)
 80028f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028f2:	2380      	movs	r3, #128	; 0x80
 80028f4:	025b      	lsls	r3, r3, #9
 80028f6:	4013      	ands	r3, r2
 80028f8:	d108      	bne.n	800290c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e062      	b.n	80029c4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fe:	4b34      	ldr	r3, [pc, #208]	; (80029d0 <HAL_RCC_ClockConfig+0x1a0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2202      	movs	r2, #2
 8002904:	4013      	ands	r3, r2
 8002906:	d101      	bne.n	800290c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e05b      	b.n	80029c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800290c:	4b30      	ldr	r3, [pc, #192]	; (80029d0 <HAL_RCC_ClockConfig+0x1a0>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2203      	movs	r2, #3
 8002912:	4393      	bics	r3, r2
 8002914:	0019      	movs	r1, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <HAL_RCC_ClockConfig+0x1a0>)
 800291c:	430a      	orrs	r2, r1
 800291e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002920:	f7fe fb70 	bl	8001004 <HAL_GetTick>
 8002924:	0003      	movs	r3, r0
 8002926:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002928:	e009      	b.n	800293e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800292a:	f7fe fb6b 	bl	8001004 <HAL_GetTick>
 800292e:	0002      	movs	r2, r0
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	4a27      	ldr	r2, [pc, #156]	; (80029d4 <HAL_RCC_ClockConfig+0x1a4>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d901      	bls.n	800293e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e042      	b.n	80029c4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293e:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCC_ClockConfig+0x1a0>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	220c      	movs	r2, #12
 8002944:	401a      	ands	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	429a      	cmp	r2, r3
 800294e:	d1ec      	bne.n	800292a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002950:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <HAL_RCC_ClockConfig+0x19c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2201      	movs	r2, #1
 8002956:	4013      	ands	r3, r2
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d211      	bcs.n	8002982 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295e:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <HAL_RCC_ClockConfig+0x19c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2201      	movs	r2, #1
 8002964:	4393      	bics	r3, r2
 8002966:	0019      	movs	r1, r3
 8002968:	4b18      	ldr	r3, [pc, #96]	; (80029cc <HAL_RCC_ClockConfig+0x19c>)
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002970:	4b16      	ldr	r3, [pc, #88]	; (80029cc <HAL_RCC_ClockConfig+0x19c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2201      	movs	r2, #1
 8002976:	4013      	ands	r3, r2
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d001      	beq.n	8002982 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e020      	b.n	80029c4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2204      	movs	r2, #4
 8002988:	4013      	ands	r3, r2
 800298a:	d009      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800298c:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <HAL_RCC_ClockConfig+0x1a0>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4a11      	ldr	r2, [pc, #68]	; (80029d8 <HAL_RCC_ClockConfig+0x1a8>)
 8002992:	4013      	ands	r3, r2
 8002994:	0019      	movs	r1, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <HAL_RCC_ClockConfig+0x1a0>)
 800299c:	430a      	orrs	r2, r1
 800299e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029a0:	f000 f820 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 80029a4:	0001      	movs	r1, r0
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <HAL_RCC_ClockConfig+0x1a0>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	220f      	movs	r2, #15
 80029ae:	4013      	ands	r3, r2
 80029b0:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <HAL_RCC_ClockConfig+0x1ac>)
 80029b2:	5cd3      	ldrb	r3, [r2, r3]
 80029b4:	000a      	movs	r2, r1
 80029b6:	40da      	lsrs	r2, r3
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCC_ClockConfig+0x1b0>)
 80029ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80029bc:	2003      	movs	r0, #3
 80029be:	f7fe fadb 	bl	8000f78 <HAL_InitTick>
  
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	0018      	movs	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b004      	add	sp, #16
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40022000 	.word	0x40022000
 80029d0:	40021000 	.word	0x40021000
 80029d4:	00001388 	.word	0x00001388
 80029d8:	fffff8ff 	.word	0xfffff8ff
 80029dc:	08005a08 	.word	0x08005a08
 80029e0:	20000000 	.word	0x20000000

080029e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b08f      	sub	sp, #60	; 0x3c
 80029e8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80029ea:	2314      	movs	r3, #20
 80029ec:	18fb      	adds	r3, r7, r3
 80029ee:	4a38      	ldr	r2, [pc, #224]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0xec>)
 80029f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80029f2:	c313      	stmia	r3!, {r0, r1, r4}
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	4a36      	ldr	r2, [pc, #216]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0xf0>)
 80029fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80029fe:	c313      	stmia	r3!, {r0, r1, r4}
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a08:	2300      	movs	r3, #0
 8002a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a10:	2300      	movs	r3, #0
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002a18:	4b2f      	ldr	r3, [pc, #188]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a20:	220c      	movs	r2, #12
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b0c      	cmp	r3, #12
 8002a26:	d047      	beq.n	8002ab8 <HAL_RCC_GetSysClockFreq+0xd4>
 8002a28:	d849      	bhi.n	8002abe <HAL_RCC_GetSysClockFreq+0xda>
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d002      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x50>
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d003      	beq.n	8002a3a <HAL_RCC_GetSysClockFreq+0x56>
 8002a32:	e044      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a34:	4b29      	ldr	r3, [pc, #164]	; (8002adc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a38:	e044      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3c:	0c9b      	lsrs	r3, r3, #18
 8002a3e:	220f      	movs	r2, #15
 8002a40:	4013      	ands	r3, r2
 8002a42:	2214      	movs	r2, #20
 8002a44:	18ba      	adds	r2, r7, r2
 8002a46:	5cd3      	ldrb	r3, [r2, r3]
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002a4a:	4b23      	ldr	r3, [pc, #140]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4e:	220f      	movs	r2, #15
 8002a50:	4013      	ands	r3, r2
 8002a52:	1d3a      	adds	r2, r7, #4
 8002a54:	5cd3      	ldrb	r3, [r2, r3]
 8002a56:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a5a:	23c0      	movs	r3, #192	; 0xc0
 8002a5c:	025b      	lsls	r3, r3, #9
 8002a5e:	401a      	ands	r2, r3
 8002a60:	2380      	movs	r3, #128	; 0x80
 8002a62:	025b      	lsls	r3, r3, #9
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d109      	bne.n	8002a7c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a6a:	481c      	ldr	r0, [pc, #112]	; (8002adc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a6c:	f7fd fb56 	bl	800011c <__udivsi3>
 8002a70:	0003      	movs	r3, r0
 8002a72:	001a      	movs	r2, r3
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	4353      	muls	r3, r2
 8002a78:	637b      	str	r3, [r7, #52]	; 0x34
 8002a7a:	e01a      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a7e:	23c0      	movs	r3, #192	; 0xc0
 8002a80:	025b      	lsls	r3, r3, #9
 8002a82:	401a      	ands	r2, r3
 8002a84:	23c0      	movs	r3, #192	; 0xc0
 8002a86:	025b      	lsls	r3, r3, #9
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d109      	bne.n	8002aa0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a8e:	4814      	ldr	r0, [pc, #80]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a90:	f7fd fb44 	bl	800011c <__udivsi3>
 8002a94:	0003      	movs	r3, r0
 8002a96:	001a      	movs	r2, r3
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	4353      	muls	r3, r2
 8002a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aa2:	480e      	ldr	r0, [pc, #56]	; (8002adc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aa4:	f7fd fb3a 	bl	800011c <__udivsi3>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	001a      	movs	r2, r3
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	4353      	muls	r3, r2
 8002ab0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ab6:	e005      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002ab8:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002aba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002abc:	e002      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002abe:	4b07      	ldr	r3, [pc, #28]	; (8002adc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ac0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ac2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b00f      	add	sp, #60	; 0x3c
 8002acc:	bd90      	pop	{r4, r7, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	080059e8 	.word	0x080059e8
 8002ad4:	080059f8 	.word	0x080059f8
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	007a1200 	.word	0x007a1200
 8002ae0:	02dc6c00 	.word	0x02dc6c00

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b02      	ldr	r3, [pc, #8]	; (8002af4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	0018      	movs	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	20000000 	.word	0x20000000

08002af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002afc:	f7ff fff2 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b00:	0001      	movs	r1, r0
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	0a1b      	lsrs	r3, r3, #8
 8002b08:	2207      	movs	r2, #7
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b0e:	5cd3      	ldrb	r3, [r2, r3]
 8002b10:	40d9      	lsrs	r1, r3
 8002b12:	000b      	movs	r3, r1
}    
 8002b14:	0018      	movs	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	08005a18 	.word	0x08005a18

08002b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	025b      	lsls	r3, r3, #9
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d100      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002b40:	e08e      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002b42:	2017      	movs	r0, #23
 8002b44:	183b      	adds	r3, r7, r0
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b4a:	4b67      	ldr	r3, [pc, #412]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	055b      	lsls	r3, r3, #21
 8002b52:	4013      	ands	r3, r2
 8002b54:	d110      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b56:	4b64      	ldr	r3, [pc, #400]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b58:	69da      	ldr	r2, [r3, #28]
 8002b5a:	4b63      	ldr	r3, [pc, #396]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	0549      	lsls	r1, r1, #21
 8002b60:	430a      	orrs	r2, r1
 8002b62:	61da      	str	r2, [r3, #28]
 8002b64:	4b60      	ldr	r3, [pc, #384]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b66:	69da      	ldr	r2, [r3, #28]
 8002b68:	2380      	movs	r3, #128	; 0x80
 8002b6a:	055b      	lsls	r3, r3, #21
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b72:	183b      	adds	r3, r7, r0
 8002b74:	2201      	movs	r2, #1
 8002b76:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b78:	4b5c      	ldr	r3, [pc, #368]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4013      	ands	r3, r2
 8002b82:	d11a      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b84:	4b59      	ldr	r3, [pc, #356]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b58      	ldr	r3, [pc, #352]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b8a:	2180      	movs	r1, #128	; 0x80
 8002b8c:	0049      	lsls	r1, r1, #1
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b92:	f7fe fa37 	bl	8001004 <HAL_GetTick>
 8002b96:	0003      	movs	r3, r0
 8002b98:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9a:	e008      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9c:	f7fe fa32 	bl	8001004 <HAL_GetTick>
 8002ba0:	0002      	movs	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e097      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bae:	4b4f      	ldr	r3, [pc, #316]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	2380      	movs	r3, #128	; 0x80
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bba:	4b4b      	ldr	r3, [pc, #300]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bbc:	6a1a      	ldr	r2, [r3, #32]
 8002bbe:	23c0      	movs	r3, #192	; 0xc0
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d034      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	23c0      	movs	r3, #192	; 0xc0
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d02c      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bdc:	4b42      	ldr	r3, [pc, #264]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	4a43      	ldr	r2, [pc, #268]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002be6:	4b40      	ldr	r3, [pc, #256]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002be8:	6a1a      	ldr	r2, [r3, #32]
 8002bea:	4b3f      	ldr	r3, [pc, #252]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bec:	2180      	movs	r1, #128	; 0x80
 8002bee:	0249      	lsls	r1, r1, #9
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bf4:	4b3c      	ldr	r3, [pc, #240]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bf6:	6a1a      	ldr	r2, [r3, #32]
 8002bf8:	4b3b      	ldr	r3, [pc, #236]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bfa:	493e      	ldr	r1, [pc, #248]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c00:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0e:	f7fe f9f9 	bl	8001004 <HAL_GetTick>
 8002c12:	0003      	movs	r3, r0
 8002c14:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c16:	e009      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c18:	f7fe f9f4 	bl	8001004 <HAL_GetTick>
 8002c1c:	0002      	movs	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	4a35      	ldr	r2, [pc, #212]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e058      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2c:	4b2e      	ldr	r3, [pc, #184]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	2202      	movs	r2, #2
 8002c32:	4013      	ands	r3, r2
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c36:	4b2c      	ldr	r3, [pc, #176]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	4a2d      	ldr	r2, [pc, #180]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	0019      	movs	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	4b28      	ldr	r3, [pc, #160]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c46:	430a      	orrs	r2, r1
 8002c48:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c4a:	2317      	movs	r3, #23
 8002c4c:	18fb      	adds	r3, r7, r3
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d105      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c54:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c56:	69da      	ldr	r2, [r3, #28]
 8002c58:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c5a:	4928      	ldr	r1, [pc, #160]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c5c:	400a      	ands	r2, r1
 8002c5e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2201      	movs	r2, #1
 8002c66:	4013      	ands	r3, r2
 8002c68:	d009      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	2203      	movs	r2, #3
 8002c70:	4393      	bics	r3, r2
 8002c72:	0019      	movs	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2220      	movs	r2, #32
 8002c84:	4013      	ands	r3, r2
 8002c86:	d009      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c88:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	2210      	movs	r2, #16
 8002c8e:	4393      	bics	r3, r2
 8002c90:	0019      	movs	r1, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	029b      	lsls	r3, r3, #10
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d009      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ca8:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	4393      	bics	r3, r2
 8002cb0:	0019      	movs	r1, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d009      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002cc8:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	2240      	movs	r2, #64	; 0x40
 8002cce:	4393      	bics	r3, r2
 8002cd0:	0019      	movs	r1, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691a      	ldr	r2, [r3, #16]
 8002cd6:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	0018      	movs	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b006      	add	sp, #24
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40007000 	.word	0x40007000
 8002cf0:	fffffcff 	.word	0xfffffcff
 8002cf4:	fffeffff 	.word	0xfffeffff
 8002cf8:	00001388 	.word	0x00001388
 8002cfc:	efffffff 	.word	0xefffffff

08002d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e042      	b.n	8002d98 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	223d      	movs	r2, #61	; 0x3d
 8002d16:	5c9b      	ldrb	r3, [r3, r2]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d107      	bne.n	8002d2e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	223c      	movs	r2, #60	; 0x3c
 8002d22:	2100      	movs	r1, #0
 8002d24:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f7fd ff39 	bl	8000ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	223d      	movs	r2, #61	; 0x3d
 8002d32:	2102      	movs	r1, #2
 8002d34:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	0019      	movs	r1, r3
 8002d40:	0010      	movs	r0, r2
 8002d42:	f000 fa83 	bl	800324c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2246      	movs	r2, #70	; 0x46
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	223e      	movs	r2, #62	; 0x3e
 8002d52:	2101      	movs	r1, #1
 8002d54:	5499      	strb	r1, [r3, r2]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	223f      	movs	r2, #63	; 0x3f
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	5499      	strb	r1, [r3, r2]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2240      	movs	r2, #64	; 0x40
 8002d62:	2101      	movs	r1, #1
 8002d64:	5499      	strb	r1, [r3, r2]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2241      	movs	r2, #65	; 0x41
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2242      	movs	r2, #66	; 0x42
 8002d72:	2101      	movs	r1, #1
 8002d74:	5499      	strb	r1, [r3, r2]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2243      	movs	r2, #67	; 0x43
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	5499      	strb	r1, [r3, r2]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2244      	movs	r2, #68	; 0x44
 8002d82:	2101      	movs	r1, #1
 8002d84:	5499      	strb	r1, [r3, r2]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2245      	movs	r2, #69	; 0x45
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	223d      	movs	r2, #61	; 0x3d
 8002d92:	2101      	movs	r1, #1
 8002d94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	0018      	movs	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b002      	add	sp, #8
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	223d      	movs	r2, #61	; 0x3d
 8002dac:	5c9b      	ldrb	r3, [r3, r2]
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d001      	beq.n	8002db8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e036      	b.n	8002e26 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	223d      	movs	r2, #61	; 0x3d
 8002dbc:	2102      	movs	r1, #2
 8002dbe:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2101      	movs	r1, #1
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a16      	ldr	r2, [pc, #88]	; (8002e30 <HAL_TIM_Base_Start_IT+0x90>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00a      	beq.n	8002df0 <HAL_TIM_Base_Start_IT+0x50>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	05db      	lsls	r3, r3, #23
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d004      	beq.n	8002df0 <HAL_TIM_Base_Start_IT+0x50>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a12      	ldr	r2, [pc, #72]	; (8002e34 <HAL_TIM_Base_Start_IT+0x94>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d111      	bne.n	8002e14 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2207      	movs	r2, #7
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b06      	cmp	r3, #6
 8002e00:	d010      	beq.n	8002e24 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e12:	e007      	b.n	8002e24 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2101      	movs	r1, #1
 8002e20:	430a      	orrs	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	0018      	movs	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b004      	add	sp, #16
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	40012c00 	.word	0x40012c00
 8002e34:	40000400 	.word	0x40000400

08002e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	2202      	movs	r2, #2
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d124      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2202      	movs	r2, #2
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d11d      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2203      	movs	r2, #3
 8002e62:	4252      	negs	r2, r2
 8002e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2203      	movs	r2, #3
 8002e74:	4013      	ands	r3, r2
 8002e76:	d004      	beq.n	8002e82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 f9ce 	bl	800321c <HAL_TIM_IC_CaptureCallback>
 8002e80:	e007      	b.n	8002e92 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	0018      	movs	r0, r3
 8002e86:	f000 f9c1 	bl	800320c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f000 f9cd 	bl	800322c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d125      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2204      	movs	r2, #4
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d11e      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2205      	movs	r2, #5
 8002eba:	4252      	negs	r2, r2
 8002ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	23c0      	movs	r3, #192	; 0xc0
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d004      	beq.n	8002edc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f000 f9a1 	bl	800321c <HAL_TIM_IC_CaptureCallback>
 8002eda:	e007      	b.n	8002eec <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f000 f994 	bl	800320c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f000 f9a0 	bl	800322c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	2208      	movs	r2, #8
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d124      	bne.n	8002f4a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2208      	movs	r2, #8
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d11d      	bne.n	8002f4a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2209      	movs	r2, #9
 8002f14:	4252      	negs	r2, r2
 8002f16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	2203      	movs	r2, #3
 8002f26:	4013      	ands	r3, r2
 8002f28:	d004      	beq.n	8002f34 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f000 f975 	bl	800321c <HAL_TIM_IC_CaptureCallback>
 8002f32:	e007      	b.n	8002f44 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	0018      	movs	r0, r3
 8002f38:	f000 f968 	bl	800320c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f000 f974 	bl	800322c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	2210      	movs	r2, #16
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b10      	cmp	r3, #16
 8002f56:	d125      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2210      	movs	r2, #16
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b10      	cmp	r3, #16
 8002f64:	d11e      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2211      	movs	r2, #17
 8002f6c:	4252      	negs	r2, r2
 8002f6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2208      	movs	r2, #8
 8002f74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69da      	ldr	r2, [r3, #28]
 8002f7c:	23c0      	movs	r3, #192	; 0xc0
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4013      	ands	r3, r2
 8002f82:	d004      	beq.n	8002f8e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	0018      	movs	r0, r3
 8002f88:	f000 f948 	bl	800321c <HAL_TIM_IC_CaptureCallback>
 8002f8c:	e007      	b.n	8002f9e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f000 f93b 	bl	800320c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f000 f947 	bl	800322c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	2201      	movs	r2, #1
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d10f      	bne.n	8002fd2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d108      	bne.n	8002fd2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	4252      	negs	r2, r2
 8002fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f7fd fcf1 	bl	80009b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	2280      	movs	r2, #128	; 0x80
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b80      	cmp	r3, #128	; 0x80
 8002fde:	d10f      	bne.n	8003000 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2280      	movs	r2, #128	; 0x80
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b80      	cmp	r3, #128	; 0x80
 8002fec:	d108      	bne.n	8003000 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2281      	movs	r2, #129	; 0x81
 8002ff4:	4252      	negs	r2, r2
 8002ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 fa96 	bl	800352c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	2240      	movs	r2, #64	; 0x40
 8003008:	4013      	ands	r3, r2
 800300a:	2b40      	cmp	r3, #64	; 0x40
 800300c:	d10f      	bne.n	800302e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	2240      	movs	r2, #64	; 0x40
 8003016:	4013      	ands	r3, r2
 8003018:	2b40      	cmp	r3, #64	; 0x40
 800301a:	d108      	bne.n	800302e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2241      	movs	r2, #65	; 0x41
 8003022:	4252      	negs	r2, r2
 8003024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	0018      	movs	r0, r3
 800302a:	f000 f907 	bl	800323c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	2220      	movs	r2, #32
 8003036:	4013      	ands	r3, r2
 8003038:	2b20      	cmp	r3, #32
 800303a:	d10f      	bne.n	800305c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	4013      	ands	r3, r2
 8003046:	2b20      	cmp	r3, #32
 8003048:	d108      	bne.n	800305c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2221      	movs	r2, #33	; 0x21
 8003050:	4252      	negs	r2, r2
 8003052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	0018      	movs	r0, r3
 8003058:	f000 fa60 	bl	800351c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800305c:	46c0      	nop			; (mov r8, r8)
 800305e:	46bd      	mov	sp, r7
 8003060:	b002      	add	sp, #8
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800306e:	230f      	movs	r3, #15
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	2200      	movs	r2, #0
 8003074:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	223c      	movs	r2, #60	; 0x3c
 800307a:	5c9b      	ldrb	r3, [r3, r2]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_TIM_ConfigClockSource+0x20>
 8003080:	2302      	movs	r3, #2
 8003082:	e0bc      	b.n	80031fe <HAL_TIM_ConfigClockSource+0x19a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	223c      	movs	r2, #60	; 0x3c
 8003088:	2101      	movs	r1, #1
 800308a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	223d      	movs	r2, #61	; 0x3d
 8003090:	2102      	movs	r1, #2
 8003092:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2277      	movs	r2, #119	; 0x77
 80030a0:	4393      	bics	r3, r2
 80030a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4a58      	ldr	r2, [pc, #352]	; (8003208 <HAL_TIM_ConfigClockSource+0x1a4>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2280      	movs	r2, #128	; 0x80
 80030ba:	0192      	lsls	r2, r2, #6
 80030bc:	4293      	cmp	r3, r2
 80030be:	d040      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0xde>
 80030c0:	2280      	movs	r2, #128	; 0x80
 80030c2:	0192      	lsls	r2, r2, #6
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d900      	bls.n	80030ca <HAL_TIM_ConfigClockSource+0x66>
 80030c8:	e088      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x178>
 80030ca:	2280      	movs	r2, #128	; 0x80
 80030cc:	0152      	lsls	r2, r2, #5
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d100      	bne.n	80030d4 <HAL_TIM_ConfigClockSource+0x70>
 80030d2:	e088      	b.n	80031e6 <HAL_TIM_ConfigClockSource+0x182>
 80030d4:	2280      	movs	r2, #128	; 0x80
 80030d6:	0152      	lsls	r2, r2, #5
 80030d8:	4293      	cmp	r3, r2
 80030da:	d900      	bls.n	80030de <HAL_TIM_ConfigClockSource+0x7a>
 80030dc:	e07e      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x178>
 80030de:	2b70      	cmp	r3, #112	; 0x70
 80030e0:	d018      	beq.n	8003114 <HAL_TIM_ConfigClockSource+0xb0>
 80030e2:	d900      	bls.n	80030e6 <HAL_TIM_ConfigClockSource+0x82>
 80030e4:	e07a      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x178>
 80030e6:	2b60      	cmp	r3, #96	; 0x60
 80030e8:	d04f      	beq.n	800318a <HAL_TIM_ConfigClockSource+0x126>
 80030ea:	d900      	bls.n	80030ee <HAL_TIM_ConfigClockSource+0x8a>
 80030ec:	e076      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x178>
 80030ee:	2b50      	cmp	r3, #80	; 0x50
 80030f0:	d03b      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x106>
 80030f2:	d900      	bls.n	80030f6 <HAL_TIM_ConfigClockSource+0x92>
 80030f4:	e072      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x178>
 80030f6:	2b40      	cmp	r3, #64	; 0x40
 80030f8:	d057      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0x146>
 80030fa:	d900      	bls.n	80030fe <HAL_TIM_ConfigClockSource+0x9a>
 80030fc:	e06e      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x178>
 80030fe:	2b30      	cmp	r3, #48	; 0x30
 8003100:	d063      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x166>
 8003102:	d86b      	bhi.n	80031dc <HAL_TIM_ConfigClockSource+0x178>
 8003104:	2b20      	cmp	r3, #32
 8003106:	d060      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x166>
 8003108:	d868      	bhi.n	80031dc <HAL_TIM_ConfigClockSource+0x178>
 800310a:	2b00      	cmp	r3, #0
 800310c:	d05d      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x166>
 800310e:	2b10      	cmp	r3, #16
 8003110:	d05b      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0x166>
 8003112:	e063      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	6899      	ldr	r1, [r3, #8]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f000 f982 	bl	800342c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2277      	movs	r2, #119	; 0x77
 8003134:	4313      	orrs	r3, r2
 8003136:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	609a      	str	r2, [r3, #8]
      break;
 8003140:	e052      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	6899      	ldr	r1, [r3, #8]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f000 f96b 	bl	800342c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2180      	movs	r1, #128	; 0x80
 8003162:	01c9      	lsls	r1, r1, #7
 8003164:	430a      	orrs	r2, r1
 8003166:	609a      	str	r2, [r3, #8]
      break;
 8003168:	e03e      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6859      	ldr	r1, [r3, #4]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	001a      	movs	r2, r3
 8003178:	f000 f8de 	bl	8003338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2150      	movs	r1, #80	; 0x50
 8003182:	0018      	movs	r0, r3
 8003184:	f000 f938 	bl	80033f8 <TIM_ITRx_SetConfig>
      break;
 8003188:	e02e      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	6859      	ldr	r1, [r3, #4]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	001a      	movs	r2, r3
 8003198:	f000 f8fc 	bl	8003394 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2160      	movs	r1, #96	; 0x60
 80031a2:	0018      	movs	r0, r3
 80031a4:	f000 f928 	bl	80033f8 <TIM_ITRx_SetConfig>
      break;
 80031a8:	e01e      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6859      	ldr	r1, [r3, #4]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	001a      	movs	r2, r3
 80031b8:	f000 f8be 	bl	8003338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2140      	movs	r1, #64	; 0x40
 80031c2:	0018      	movs	r0, r3
 80031c4:	f000 f918 	bl	80033f8 <TIM_ITRx_SetConfig>
      break;
 80031c8:	e00e      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	0019      	movs	r1, r3
 80031d4:	0010      	movs	r0, r2
 80031d6:	f000 f90f 	bl	80033f8 <TIM_ITRx_SetConfig>
      break;
 80031da:	e005      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80031dc:	230f      	movs	r3, #15
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	2201      	movs	r2, #1
 80031e2:	701a      	strb	r2, [r3, #0]
      break;
 80031e4:	e000      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80031e6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	223d      	movs	r2, #61	; 0x3d
 80031ec:	2101      	movs	r1, #1
 80031ee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	223c      	movs	r2, #60	; 0x3c
 80031f4:	2100      	movs	r1, #0
 80031f6:	5499      	strb	r1, [r3, r2]

  return status;
 80031f8:	230f      	movs	r3, #15
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	781b      	ldrb	r3, [r3, #0]
}
 80031fe:	0018      	movs	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	b004      	add	sp, #16
 8003204:	bd80      	pop	{r7, pc}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	ffff00ff 	.word	0xffff00ff

0800320c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	46bd      	mov	sp, r7
 8003218:	b002      	add	sp, #8
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003224:	46c0      	nop			; (mov r8, r8)
 8003226:	46bd      	mov	sp, r7
 8003228:	b002      	add	sp, #8
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b002      	add	sp, #8
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003244:	46c0      	nop			; (mov r8, r8)
 8003246:	46bd      	mov	sp, r7
 8003248:	b002      	add	sp, #8
 800324a:	bd80      	pop	{r7, pc}

0800324c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a30      	ldr	r2, [pc, #192]	; (8003320 <TIM_Base_SetConfig+0xd4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d008      	beq.n	8003276 <TIM_Base_SetConfig+0x2a>
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	2380      	movs	r3, #128	; 0x80
 8003268:	05db      	lsls	r3, r3, #23
 800326a:	429a      	cmp	r2, r3
 800326c:	d003      	beq.n	8003276 <TIM_Base_SetConfig+0x2a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a2c      	ldr	r2, [pc, #176]	; (8003324 <TIM_Base_SetConfig+0xd8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d108      	bne.n	8003288 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2270      	movs	r2, #112	; 0x70
 800327a:	4393      	bics	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a25      	ldr	r2, [pc, #148]	; (8003320 <TIM_Base_SetConfig+0xd4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d014      	beq.n	80032ba <TIM_Base_SetConfig+0x6e>
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	05db      	lsls	r3, r3, #23
 8003296:	429a      	cmp	r2, r3
 8003298:	d00f      	beq.n	80032ba <TIM_Base_SetConfig+0x6e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a21      	ldr	r2, [pc, #132]	; (8003324 <TIM_Base_SetConfig+0xd8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00b      	beq.n	80032ba <TIM_Base_SetConfig+0x6e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a20      	ldr	r2, [pc, #128]	; (8003328 <TIM_Base_SetConfig+0xdc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d007      	beq.n	80032ba <TIM_Base_SetConfig+0x6e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a1f      	ldr	r2, [pc, #124]	; (800332c <TIM_Base_SetConfig+0xe0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d003      	beq.n	80032ba <TIM_Base_SetConfig+0x6e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a1e      	ldr	r2, [pc, #120]	; (8003330 <TIM_Base_SetConfig+0xe4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d108      	bne.n	80032cc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <TIM_Base_SetConfig+0xe8>)
 80032be:	4013      	ands	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2280      	movs	r2, #128	; 0x80
 80032d0:	4393      	bics	r3, r2
 80032d2:	001a      	movs	r2, r3
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a0a      	ldr	r2, [pc, #40]	; (8003320 <TIM_Base_SetConfig+0xd4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <TIM_Base_SetConfig+0xbe>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a0b      	ldr	r2, [pc, #44]	; (800332c <TIM_Base_SetConfig+0xe0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d003      	beq.n	800330a <TIM_Base_SetConfig+0xbe>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a0a      	ldr	r2, [pc, #40]	; (8003330 <TIM_Base_SetConfig+0xe4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d103      	bne.n	8003312 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	615a      	str	r2, [r3, #20]
}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	b004      	add	sp, #16
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40012c00 	.word	0x40012c00
 8003324:	40000400 	.word	0x40000400
 8003328:	40002000 	.word	0x40002000
 800332c:	40014400 	.word	0x40014400
 8003330:	40014800 	.word	0x40014800
 8003334:	fffffcff 	.word	0xfffffcff

08003338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	2201      	movs	r2, #1
 8003350:	4393      	bics	r3, r2
 8003352:	001a      	movs	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	22f0      	movs	r2, #240	; 0xf0
 8003362:	4393      	bics	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	220a      	movs	r2, #10
 8003374:	4393      	bics	r3, r2
 8003376:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	621a      	str	r2, [r3, #32]
}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	b006      	add	sp, #24
 8003392:	bd80      	pop	{r7, pc}

08003394 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	2210      	movs	r2, #16
 80033a6:	4393      	bics	r3, r2
 80033a8:	001a      	movs	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	4a0d      	ldr	r2, [pc, #52]	; (80033f4 <TIM_TI2_ConfigInputStage+0x60>)
 80033be:	4013      	ands	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	031b      	lsls	r3, r3, #12
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	22a0      	movs	r2, #160	; 0xa0
 80033d0:	4393      	bics	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	621a      	str	r2, [r3, #32]
}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b006      	add	sp, #24
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	ffff0fff 	.word	0xffff0fff

080033f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2270      	movs	r2, #112	; 0x70
 800340c:	4393      	bics	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	2207      	movs	r2, #7
 8003418:	4313      	orrs	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	609a      	str	r2, [r3, #8]
}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	46bd      	mov	sp, r7
 8003426:	b004      	add	sp, #16
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	4a09      	ldr	r2, [pc, #36]	; (8003468 <TIM_ETR_SetConfig+0x3c>)
 8003444:	4013      	ands	r3, r2
 8003446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	021a      	lsls	r2, r3, #8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	431a      	orrs	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4313      	orrs	r3, r2
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	609a      	str	r2, [r3, #8]
}
 8003460:	46c0      	nop			; (mov r8, r8)
 8003462:	46bd      	mov	sp, r7
 8003464:	b006      	add	sp, #24
 8003466:	bd80      	pop	{r7, pc}
 8003468:	ffff00ff 	.word	0xffff00ff

0800346c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	223c      	movs	r2, #60	; 0x3c
 800347a:	5c9b      	ldrb	r3, [r3, r2]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003480:	2302      	movs	r3, #2
 8003482:	e042      	b.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	223c      	movs	r2, #60	; 0x3c
 8003488:	2101      	movs	r1, #1
 800348a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	223d      	movs	r2, #61	; 0x3d
 8003490:	2102      	movs	r1, #2
 8003492:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2270      	movs	r2, #112	; 0x70
 80034a8:	4393      	bics	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a14      	ldr	r2, [pc, #80]	; (8003514 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d00a      	beq.n	80034de <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	05db      	lsls	r3, r3, #23
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d004      	beq.n	80034de <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a0f      	ldr	r2, [pc, #60]	; (8003518 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d10c      	bne.n	80034f8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2280      	movs	r2, #128	; 0x80
 80034e2:	4393      	bics	r3, r2
 80034e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	223d      	movs	r2, #61	; 0x3d
 80034fc:	2101      	movs	r1, #1
 80034fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	223c      	movs	r2, #60	; 0x3c
 8003504:	2100      	movs	r1, #0
 8003506:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	0018      	movs	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	b004      	add	sp, #16
 8003510:	bd80      	pop	{r7, pc}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	40012c00 	.word	0x40012c00
 8003518:	40000400 	.word	0x40000400

0800351c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003524:	46c0      	nop			; (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	b002      	add	sp, #8
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003534:	46c0      	nop			; (mov r8, r8)
 8003536:	46bd      	mov	sp, r7
 8003538:	b002      	add	sp, #8
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e044      	b.n	80035d8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003552:	2b00      	cmp	r3, #0
 8003554:	d107      	bne.n	8003566 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2274      	movs	r2, #116	; 0x74
 800355a:	2100      	movs	r1, #0
 800355c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	0018      	movs	r0, r3
 8003562:	f7fd fb45 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2224      	movs	r2, #36	; 0x24
 800356a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2101      	movs	r1, #1
 8003578:	438a      	bics	r2, r1
 800357a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	0018      	movs	r0, r3
 8003580:	f000 fc2e 	bl	8003de0 <UART_SetConfig>
 8003584:	0003      	movs	r3, r0
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e024      	b.n	80035d8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	0018      	movs	r0, r3
 800359a:	f000 fd61 	bl	8004060 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	490d      	ldr	r1, [pc, #52]	; (80035e0 <HAL_UART_Init+0xa4>)
 80035aa:	400a      	ands	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	212a      	movs	r1, #42	; 0x2a
 80035ba:	438a      	bics	r2, r1
 80035bc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2101      	movs	r1, #1
 80035ca:	430a      	orrs	r2, r1
 80035cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	0018      	movs	r0, r3
 80035d2:	f000 fdf9 	bl	80041c8 <UART_CheckIdleState>
 80035d6:	0003      	movs	r3, r0
}
 80035d8:	0018      	movs	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	b002      	add	sp, #8
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	ffffb7ff 	.word	0xffffb7ff

080035e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08a      	sub	sp, #40	; 0x28
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	1dbb      	adds	r3, r7, #6
 80035f2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	d000      	beq.n	80035fe <HAL_UART_Transmit+0x1a>
 80035fc:	e096      	b.n	800372c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_UART_Transmit+0x28>
 8003604:	1dbb      	adds	r3, r7, #6
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e08e      	b.n	800372e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	015b      	lsls	r3, r3, #5
 8003618:	429a      	cmp	r2, r3
 800361a:	d109      	bne.n	8003630 <HAL_UART_Transmit+0x4c>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d105      	bne.n	8003630 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2201      	movs	r2, #1
 8003628:	4013      	ands	r3, r2
 800362a:	d001      	beq.n	8003630 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e07e      	b.n	800372e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2274      	movs	r2, #116	; 0x74
 8003634:	5c9b      	ldrb	r3, [r3, r2]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <HAL_UART_Transmit+0x5a>
 800363a:	2302      	movs	r3, #2
 800363c:	e077      	b.n	800372e <HAL_UART_Transmit+0x14a>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2274      	movs	r2, #116	; 0x74
 8003642:	2101      	movs	r1, #1
 8003644:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2280      	movs	r2, #128	; 0x80
 800364a:	2100      	movs	r1, #0
 800364c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2221      	movs	r2, #33	; 0x21
 8003652:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003654:	f7fd fcd6 	bl	8001004 <HAL_GetTick>
 8003658:	0003      	movs	r3, r0
 800365a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	1dba      	adds	r2, r7, #6
 8003660:	2150      	movs	r1, #80	; 0x50
 8003662:	8812      	ldrh	r2, [r2, #0]
 8003664:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1dba      	adds	r2, r7, #6
 800366a:	2152      	movs	r1, #82	; 0x52
 800366c:	8812      	ldrh	r2, [r2, #0]
 800366e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	015b      	lsls	r3, r3, #5
 8003678:	429a      	cmp	r2, r3
 800367a:	d108      	bne.n	800368e <HAL_UART_Transmit+0xaa>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d104      	bne.n	800368e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003684:	2300      	movs	r3, #0
 8003686:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	61bb      	str	r3, [r7, #24]
 800368c:	e003      	b.n	8003696 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003692:	2300      	movs	r3, #0
 8003694:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2274      	movs	r2, #116	; 0x74
 800369a:	2100      	movs	r1, #0
 800369c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800369e:	e02d      	b.n	80036fc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	0013      	movs	r3, r2
 80036aa:	2200      	movs	r2, #0
 80036ac:	2180      	movs	r1, #128	; 0x80
 80036ae:	f000 fdd3 	bl	8004258 <UART_WaitOnFlagUntilTimeout>
 80036b2:	1e03      	subs	r3, r0, #0
 80036b4:	d001      	beq.n	80036ba <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e039      	b.n	800372e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10b      	bne.n	80036d8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	881a      	ldrh	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	05d2      	lsls	r2, r2, #23
 80036ca:	0dd2      	lsrs	r2, r2, #23
 80036cc:	b292      	uxth	r2, r2
 80036ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	3302      	adds	r3, #2
 80036d4:	61bb      	str	r3, [r7, #24]
 80036d6:	e008      	b.n	80036ea <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	781a      	ldrb	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	b292      	uxth	r2, r2
 80036e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	3301      	adds	r3, #1
 80036e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2252      	movs	r2, #82	; 0x52
 80036ee:	5a9b      	ldrh	r3, [r3, r2]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b299      	uxth	r1, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2252      	movs	r2, #82	; 0x52
 80036fa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2252      	movs	r2, #82	; 0x52
 8003700:	5a9b      	ldrh	r3, [r3, r2]
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1cb      	bne.n	80036a0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	0013      	movs	r3, r2
 8003712:	2200      	movs	r2, #0
 8003714:	2140      	movs	r1, #64	; 0x40
 8003716:	f000 fd9f 	bl	8004258 <UART_WaitOnFlagUntilTimeout>
 800371a:	1e03      	subs	r3, r0, #0
 800371c:	d001      	beq.n	8003722 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e005      	b.n	800372e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2220      	movs	r2, #32
 8003726:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	e000      	b.n	800372e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800372c:	2302      	movs	r3, #2
  }
}
 800372e:	0018      	movs	r0, r3
 8003730:	46bd      	mov	sp, r7
 8003732:	b008      	add	sp, #32
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b088      	sub	sp, #32
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	1dbb      	adds	r3, r7, #6
 8003742:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003748:	2b20      	cmp	r3, #32
 800374a:	d150      	bne.n	80037ee <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_UART_Receive_IT+0x24>
 8003752:	1dbb      	adds	r3, r7, #6
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e048      	b.n	80037f0 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	015b      	lsls	r3, r3, #5
 8003766:	429a      	cmp	r2, r3
 8003768:	d109      	bne.n	800377e <HAL_UART_Receive_IT+0x48>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d105      	bne.n	800377e <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2201      	movs	r2, #1
 8003776:	4013      	ands	r3, r2
 8003778:	d001      	beq.n	800377e <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e038      	b.n	80037f0 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2274      	movs	r2, #116	; 0x74
 8003782:	5c9b      	ldrb	r3, [r3, r2]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UART_Receive_IT+0x56>
 8003788:	2302      	movs	r3, #2
 800378a:	e031      	b.n	80037f0 <HAL_UART_Receive_IT+0xba>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2274      	movs	r2, #116	; 0x74
 8003790:	2101      	movs	r1, #1
 8003792:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	2380      	movs	r3, #128	; 0x80
 80037a2:	041b      	lsls	r3, r3, #16
 80037a4:	4013      	ands	r3, r2
 80037a6:	d019      	beq.n	80037dc <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a8:	f3ef 8310 	mrs	r3, PRIMASK
 80037ac:	613b      	str	r3, [r7, #16]
  return(result);
 80037ae:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	2301      	movs	r3, #1
 80037b4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f383 8810 	msr	PRIMASK, r3
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2180      	movs	r1, #128	; 0x80
 80037ca:	04c9      	lsls	r1, r1, #19
 80037cc:	430a      	orrs	r2, r1
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	f383 8810 	msr	PRIMASK, r3
}
 80037da:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037dc:	1dbb      	adds	r3, r7, #6
 80037de:	881a      	ldrh	r2, [r3, #0]
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	0018      	movs	r0, r3
 80037e6:	f000 fdfb 	bl	80043e0 <UART_Start_Receive_IT>
 80037ea:	0003      	movs	r3, r0
 80037ec:	e000      	b.n	80037f0 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
  }
}
 80037f0:	0018      	movs	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	b008      	add	sp, #32
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b0ab      	sub	sp, #172	; 0xac
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	22a4      	movs	r2, #164	; 0xa4
 8003808:	18b9      	adds	r1, r7, r2
 800380a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	20a0      	movs	r0, #160	; 0xa0
 8003814:	1839      	adds	r1, r7, r0
 8003816:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	219c      	movs	r1, #156	; 0x9c
 8003820:	1879      	adds	r1, r7, r1
 8003822:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003824:	0011      	movs	r1, r2
 8003826:	18bb      	adds	r3, r7, r2
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a99      	ldr	r2, [pc, #612]	; (8003a90 <HAL_UART_IRQHandler+0x298>)
 800382c:	4013      	ands	r3, r2
 800382e:	2298      	movs	r2, #152	; 0x98
 8003830:	18bc      	adds	r4, r7, r2
 8003832:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003834:	18bb      	adds	r3, r7, r2
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d114      	bne.n	8003866 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800383c:	187b      	adds	r3, r7, r1
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2220      	movs	r2, #32
 8003842:	4013      	ands	r3, r2
 8003844:	d00f      	beq.n	8003866 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003846:	183b      	adds	r3, r7, r0
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2220      	movs	r2, #32
 800384c:	4013      	ands	r3, r2
 800384e:	d00a      	beq.n	8003866 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003854:	2b00      	cmp	r3, #0
 8003856:	d100      	bne.n	800385a <HAL_UART_IRQHandler+0x62>
 8003858:	e296      	b.n	8003d88 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	0010      	movs	r0, r2
 8003862:	4798      	blx	r3
      }
      return;
 8003864:	e290      	b.n	8003d88 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003866:	2398      	movs	r3, #152	; 0x98
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d100      	bne.n	8003872 <HAL_UART_IRQHandler+0x7a>
 8003870:	e114      	b.n	8003a9c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003872:	239c      	movs	r3, #156	; 0x9c
 8003874:	18fb      	adds	r3, r7, r3
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2201      	movs	r2, #1
 800387a:	4013      	ands	r3, r2
 800387c:	d106      	bne.n	800388c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800387e:	23a0      	movs	r3, #160	; 0xa0
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a83      	ldr	r2, [pc, #524]	; (8003a94 <HAL_UART_IRQHandler+0x29c>)
 8003886:	4013      	ands	r3, r2
 8003888:	d100      	bne.n	800388c <HAL_UART_IRQHandler+0x94>
 800388a:	e107      	b.n	8003a9c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800388c:	23a4      	movs	r3, #164	; 0xa4
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2201      	movs	r2, #1
 8003894:	4013      	ands	r3, r2
 8003896:	d012      	beq.n	80038be <HAL_UART_IRQHandler+0xc6>
 8003898:	23a0      	movs	r3, #160	; 0xa0
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	4013      	ands	r3, r2
 80038a4:	d00b      	beq.n	80038be <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2201      	movs	r2, #1
 80038ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2280      	movs	r2, #128	; 0x80
 80038b2:	589b      	ldr	r3, [r3, r2]
 80038b4:	2201      	movs	r2, #1
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2180      	movs	r1, #128	; 0x80
 80038bc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038be:	23a4      	movs	r3, #164	; 0xa4
 80038c0:	18fb      	adds	r3, r7, r3
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2202      	movs	r2, #2
 80038c6:	4013      	ands	r3, r2
 80038c8:	d011      	beq.n	80038ee <HAL_UART_IRQHandler+0xf6>
 80038ca:	239c      	movs	r3, #156	; 0x9c
 80038cc:	18fb      	adds	r3, r7, r3
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2201      	movs	r2, #1
 80038d2:	4013      	ands	r3, r2
 80038d4:	d00b      	beq.n	80038ee <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2202      	movs	r2, #2
 80038dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2280      	movs	r2, #128	; 0x80
 80038e2:	589b      	ldr	r3, [r3, r2]
 80038e4:	2204      	movs	r2, #4
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2180      	movs	r1, #128	; 0x80
 80038ec:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038ee:	23a4      	movs	r3, #164	; 0xa4
 80038f0:	18fb      	adds	r3, r7, r3
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2204      	movs	r2, #4
 80038f6:	4013      	ands	r3, r2
 80038f8:	d011      	beq.n	800391e <HAL_UART_IRQHandler+0x126>
 80038fa:	239c      	movs	r3, #156	; 0x9c
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2201      	movs	r2, #1
 8003902:	4013      	ands	r3, r2
 8003904:	d00b      	beq.n	800391e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2204      	movs	r2, #4
 800390c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2280      	movs	r2, #128	; 0x80
 8003912:	589b      	ldr	r3, [r3, r2]
 8003914:	2202      	movs	r2, #2
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2180      	movs	r1, #128	; 0x80
 800391c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800391e:	23a4      	movs	r3, #164	; 0xa4
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2208      	movs	r2, #8
 8003926:	4013      	ands	r3, r2
 8003928:	d017      	beq.n	800395a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800392a:	23a0      	movs	r3, #160	; 0xa0
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2220      	movs	r2, #32
 8003932:	4013      	ands	r3, r2
 8003934:	d105      	bne.n	8003942 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003936:	239c      	movs	r3, #156	; 0x9c
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2201      	movs	r2, #1
 800393e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003940:	d00b      	beq.n	800395a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2208      	movs	r2, #8
 8003948:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2280      	movs	r2, #128	; 0x80
 800394e:	589b      	ldr	r3, [r3, r2]
 8003950:	2208      	movs	r2, #8
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2180      	movs	r1, #128	; 0x80
 8003958:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800395a:	23a4      	movs	r3, #164	; 0xa4
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	2380      	movs	r3, #128	; 0x80
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	4013      	ands	r3, r2
 8003966:	d013      	beq.n	8003990 <HAL_UART_IRQHandler+0x198>
 8003968:	23a0      	movs	r3, #160	; 0xa0
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	2380      	movs	r3, #128	; 0x80
 8003970:	04db      	lsls	r3, r3, #19
 8003972:	4013      	ands	r3, r2
 8003974:	d00c      	beq.n	8003990 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2280      	movs	r2, #128	; 0x80
 800397c:	0112      	lsls	r2, r2, #4
 800397e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2280      	movs	r2, #128	; 0x80
 8003984:	589b      	ldr	r3, [r3, r2]
 8003986:	2220      	movs	r2, #32
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2180      	movs	r1, #128	; 0x80
 800398e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2280      	movs	r2, #128	; 0x80
 8003994:	589b      	ldr	r3, [r3, r2]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d100      	bne.n	800399c <HAL_UART_IRQHandler+0x1a4>
 800399a:	e1f7      	b.n	8003d8c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800399c:	23a4      	movs	r3, #164	; 0xa4
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2220      	movs	r2, #32
 80039a4:	4013      	ands	r3, r2
 80039a6:	d00e      	beq.n	80039c6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039a8:	23a0      	movs	r3, #160	; 0xa0
 80039aa:	18fb      	adds	r3, r7, r3
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2220      	movs	r2, #32
 80039b0:	4013      	ands	r3, r2
 80039b2:	d008      	beq.n	80039c6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d004      	beq.n	80039c6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	0010      	movs	r0, r2
 80039c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	589b      	ldr	r3, [r3, r2]
 80039cc:	2194      	movs	r1, #148	; 0x94
 80039ce:	187a      	adds	r2, r7, r1
 80039d0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2240      	movs	r2, #64	; 0x40
 80039da:	4013      	ands	r3, r2
 80039dc:	2b40      	cmp	r3, #64	; 0x40
 80039de:	d004      	beq.n	80039ea <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039e0:	187b      	adds	r3, r7, r1
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2228      	movs	r2, #40	; 0x28
 80039e6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039e8:	d047      	beq.n	8003a7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	0018      	movs	r0, r3
 80039ee:	f000 fda7 	bl	8004540 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2240      	movs	r2, #64	; 0x40
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b40      	cmp	r3, #64	; 0x40
 80039fe:	d137      	bne.n	8003a70 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a00:	f3ef 8310 	mrs	r3, PRIMASK
 8003a04:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003a06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a08:	2090      	movs	r0, #144	; 0x90
 8003a0a:	183a      	adds	r2, r7, r0
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	2301      	movs	r3, #1
 8003a10:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a14:	f383 8810 	msr	PRIMASK, r3
}
 8003a18:	46c0      	nop			; (mov r8, r8)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2140      	movs	r1, #64	; 0x40
 8003a26:	438a      	bics	r2, r1
 8003a28:	609a      	str	r2, [r3, #8]
 8003a2a:	183b      	adds	r3, r7, r0
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a32:	f383 8810 	msr	PRIMASK, r3
}
 8003a36:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d012      	beq.n	8003a66 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a44:	4a14      	ldr	r2, [pc, #80]	; (8003a98 <HAL_UART_IRQHandler+0x2a0>)
 8003a46:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f7fe f8b3 	bl	8001bb8 <HAL_DMA_Abort_IT>
 8003a52:	1e03      	subs	r3, r0, #0
 8003a54:	d01a      	beq.n	8003a8c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a60:	0018      	movs	r0, r3
 8003a62:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a64:	e012      	b.n	8003a8c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f000 f9a5 	bl	8003db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6e:	e00d      	b.n	8003a8c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 f9a0 	bl	8003db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a78:	e008      	b.n	8003a8c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f000 f99b 	bl	8003db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2280      	movs	r2, #128	; 0x80
 8003a86:	2100      	movs	r1, #0
 8003a88:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003a8a:	e17f      	b.n	8003d8c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	46c0      	nop			; (mov r8, r8)
    return;
 8003a8e:	e17d      	b.n	8003d8c <HAL_UART_IRQHandler+0x594>
 8003a90:	0000080f 	.word	0x0000080f
 8003a94:	04000120 	.word	0x04000120
 8003a98:	08004605 	.word	0x08004605

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d000      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x2ae>
 8003aa4:	e131      	b.n	8003d0a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003aa6:	23a4      	movs	r3, #164	; 0xa4
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2210      	movs	r2, #16
 8003aae:	4013      	ands	r3, r2
 8003ab0:	d100      	bne.n	8003ab4 <HAL_UART_IRQHandler+0x2bc>
 8003ab2:	e12a      	b.n	8003d0a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ab4:	23a0      	movs	r3, #160	; 0xa0
 8003ab6:	18fb      	adds	r3, r7, r3
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2210      	movs	r2, #16
 8003abc:	4013      	ands	r3, r2
 8003abe:	d100      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x2ca>
 8003ac0:	e123      	b.n	8003d0a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2210      	movs	r2, #16
 8003ac8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2240      	movs	r2, #64	; 0x40
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b40      	cmp	r3, #64	; 0x40
 8003ad6:	d000      	beq.n	8003ada <HAL_UART_IRQHandler+0x2e2>
 8003ad8:	e09b      	b.n	8003c12 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	217e      	movs	r1, #126	; 0x7e
 8003ae4:	187b      	adds	r3, r7, r1
 8003ae6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003ae8:	187b      	adds	r3, r7, r1
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d100      	bne.n	8003af2 <HAL_UART_IRQHandler+0x2fa>
 8003af0:	e14e      	b.n	8003d90 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2258      	movs	r2, #88	; 0x58
 8003af6:	5a9b      	ldrh	r3, [r3, r2]
 8003af8:	187a      	adds	r2, r7, r1
 8003afa:	8812      	ldrh	r2, [r2, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d300      	bcc.n	8003b02 <HAL_UART_IRQHandler+0x30a>
 8003b00:	e146      	b.n	8003d90 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	187a      	adds	r2, r7, r1
 8003b06:	215a      	movs	r1, #90	; 0x5a
 8003b08:	8812      	ldrh	r2, [r2, #0]
 8003b0a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	d06e      	beq.n	8003bf4 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b16:	f3ef 8310 	mrs	r3, PRIMASK
 8003b1a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b20:	2301      	movs	r3, #1
 8003b22:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b26:	f383 8810 	msr	PRIMASK, r3
}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	499a      	ldr	r1, [pc, #616]	; (8003da0 <HAL_UART_IRQHandler+0x5a8>)
 8003b38:	400a      	ands	r2, r1
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b3e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b42:	f383 8810 	msr	PRIMASK, r3
}
 8003b46:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b48:	f3ef 8310 	mrs	r3, PRIMASK
 8003b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b50:	677b      	str	r3, [r7, #116]	; 0x74
 8003b52:	2301      	movs	r3, #1
 8003b54:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b58:	f383 8810 	msr	PRIMASK, r3
}
 8003b5c:	46c0      	nop			; (mov r8, r8)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2101      	movs	r1, #1
 8003b6a:	438a      	bics	r2, r1
 8003b6c:	609a      	str	r2, [r3, #8]
 8003b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b70:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b74:	f383 8810 	msr	PRIMASK, r3
}
 8003b78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b7e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b82:	673b      	str	r3, [r7, #112]	; 0x70
 8003b84:	2301      	movs	r3, #1
 8003b86:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8a:	f383 8810 	msr	PRIMASK, r3
}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2140      	movs	r1, #64	; 0x40
 8003b9c:	438a      	bics	r2, r1
 8003b9e:	609a      	str	r2, [r3, #8]
 8003ba0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ba2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ba6:	f383 8810 	msr	PRIMASK, r3
}
 8003baa:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bbc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bc8:	f383 8810 	msr	PRIMASK, r3
}
 8003bcc:	46c0      	nop			; (mov r8, r8)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2110      	movs	r1, #16
 8003bda:	438a      	bics	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be0:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003be4:	f383 8810 	msr	PRIMASK, r3
}
 8003be8:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f7fd ffaa 	bl	8001b48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2258      	movs	r2, #88	; 0x58
 8003bf8:	5a9a      	ldrh	r2, [r3, r2]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	215a      	movs	r1, #90	; 0x5a
 8003bfe:	5a5b      	ldrh	r3, [r3, r1]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	0011      	movs	r1, r2
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f000 f8dc 	bl	8003dc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c10:	e0be      	b.n	8003d90 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2258      	movs	r2, #88	; 0x58
 8003c16:	5a99      	ldrh	r1, [r3, r2]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	225a      	movs	r2, #90	; 0x5a
 8003c1c:	5a9b      	ldrh	r3, [r3, r2]
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	208e      	movs	r0, #142	; 0x8e
 8003c22:	183b      	adds	r3, r7, r0
 8003c24:	1a8a      	subs	r2, r1, r2
 8003c26:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	225a      	movs	r2, #90	; 0x5a
 8003c2c:	5a9b      	ldrh	r3, [r3, r2]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d100      	bne.n	8003c36 <HAL_UART_IRQHandler+0x43e>
 8003c34:	e0ae      	b.n	8003d94 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8003c36:	183b      	adds	r3, r7, r0
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d100      	bne.n	8003c40 <HAL_UART_IRQHandler+0x448>
 8003c3e:	e0a9      	b.n	8003d94 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c40:	f3ef 8310 	mrs	r3, PRIMASK
 8003c44:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c46:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c48:	2488      	movs	r4, #136	; 0x88
 8003c4a:	193a      	adds	r2, r7, r4
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	2301      	movs	r3, #1
 8003c50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f383 8810 	msr	PRIMASK, r3
}
 8003c58:	46c0      	nop			; (mov r8, r8)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	494f      	ldr	r1, [pc, #316]	; (8003da4 <HAL_UART_IRQHandler+0x5ac>)
 8003c66:	400a      	ands	r2, r1
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	193b      	adds	r3, r7, r4
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f383 8810 	msr	PRIMASK, r3
}
 8003c76:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c78:	f3ef 8310 	mrs	r3, PRIMASK
 8003c7c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c7e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c80:	2484      	movs	r4, #132	; 0x84
 8003c82:	193a      	adds	r2, r7, r4
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	2301      	movs	r3, #1
 8003c88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f383 8810 	msr	PRIMASK, r3
}
 8003c90:	46c0      	nop			; (mov r8, r8)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	438a      	bics	r2, r1
 8003ca0:	609a      	str	r2, [r3, #8]
 8003ca2:	193b      	adds	r3, r7, r4
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	f383 8810 	msr	PRIMASK, r3
}
 8003cae:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cca:	2480      	movs	r4, #128	; 0x80
 8003ccc:	193a      	adds	r2, r7, r4
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd6:	f383 8810 	msr	PRIMASK, r3
}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2110      	movs	r1, #16
 8003ce8:	438a      	bics	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	193b      	adds	r3, r7, r4
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf4:	f383 8810 	msr	PRIMASK, r3
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cfa:	183b      	adds	r3, r7, r0
 8003cfc:	881a      	ldrh	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	0011      	movs	r1, r2
 8003d02:	0018      	movs	r0, r3
 8003d04:	f000 f860 	bl	8003dc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d08:	e044      	b.n	8003d94 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d0a:	23a4      	movs	r3, #164	; 0xa4
 8003d0c:	18fb      	adds	r3, r7, r3
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	035b      	lsls	r3, r3, #13
 8003d14:	4013      	ands	r3, r2
 8003d16:	d010      	beq.n	8003d3a <HAL_UART_IRQHandler+0x542>
 8003d18:	239c      	movs	r3, #156	; 0x9c
 8003d1a:	18fb      	adds	r3, r7, r3
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	2380      	movs	r3, #128	; 0x80
 8003d20:	03db      	lsls	r3, r3, #15
 8003d22:	4013      	ands	r3, r2
 8003d24:	d009      	beq.n	8003d3a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2280      	movs	r2, #128	; 0x80
 8003d2c:	0352      	lsls	r2, r2, #13
 8003d2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	0018      	movs	r0, r3
 8003d34:	f000 fe10 	bl	8004958 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d38:	e02f      	b.n	8003d9a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d3a:	23a4      	movs	r3, #164	; 0xa4
 8003d3c:	18fb      	adds	r3, r7, r3
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2280      	movs	r2, #128	; 0x80
 8003d42:	4013      	ands	r3, r2
 8003d44:	d00f      	beq.n	8003d66 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d46:	23a0      	movs	r3, #160	; 0xa0
 8003d48:	18fb      	adds	r3, r7, r3
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2280      	movs	r2, #128	; 0x80
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d009      	beq.n	8003d66 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d01e      	beq.n	8003d98 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	0010      	movs	r0, r2
 8003d62:	4798      	blx	r3
    }
    return;
 8003d64:	e018      	b.n	8003d98 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d66:	23a4      	movs	r3, #164	; 0xa4
 8003d68:	18fb      	adds	r3, r7, r3
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2240      	movs	r2, #64	; 0x40
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d013      	beq.n	8003d9a <HAL_UART_IRQHandler+0x5a2>
 8003d72:	23a0      	movs	r3, #160	; 0xa0
 8003d74:	18fb      	adds	r3, r7, r3
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2240      	movs	r2, #64	; 0x40
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d00d      	beq.n	8003d9a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	0018      	movs	r0, r3
 8003d82:	f000 fc56 	bl	8004632 <UART_EndTransmit_IT>
    return;
 8003d86:	e008      	b.n	8003d9a <HAL_UART_IRQHandler+0x5a2>
      return;
 8003d88:	46c0      	nop			; (mov r8, r8)
 8003d8a:	e006      	b.n	8003d9a <HAL_UART_IRQHandler+0x5a2>
    return;
 8003d8c:	46c0      	nop			; (mov r8, r8)
 8003d8e:	e004      	b.n	8003d9a <HAL_UART_IRQHandler+0x5a2>
      return;
 8003d90:	46c0      	nop			; (mov r8, r8)
 8003d92:	e002      	b.n	8003d9a <HAL_UART_IRQHandler+0x5a2>
      return;
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	e000      	b.n	8003d9a <HAL_UART_IRQHandler+0x5a2>
    return;
 8003d98:	46c0      	nop			; (mov r8, r8)
  }

}
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b02b      	add	sp, #172	; 0xac
 8003d9e:	bd90      	pop	{r4, r7, pc}
 8003da0:	fffffeff 	.word	0xfffffeff
 8003da4:	fffffedf 	.word	0xfffffedf

08003da8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003db0:	46c0      	nop			; (mov r8, r8)
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b002      	add	sp, #8
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003dc0:	46c0      	nop			; (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b002      	add	sp, #8
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	000a      	movs	r2, r1
 8003dd2:	1cbb      	adds	r3, r7, #2
 8003dd4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b002      	add	sp, #8
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003de8:	231e      	movs	r3, #30
 8003dea:	18fb      	adds	r3, r7, r3
 8003dec:	2200      	movs	r2, #0
 8003dee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a8d      	ldr	r2, [pc, #564]	; (8004044 <UART_SetConfig+0x264>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	0019      	movs	r1, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4a88      	ldr	r2, [pc, #544]	; (8004048 <UART_SetConfig+0x268>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	0019      	movs	r1, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	4a7f      	ldr	r2, [pc, #508]	; (800404c <UART_SetConfig+0x26c>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	0019      	movs	r1, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a7b      	ldr	r2, [pc, #492]	; (8004050 <UART_SetConfig+0x270>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d127      	bne.n	8003eb6 <UART_SetConfig+0xd6>
 8003e66:	4b7b      	ldr	r3, [pc, #492]	; (8004054 <UART_SetConfig+0x274>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d00d      	beq.n	8003e8e <UART_SetConfig+0xae>
 8003e72:	d81b      	bhi.n	8003eac <UART_SetConfig+0xcc>
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d014      	beq.n	8003ea2 <UART_SetConfig+0xc2>
 8003e78:	d818      	bhi.n	8003eac <UART_SetConfig+0xcc>
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <UART_SetConfig+0xa4>
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d00a      	beq.n	8003e98 <UART_SetConfig+0xb8>
 8003e82:	e013      	b.n	8003eac <UART_SetConfig+0xcc>
 8003e84:	231f      	movs	r3, #31
 8003e86:	18fb      	adds	r3, r7, r3
 8003e88:	2200      	movs	r2, #0
 8003e8a:	701a      	strb	r2, [r3, #0]
 8003e8c:	e021      	b.n	8003ed2 <UART_SetConfig+0xf2>
 8003e8e:	231f      	movs	r3, #31
 8003e90:	18fb      	adds	r3, r7, r3
 8003e92:	2202      	movs	r2, #2
 8003e94:	701a      	strb	r2, [r3, #0]
 8003e96:	e01c      	b.n	8003ed2 <UART_SetConfig+0xf2>
 8003e98:	231f      	movs	r3, #31
 8003e9a:	18fb      	adds	r3, r7, r3
 8003e9c:	2204      	movs	r2, #4
 8003e9e:	701a      	strb	r2, [r3, #0]
 8003ea0:	e017      	b.n	8003ed2 <UART_SetConfig+0xf2>
 8003ea2:	231f      	movs	r3, #31
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	701a      	strb	r2, [r3, #0]
 8003eaa:	e012      	b.n	8003ed2 <UART_SetConfig+0xf2>
 8003eac:	231f      	movs	r3, #31
 8003eae:	18fb      	adds	r3, r7, r3
 8003eb0:	2210      	movs	r2, #16
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	e00d      	b.n	8003ed2 <UART_SetConfig+0xf2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a67      	ldr	r2, [pc, #412]	; (8004058 <UART_SetConfig+0x278>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d104      	bne.n	8003eca <UART_SetConfig+0xea>
 8003ec0:	231f      	movs	r3, #31
 8003ec2:	18fb      	adds	r3, r7, r3
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	701a      	strb	r2, [r3, #0]
 8003ec8:	e003      	b.n	8003ed2 <UART_SetConfig+0xf2>
 8003eca:	231f      	movs	r3, #31
 8003ecc:	18fb      	adds	r3, r7, r3
 8003ece:	2210      	movs	r2, #16
 8003ed0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69da      	ldr	r2, [r3, #28]
 8003ed6:	2380      	movs	r3, #128	; 0x80
 8003ed8:	021b      	lsls	r3, r3, #8
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d15d      	bne.n	8003f9a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003ede:	231f      	movs	r3, #31
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d015      	beq.n	8003f14 <UART_SetConfig+0x134>
 8003ee8:	dc18      	bgt.n	8003f1c <UART_SetConfig+0x13c>
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d00d      	beq.n	8003f0a <UART_SetConfig+0x12a>
 8003eee:	dc15      	bgt.n	8003f1c <UART_SetConfig+0x13c>
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <UART_SetConfig+0x11a>
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d005      	beq.n	8003f04 <UART_SetConfig+0x124>
 8003ef8:	e010      	b.n	8003f1c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003efa:	f7fe fdfd 	bl	8002af8 <HAL_RCC_GetPCLK1Freq>
 8003efe:	0003      	movs	r3, r0
 8003f00:	61bb      	str	r3, [r7, #24]
        break;
 8003f02:	e012      	b.n	8003f2a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f04:	4b55      	ldr	r3, [pc, #340]	; (800405c <UART_SetConfig+0x27c>)
 8003f06:	61bb      	str	r3, [r7, #24]
        break;
 8003f08:	e00f      	b.n	8003f2a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f0a:	f7fe fd6b 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 8003f0e:	0003      	movs	r3, r0
 8003f10:	61bb      	str	r3, [r7, #24]
        break;
 8003f12:	e00a      	b.n	8003f2a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f14:	2380      	movs	r3, #128	; 0x80
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	61bb      	str	r3, [r7, #24]
        break;
 8003f1a:	e006      	b.n	8003f2a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f20:	231e      	movs	r3, #30
 8003f22:	18fb      	adds	r3, r7, r3
 8003f24:	2201      	movs	r2, #1
 8003f26:	701a      	strb	r2, [r3, #0]
        break;
 8003f28:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d100      	bne.n	8003f32 <UART_SetConfig+0x152>
 8003f30:	e07b      	b.n	800402a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	005a      	lsls	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	085b      	lsrs	r3, r3, #1
 8003f3c:	18d2      	adds	r2, r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	0019      	movs	r1, r3
 8003f44:	0010      	movs	r0, r2
 8003f46:	f7fc f8e9 	bl	800011c <__udivsi3>
 8003f4a:	0003      	movs	r3, r0
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	2b0f      	cmp	r3, #15
 8003f54:	d91c      	bls.n	8003f90 <UART_SetConfig+0x1b0>
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	2380      	movs	r3, #128	; 0x80
 8003f5a:	025b      	lsls	r3, r3, #9
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d217      	bcs.n	8003f90 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	200e      	movs	r0, #14
 8003f66:	183b      	adds	r3, r7, r0
 8003f68:	210f      	movs	r1, #15
 8003f6a:	438a      	bics	r2, r1
 8003f6c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	085b      	lsrs	r3, r3, #1
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2207      	movs	r2, #7
 8003f76:	4013      	ands	r3, r2
 8003f78:	b299      	uxth	r1, r3
 8003f7a:	183b      	adds	r3, r7, r0
 8003f7c:	183a      	adds	r2, r7, r0
 8003f7e:	8812      	ldrh	r2, [r2, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	183a      	adds	r2, r7, r0
 8003f8a:	8812      	ldrh	r2, [r2, #0]
 8003f8c:	60da      	str	r2, [r3, #12]
 8003f8e:	e04c      	b.n	800402a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003f90:	231e      	movs	r3, #30
 8003f92:	18fb      	adds	r3, r7, r3
 8003f94:	2201      	movs	r2, #1
 8003f96:	701a      	strb	r2, [r3, #0]
 8003f98:	e047      	b.n	800402a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f9a:	231f      	movs	r3, #31
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d015      	beq.n	8003fd0 <UART_SetConfig+0x1f0>
 8003fa4:	dc18      	bgt.n	8003fd8 <UART_SetConfig+0x1f8>
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d00d      	beq.n	8003fc6 <UART_SetConfig+0x1e6>
 8003faa:	dc15      	bgt.n	8003fd8 <UART_SetConfig+0x1f8>
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <UART_SetConfig+0x1d6>
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d005      	beq.n	8003fc0 <UART_SetConfig+0x1e0>
 8003fb4:	e010      	b.n	8003fd8 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fb6:	f7fe fd9f 	bl	8002af8 <HAL_RCC_GetPCLK1Freq>
 8003fba:	0003      	movs	r3, r0
 8003fbc:	61bb      	str	r3, [r7, #24]
        break;
 8003fbe:	e012      	b.n	8003fe6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fc0:	4b26      	ldr	r3, [pc, #152]	; (800405c <UART_SetConfig+0x27c>)
 8003fc2:	61bb      	str	r3, [r7, #24]
        break;
 8003fc4:	e00f      	b.n	8003fe6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fc6:	f7fe fd0d 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 8003fca:	0003      	movs	r3, r0
 8003fcc:	61bb      	str	r3, [r7, #24]
        break;
 8003fce:	e00a      	b.n	8003fe6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fd0:	2380      	movs	r3, #128	; 0x80
 8003fd2:	021b      	lsls	r3, r3, #8
 8003fd4:	61bb      	str	r3, [r7, #24]
        break;
 8003fd6:	e006      	b.n	8003fe6 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fdc:	231e      	movs	r3, #30
 8003fde:	18fb      	adds	r3, r7, r3
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	701a      	strb	r2, [r3, #0]
        break;
 8003fe4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d01e      	beq.n	800402a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	085a      	lsrs	r2, r3, #1
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	18d2      	adds	r2, r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	0019      	movs	r1, r3
 8003ffc:	0010      	movs	r0, r2
 8003ffe:	f7fc f88d 	bl	800011c <__udivsi3>
 8004002:	0003      	movs	r3, r0
 8004004:	b29b      	uxth	r3, r3
 8004006:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	2b0f      	cmp	r3, #15
 800400c:	d909      	bls.n	8004022 <UART_SetConfig+0x242>
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	2380      	movs	r3, #128	; 0x80
 8004012:	025b      	lsls	r3, r3, #9
 8004014:	429a      	cmp	r2, r3
 8004016:	d204      	bcs.n	8004022 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	60da      	str	r2, [r3, #12]
 8004020:	e003      	b.n	800402a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004022:	231e      	movs	r3, #30
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	2201      	movs	r2, #1
 8004028:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004036:	231e      	movs	r3, #30
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	781b      	ldrb	r3, [r3, #0]
}
 800403c:	0018      	movs	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	b008      	add	sp, #32
 8004042:	bd80      	pop	{r7, pc}
 8004044:	efff69f3 	.word	0xefff69f3
 8004048:	ffffcfff 	.word	0xffffcfff
 800404c:	fffff4ff 	.word	0xfffff4ff
 8004050:	40013800 	.word	0x40013800
 8004054:	40021000 	.word	0x40021000
 8004058:	40004400 	.word	0x40004400
 800405c:	007a1200 	.word	0x007a1200

08004060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	2201      	movs	r2, #1
 800406e:	4013      	ands	r3, r2
 8004070:	d00b      	beq.n	800408a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	4a4a      	ldr	r2, [pc, #296]	; (80041a4 <UART_AdvFeatureConfig+0x144>)
 800407a:	4013      	ands	r3, r2
 800407c:	0019      	movs	r1, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	2202      	movs	r2, #2
 8004090:	4013      	ands	r3, r2
 8004092:	d00b      	beq.n	80040ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	4a43      	ldr	r2, [pc, #268]	; (80041a8 <UART_AdvFeatureConfig+0x148>)
 800409c:	4013      	ands	r3, r2
 800409e:	0019      	movs	r1, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	2204      	movs	r2, #4
 80040b2:	4013      	ands	r3, r2
 80040b4:	d00b      	beq.n	80040ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	4a3b      	ldr	r2, [pc, #236]	; (80041ac <UART_AdvFeatureConfig+0x14c>)
 80040be:	4013      	ands	r3, r2
 80040c0:	0019      	movs	r1, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	2208      	movs	r2, #8
 80040d4:	4013      	ands	r3, r2
 80040d6:	d00b      	beq.n	80040f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4a34      	ldr	r2, [pc, #208]	; (80041b0 <UART_AdvFeatureConfig+0x150>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	0019      	movs	r1, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	2210      	movs	r2, #16
 80040f6:	4013      	ands	r3, r2
 80040f8:	d00b      	beq.n	8004112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	4a2c      	ldr	r2, [pc, #176]	; (80041b4 <UART_AdvFeatureConfig+0x154>)
 8004102:	4013      	ands	r3, r2
 8004104:	0019      	movs	r1, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	2220      	movs	r2, #32
 8004118:	4013      	ands	r3, r2
 800411a:	d00b      	beq.n	8004134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	4a25      	ldr	r2, [pc, #148]	; (80041b8 <UART_AdvFeatureConfig+0x158>)
 8004124:	4013      	ands	r3, r2
 8004126:	0019      	movs	r1, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	2240      	movs	r2, #64	; 0x40
 800413a:	4013      	ands	r3, r2
 800413c:	d01d      	beq.n	800417a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	4a1d      	ldr	r2, [pc, #116]	; (80041bc <UART_AdvFeatureConfig+0x15c>)
 8004146:	4013      	ands	r3, r2
 8004148:	0019      	movs	r1, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800415a:	2380      	movs	r3, #128	; 0x80
 800415c:	035b      	lsls	r3, r3, #13
 800415e:	429a      	cmp	r2, r3
 8004160:	d10b      	bne.n	800417a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	4a15      	ldr	r2, [pc, #84]	; (80041c0 <UART_AdvFeatureConfig+0x160>)
 800416a:	4013      	ands	r3, r2
 800416c:	0019      	movs	r1, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	2280      	movs	r2, #128	; 0x80
 8004180:	4013      	ands	r3, r2
 8004182:	d00b      	beq.n	800419c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	4a0e      	ldr	r2, [pc, #56]	; (80041c4 <UART_AdvFeatureConfig+0x164>)
 800418c:	4013      	ands	r3, r2
 800418e:	0019      	movs	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	605a      	str	r2, [r3, #4]
  }
}
 800419c:	46c0      	nop			; (mov r8, r8)
 800419e:	46bd      	mov	sp, r7
 80041a0:	b002      	add	sp, #8
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	fffdffff 	.word	0xfffdffff
 80041a8:	fffeffff 	.word	0xfffeffff
 80041ac:	fffbffff 	.word	0xfffbffff
 80041b0:	ffff7fff 	.word	0xffff7fff
 80041b4:	ffffefff 	.word	0xffffefff
 80041b8:	ffffdfff 	.word	0xffffdfff
 80041bc:	ffefffff 	.word	0xffefffff
 80041c0:	ff9fffff 	.word	0xff9fffff
 80041c4:	fff7ffff 	.word	0xfff7ffff

080041c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af02      	add	r7, sp, #8
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2280      	movs	r2, #128	; 0x80
 80041d4:	2100      	movs	r1, #0
 80041d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041d8:	f7fc ff14 	bl	8001004 <HAL_GetTick>
 80041dc:	0003      	movs	r3, r0
 80041de:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2208      	movs	r2, #8
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d10c      	bne.n	8004208 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2280      	movs	r2, #128	; 0x80
 80041f2:	0391      	lsls	r1, r2, #14
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	4a17      	ldr	r2, [pc, #92]	; (8004254 <UART_CheckIdleState+0x8c>)
 80041f8:	9200      	str	r2, [sp, #0]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f000 f82c 	bl	8004258 <UART_WaitOnFlagUntilTimeout>
 8004200:	1e03      	subs	r3, r0, #0
 8004202:	d001      	beq.n	8004208 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e021      	b.n	800424c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2204      	movs	r2, #4
 8004210:	4013      	ands	r3, r2
 8004212:	2b04      	cmp	r3, #4
 8004214:	d10c      	bne.n	8004230 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2280      	movs	r2, #128	; 0x80
 800421a:	03d1      	lsls	r1, r2, #15
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	4a0d      	ldr	r2, [pc, #52]	; (8004254 <UART_CheckIdleState+0x8c>)
 8004220:	9200      	str	r2, [sp, #0]
 8004222:	2200      	movs	r2, #0
 8004224:	f000 f818 	bl	8004258 <UART_WaitOnFlagUntilTimeout>
 8004228:	1e03      	subs	r3, r0, #0
 800422a:	d001      	beq.n	8004230 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e00d      	b.n	800424c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2220      	movs	r2, #32
 8004234:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2274      	movs	r2, #116	; 0x74
 8004246:	2100      	movs	r1, #0
 8004248:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	0018      	movs	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	b004      	add	sp, #16
 8004252:	bd80      	pop	{r7, pc}
 8004254:	01ffffff 	.word	0x01ffffff

08004258 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b094      	sub	sp, #80	; 0x50
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	1dfb      	adds	r3, r7, #7
 8004266:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004268:	e0a3      	b.n	80043b2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800426a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800426c:	3301      	adds	r3, #1
 800426e:	d100      	bne.n	8004272 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004270:	e09f      	b.n	80043b2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004272:	f7fc fec7 	bl	8001004 <HAL_GetTick>
 8004276:	0002      	movs	r2, r0
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800427e:	429a      	cmp	r2, r3
 8004280:	d302      	bcc.n	8004288 <UART_WaitOnFlagUntilTimeout+0x30>
 8004282:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004284:	2b00      	cmp	r3, #0
 8004286:	d13d      	bne.n	8004304 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004288:	f3ef 8310 	mrs	r3, PRIMASK
 800428c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800428e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004290:	647b      	str	r3, [r7, #68]	; 0x44
 8004292:	2301      	movs	r3, #1
 8004294:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004298:	f383 8810 	msr	PRIMASK, r3
}
 800429c:	46c0      	nop			; (mov r8, r8)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	494c      	ldr	r1, [pc, #304]	; (80043dc <UART_WaitOnFlagUntilTimeout+0x184>)
 80042aa:	400a      	ands	r2, r1
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	f383 8810 	msr	PRIMASK, r3
}
 80042b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ba:	f3ef 8310 	mrs	r3, PRIMASK
 80042be:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80042c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c2:	643b      	str	r3, [r7, #64]	; 0x40
 80042c4:	2301      	movs	r3, #1
 80042c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ca:	f383 8810 	msr	PRIMASK, r3
}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2101      	movs	r1, #1
 80042dc:	438a      	bics	r2, r1
 80042de:	609a      	str	r2, [r3, #8]
 80042e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e6:	f383 8810 	msr	PRIMASK, r3
}
 80042ea:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2220      	movs	r2, #32
 80042f6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2274      	movs	r2, #116	; 0x74
 80042fc:	2100      	movs	r1, #0
 80042fe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e067      	b.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2204      	movs	r2, #4
 800430c:	4013      	ands	r3, r2
 800430e:	d050      	beq.n	80043b2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	69da      	ldr	r2, [r3, #28]
 8004316:	2380      	movs	r3, #128	; 0x80
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	401a      	ands	r2, r3
 800431c:	2380      	movs	r3, #128	; 0x80
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	429a      	cmp	r2, r3
 8004322:	d146      	bne.n	80043b2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2280      	movs	r2, #128	; 0x80
 800432a:	0112      	lsls	r2, r2, #4
 800432c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800432e:	f3ef 8310 	mrs	r3, PRIMASK
 8004332:	613b      	str	r3, [r7, #16]
  return(result);
 8004334:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004338:	2301      	movs	r3, #1
 800433a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f383 8810 	msr	PRIMASK, r3
}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4923      	ldr	r1, [pc, #140]	; (80043dc <UART_WaitOnFlagUntilTimeout+0x184>)
 8004350:	400a      	ands	r2, r1
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004356:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	f383 8810 	msr	PRIMASK, r3
}
 800435e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004360:	f3ef 8310 	mrs	r3, PRIMASK
 8004364:	61fb      	str	r3, [r7, #28]
  return(result);
 8004366:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004368:	64bb      	str	r3, [r7, #72]	; 0x48
 800436a:	2301      	movs	r3, #1
 800436c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	f383 8810 	msr	PRIMASK, r3
}
 8004374:	46c0      	nop			; (mov r8, r8)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2101      	movs	r1, #1
 8004382:	438a      	bics	r2, r1
 8004384:	609a      	str	r2, [r3, #8]
 8004386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	f383 8810 	msr	PRIMASK, r3
}
 8004390:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2220      	movs	r2, #32
 8004396:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2280      	movs	r2, #128	; 0x80
 80043a2:	2120      	movs	r1, #32
 80043a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2274      	movs	r2, #116	; 0x74
 80043aa:	2100      	movs	r1, #0
 80043ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e010      	b.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	4013      	ands	r3, r2
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	425a      	negs	r2, r3
 80043c2:	4153      	adcs	r3, r2
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	001a      	movs	r2, r3
 80043c8:	1dfb      	adds	r3, r7, #7
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d100      	bne.n	80043d2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80043d0:	e74b      	b.n	800426a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	0018      	movs	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b014      	add	sp, #80	; 0x50
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	fffffe5f 	.word	0xfffffe5f

080043e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08c      	sub	sp, #48	; 0x30
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	1dbb      	adds	r3, r7, #6
 80043ec:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	1dba      	adds	r2, r7, #6
 80043f8:	2158      	movs	r1, #88	; 0x58
 80043fa:	8812      	ldrh	r2, [r2, #0]
 80043fc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	1dba      	adds	r2, r7, #6
 8004402:	215a      	movs	r1, #90	; 0x5a
 8004404:	8812      	ldrh	r2, [r2, #0]
 8004406:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	2380      	movs	r3, #128	; 0x80
 8004414:	015b      	lsls	r3, r3, #5
 8004416:	429a      	cmp	r2, r3
 8004418:	d10d      	bne.n	8004436 <UART_Start_Receive_IT+0x56>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d104      	bne.n	800442c <UART_Start_Receive_IT+0x4c>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	225c      	movs	r2, #92	; 0x5c
 8004426:	4943      	ldr	r1, [pc, #268]	; (8004534 <UART_Start_Receive_IT+0x154>)
 8004428:	5299      	strh	r1, [r3, r2]
 800442a:	e02e      	b.n	800448a <UART_Start_Receive_IT+0xaa>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	225c      	movs	r2, #92	; 0x5c
 8004430:	21ff      	movs	r1, #255	; 0xff
 8004432:	5299      	strh	r1, [r3, r2]
 8004434:	e029      	b.n	800448a <UART_Start_Receive_IT+0xaa>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10d      	bne.n	800445a <UART_Start_Receive_IT+0x7a>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d104      	bne.n	8004450 <UART_Start_Receive_IT+0x70>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	225c      	movs	r2, #92	; 0x5c
 800444a:	21ff      	movs	r1, #255	; 0xff
 800444c:	5299      	strh	r1, [r3, r2]
 800444e:	e01c      	b.n	800448a <UART_Start_Receive_IT+0xaa>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	225c      	movs	r2, #92	; 0x5c
 8004454:	217f      	movs	r1, #127	; 0x7f
 8004456:	5299      	strh	r1, [r3, r2]
 8004458:	e017      	b.n	800448a <UART_Start_Receive_IT+0xaa>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	2380      	movs	r3, #128	; 0x80
 8004460:	055b      	lsls	r3, r3, #21
 8004462:	429a      	cmp	r2, r3
 8004464:	d10d      	bne.n	8004482 <UART_Start_Receive_IT+0xa2>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d104      	bne.n	8004478 <UART_Start_Receive_IT+0x98>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	225c      	movs	r2, #92	; 0x5c
 8004472:	217f      	movs	r1, #127	; 0x7f
 8004474:	5299      	strh	r1, [r3, r2]
 8004476:	e008      	b.n	800448a <UART_Start_Receive_IT+0xaa>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	225c      	movs	r2, #92	; 0x5c
 800447c:	213f      	movs	r1, #63	; 0x3f
 800447e:	5299      	strh	r1, [r3, r2]
 8004480:	e003      	b.n	800448a <UART_Start_Receive_IT+0xaa>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	225c      	movs	r2, #92	; 0x5c
 8004486:	2100      	movs	r1, #0
 8004488:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2280      	movs	r2, #128	; 0x80
 800448e:	2100      	movs	r1, #0
 8004490:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2222      	movs	r2, #34	; 0x22
 8004496:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004498:	f3ef 8310 	mrs	r3, PRIMASK
 800449c:	61fb      	str	r3, [r7, #28]
  return(result);
 800449e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044a2:	2301      	movs	r3, #1
 80044a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	f383 8810 	msr	PRIMASK, r3
}
 80044ac:	46c0      	nop			; (mov r8, r8)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2101      	movs	r1, #1
 80044ba:	430a      	orrs	r2, r1
 80044bc:	609a      	str	r2, [r3, #8]
 80044be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	f383 8810 	msr	PRIMASK, r3
}
 80044c8:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	2380      	movs	r3, #128	; 0x80
 80044d0:	015b      	lsls	r3, r3, #5
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d107      	bne.n	80044e6 <UART_Start_Receive_IT+0x106>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d103      	bne.n	80044e6 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4a15      	ldr	r2, [pc, #84]	; (8004538 <UART_Start_Receive_IT+0x158>)
 80044e2:	665a      	str	r2, [r3, #100]	; 0x64
 80044e4:	e002      	b.n	80044ec <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4a14      	ldr	r2, [pc, #80]	; (800453c <UART_Start_Receive_IT+0x15c>)
 80044ea:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2274      	movs	r2, #116	; 0x74
 80044f0:	2100      	movs	r1, #0
 80044f2:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044f4:	f3ef 8310 	mrs	r3, PRIMASK
 80044f8:	613b      	str	r3, [r7, #16]
  return(result);
 80044fa:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80044fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044fe:	2301      	movs	r3, #1
 8004500:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f383 8810 	msr	PRIMASK, r3
}
 8004508:	46c0      	nop			; (mov r8, r8)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2190      	movs	r1, #144	; 0x90
 8004516:	0049      	lsls	r1, r1, #1
 8004518:	430a      	orrs	r2, r1
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	f383 8810 	msr	PRIMASK, r3
}
 8004526:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	0018      	movs	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	b00c      	add	sp, #48	; 0x30
 8004530:	bd80      	pop	{r7, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	000001ff 	.word	0x000001ff
 8004538:	080047f1 	.word	0x080047f1
 800453c:	08004689 	.word	0x08004689

08004540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b08e      	sub	sp, #56	; 0x38
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004548:	f3ef 8310 	mrs	r3, PRIMASK
 800454c:	617b      	str	r3, [r7, #20]
  return(result);
 800454e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004550:	637b      	str	r3, [r7, #52]	; 0x34
 8004552:	2301      	movs	r3, #1
 8004554:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	f383 8810 	msr	PRIMASK, r3
}
 800455c:	46c0      	nop			; (mov r8, r8)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4925      	ldr	r1, [pc, #148]	; (8004600 <UART_EndRxTransfer+0xc0>)
 800456a:	400a      	ands	r2, r1
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004570:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	f383 8810 	msr	PRIMASK, r3
}
 8004578:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800457a:	f3ef 8310 	mrs	r3, PRIMASK
 800457e:	623b      	str	r3, [r7, #32]
  return(result);
 8004580:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004582:	633b      	str	r3, [r7, #48]	; 0x30
 8004584:	2301      	movs	r3, #1
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	f383 8810 	msr	PRIMASK, r3
}
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2101      	movs	r1, #1
 800459c:	438a      	bics	r2, r1
 800459e:	609a      	str	r2, [r3, #8]
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	f383 8810 	msr	PRIMASK, r3
}
 80045aa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d118      	bne.n	80045e6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b4:	f3ef 8310 	mrs	r3, PRIMASK
 80045b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80045ba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045be:	2301      	movs	r3, #1
 80045c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f383 8810 	msr	PRIMASK, r3
}
 80045c8:	46c0      	nop			; (mov r8, r8)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2110      	movs	r1, #16
 80045d6:	438a      	bics	r2, r1
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f383 8810 	msr	PRIMASK, r3
}
 80045e4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80045f8:	46c0      	nop			; (mov r8, r8)
 80045fa:	46bd      	mov	sp, r7
 80045fc:	b00e      	add	sp, #56	; 0x38
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	fffffedf 	.word	0xfffffedf

08004604 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	225a      	movs	r2, #90	; 0x5a
 8004616:	2100      	movs	r1, #0
 8004618:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2252      	movs	r2, #82	; 0x52
 800461e:	2100      	movs	r1, #0
 8004620:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	0018      	movs	r0, r3
 8004626:	f7ff fbc7 	bl	8003db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	46bd      	mov	sp, r7
 800462e:	b004      	add	sp, #16
 8004630:	bd80      	pop	{r7, pc}

08004632 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b086      	sub	sp, #24
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800463a:	f3ef 8310 	mrs	r3, PRIMASK
 800463e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004640:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	2301      	movs	r3, #1
 8004646:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f383 8810 	msr	PRIMASK, r3
}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2140      	movs	r1, #64	; 0x40
 800465c:	438a      	bics	r2, r1
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f383 8810 	msr	PRIMASK, r3
}
 800466a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	0018      	movs	r0, r3
 800467c:	f7ff fb94 	bl	8003da8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004680:	46c0      	nop			; (mov r8, r8)
 8004682:	46bd      	mov	sp, r7
 8004684:	b006      	add	sp, #24
 8004686:	bd80      	pop	{r7, pc}

08004688 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b090      	sub	sp, #64	; 0x40
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004690:	203e      	movs	r0, #62	; 0x3e
 8004692:	183b      	adds	r3, r7, r0
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	215c      	movs	r1, #92	; 0x5c
 8004698:	5a52      	ldrh	r2, [r2, r1]
 800469a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046a0:	2b22      	cmp	r3, #34	; 0x22
 80046a2:	d000      	beq.n	80046a6 <UART_RxISR_8BIT+0x1e>
 80046a4:	e095      	b.n	80047d2 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	213c      	movs	r1, #60	; 0x3c
 80046ac:	187b      	adds	r3, r7, r1
 80046ae:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80046b0:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80046b2:	187b      	adds	r3, r7, r1
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	183b      	adds	r3, r7, r0
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	b2d9      	uxtb	r1, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c2:	400a      	ands	r2, r1
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	225a      	movs	r2, #90	; 0x5a
 80046d6:	5a9b      	ldrh	r3, [r3, r2]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b299      	uxth	r1, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	225a      	movs	r2, #90	; 0x5a
 80046e2:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	225a      	movs	r2, #90	; 0x5a
 80046e8:	5a9b      	ldrh	r3, [r3, r2]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d178      	bne.n	80047e2 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f0:	f3ef 8310 	mrs	r3, PRIMASK
 80046f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80046f6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80046fa:	2301      	movs	r3, #1
 80046fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	f383 8810 	msr	PRIMASK, r3
}
 8004704:	46c0      	nop			; (mov r8, r8)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4936      	ldr	r1, [pc, #216]	; (80047ec <UART_RxISR_8BIT+0x164>)
 8004712:	400a      	ands	r2, r1
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004718:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	f383 8810 	msr	PRIMASK, r3
}
 8004720:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004722:	f3ef 8310 	mrs	r3, PRIMASK
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472a:	637b      	str	r3, [r7, #52]	; 0x34
 800472c:	2301      	movs	r3, #1
 800472e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004732:	f383 8810 	msr	PRIMASK, r3
}
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2101      	movs	r1, #1
 8004744:	438a      	bics	r2, r1
 8004746:	609a      	str	r2, [r3, #8]
 8004748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474e:	f383 8810 	msr	PRIMASK, r3
}
 8004752:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2220      	movs	r2, #32
 8004758:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004764:	2b01      	cmp	r3, #1
 8004766:	d12f      	bne.n	80047c8 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800476e:	f3ef 8310 	mrs	r3, PRIMASK
 8004772:	60fb      	str	r3, [r7, #12]
  return(result);
 8004774:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004776:	633b      	str	r3, [r7, #48]	; 0x30
 8004778:	2301      	movs	r3, #1
 800477a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f383 8810 	msr	PRIMASK, r3
}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2110      	movs	r1, #16
 8004790:	438a      	bics	r2, r1
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f383 8810 	msr	PRIMASK, r3
}
 800479e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	2210      	movs	r2, #16
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b10      	cmp	r3, #16
 80047ac:	d103      	bne.n	80047b6 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2210      	movs	r2, #16
 80047b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2258      	movs	r2, #88	; 0x58
 80047ba:	5a9a      	ldrh	r2, [r3, r2]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	0011      	movs	r1, r2
 80047c0:	0018      	movs	r0, r3
 80047c2:	f7ff fb01 	bl	8003dc8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047c6:	e00c      	b.n	80047e2 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	0018      	movs	r0, r3
 80047cc:	f7fc f91c 	bl	8000a08 <HAL_UART_RxCpltCallback>
}
 80047d0:	e007      	b.n	80047e2 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699a      	ldr	r2, [r3, #24]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2108      	movs	r1, #8
 80047de:	430a      	orrs	r2, r1
 80047e0:	619a      	str	r2, [r3, #24]
}
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	46bd      	mov	sp, r7
 80047e6:	b010      	add	sp, #64	; 0x40
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	fffffedf 	.word	0xfffffedf

080047f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b090      	sub	sp, #64	; 0x40
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80047f8:	203e      	movs	r0, #62	; 0x3e
 80047fa:	183b      	adds	r3, r7, r0
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	215c      	movs	r1, #92	; 0x5c
 8004800:	5a52      	ldrh	r2, [r2, r1]
 8004802:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004808:	2b22      	cmp	r3, #34	; 0x22
 800480a:	d000      	beq.n	800480e <UART_RxISR_16BIT+0x1e>
 800480c:	e095      	b.n	800493a <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	213c      	movs	r1, #60	; 0x3c
 8004814:	187b      	adds	r3, r7, r1
 8004816:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004818:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481e:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8004820:	187b      	adds	r3, r7, r1
 8004822:	183a      	adds	r2, r7, r0
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	8812      	ldrh	r2, [r2, #0]
 8004828:	4013      	ands	r3, r2
 800482a:	b29a      	uxth	r2, r3
 800482c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	1c9a      	adds	r2, r3, #2
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	225a      	movs	r2, #90	; 0x5a
 800483e:	5a9b      	ldrh	r3, [r3, r2]
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b299      	uxth	r1, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	225a      	movs	r2, #90	; 0x5a
 800484a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	225a      	movs	r2, #90	; 0x5a
 8004850:	5a9b      	ldrh	r3, [r3, r2]
 8004852:	b29b      	uxth	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d178      	bne.n	800494a <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004858:	f3ef 8310 	mrs	r3, PRIMASK
 800485c:	617b      	str	r3, [r7, #20]
  return(result);
 800485e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004860:	637b      	str	r3, [r7, #52]	; 0x34
 8004862:	2301      	movs	r3, #1
 8004864:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	f383 8810 	msr	PRIMASK, r3
}
 800486c:	46c0      	nop			; (mov r8, r8)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4936      	ldr	r1, [pc, #216]	; (8004954 <UART_RxISR_16BIT+0x164>)
 800487a:	400a      	ands	r2, r1
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004880:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	f383 8810 	msr	PRIMASK, r3
}
 8004888:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800488a:	f3ef 8310 	mrs	r3, PRIMASK
 800488e:	623b      	str	r3, [r7, #32]
  return(result);
 8004890:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004892:	633b      	str	r3, [r7, #48]	; 0x30
 8004894:	2301      	movs	r3, #1
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	f383 8810 	msr	PRIMASK, r3
}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689a      	ldr	r2, [r3, #8]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2101      	movs	r1, #1
 80048ac:	438a      	bics	r2, r1
 80048ae:	609a      	str	r2, [r3, #8]
 80048b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b6:	f383 8810 	msr	PRIMASK, r3
}
 80048ba:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2220      	movs	r2, #32
 80048c0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d12f      	bne.n	8004930 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d6:	f3ef 8310 	mrs	r3, PRIMASK
 80048da:	60bb      	str	r3, [r7, #8]
  return(result);
 80048dc:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048e0:	2301      	movs	r3, #1
 80048e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f383 8810 	msr	PRIMASK, r3
}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2110      	movs	r1, #16
 80048f8:	438a      	bics	r2, r1
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f383 8810 	msr	PRIMASK, r3
}
 8004906:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	2210      	movs	r2, #16
 8004910:	4013      	ands	r3, r2
 8004912:	2b10      	cmp	r3, #16
 8004914:	d103      	bne.n	800491e <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2210      	movs	r2, #16
 800491c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2258      	movs	r2, #88	; 0x58
 8004922:	5a9a      	ldrh	r2, [r3, r2]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	0011      	movs	r1, r2
 8004928:	0018      	movs	r0, r3
 800492a:	f7ff fa4d 	bl	8003dc8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800492e:	e00c      	b.n	800494a <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	0018      	movs	r0, r3
 8004934:	f7fc f868 	bl	8000a08 <HAL_UART_RxCpltCallback>
}
 8004938:	e007      	b.n	800494a <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	699a      	ldr	r2, [r3, #24]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2108      	movs	r1, #8
 8004946:	430a      	orrs	r2, r1
 8004948:	619a      	str	r2, [r3, #24]
}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	46bd      	mov	sp, r7
 800494e:	b010      	add	sp, #64	; 0x40
 8004950:	bd80      	pop	{r7, pc}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	fffffedf 	.word	0xfffffedf

08004958 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004960:	46c0      	nop			; (mov r8, r8)
 8004962:	46bd      	mov	sp, r7
 8004964:	b002      	add	sp, #8
 8004966:	bd80      	pop	{r7, pc}

08004968 <__errno>:
 8004968:	4b01      	ldr	r3, [pc, #4]	; (8004970 <__errno+0x8>)
 800496a:	6818      	ldr	r0, [r3, #0]
 800496c:	4770      	bx	lr
 800496e:	46c0      	nop			; (mov r8, r8)
 8004970:	2000000c 	.word	0x2000000c

08004974 <__libc_init_array>:
 8004974:	b570      	push	{r4, r5, r6, lr}
 8004976:	2600      	movs	r6, #0
 8004978:	4d0c      	ldr	r5, [pc, #48]	; (80049ac <__libc_init_array+0x38>)
 800497a:	4c0d      	ldr	r4, [pc, #52]	; (80049b0 <__libc_init_array+0x3c>)
 800497c:	1b64      	subs	r4, r4, r5
 800497e:	10a4      	asrs	r4, r4, #2
 8004980:	42a6      	cmp	r6, r4
 8004982:	d109      	bne.n	8004998 <__libc_init_array+0x24>
 8004984:	2600      	movs	r6, #0
 8004986:	f000 fff9 	bl	800597c <_init>
 800498a:	4d0a      	ldr	r5, [pc, #40]	; (80049b4 <__libc_init_array+0x40>)
 800498c:	4c0a      	ldr	r4, [pc, #40]	; (80049b8 <__libc_init_array+0x44>)
 800498e:	1b64      	subs	r4, r4, r5
 8004990:	10a4      	asrs	r4, r4, #2
 8004992:	42a6      	cmp	r6, r4
 8004994:	d105      	bne.n	80049a2 <__libc_init_array+0x2e>
 8004996:	bd70      	pop	{r4, r5, r6, pc}
 8004998:	00b3      	lsls	r3, r6, #2
 800499a:	58eb      	ldr	r3, [r5, r3]
 800499c:	4798      	blx	r3
 800499e:	3601      	adds	r6, #1
 80049a0:	e7ee      	b.n	8004980 <__libc_init_array+0xc>
 80049a2:	00b3      	lsls	r3, r6, #2
 80049a4:	58eb      	ldr	r3, [r5, r3]
 80049a6:	4798      	blx	r3
 80049a8:	3601      	adds	r6, #1
 80049aa:	e7f2      	b.n	8004992 <__libc_init_array+0x1e>
 80049ac:	08005ab8 	.word	0x08005ab8
 80049b0:	08005ab8 	.word	0x08005ab8
 80049b4:	08005ab8 	.word	0x08005ab8
 80049b8:	08005abc 	.word	0x08005abc

080049bc <memset>:
 80049bc:	0003      	movs	r3, r0
 80049be:	1882      	adds	r2, r0, r2
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d100      	bne.n	80049c6 <memset+0xa>
 80049c4:	4770      	bx	lr
 80049c6:	7019      	strb	r1, [r3, #0]
 80049c8:	3301      	adds	r3, #1
 80049ca:	e7f9      	b.n	80049c0 <memset+0x4>

080049cc <iprintf>:
 80049cc:	b40f      	push	{r0, r1, r2, r3}
 80049ce:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <iprintf+0x30>)
 80049d0:	b513      	push	{r0, r1, r4, lr}
 80049d2:	681c      	ldr	r4, [r3, #0]
 80049d4:	2c00      	cmp	r4, #0
 80049d6:	d005      	beq.n	80049e4 <iprintf+0x18>
 80049d8:	69a3      	ldr	r3, [r4, #24]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d102      	bne.n	80049e4 <iprintf+0x18>
 80049de:	0020      	movs	r0, r4
 80049e0:	f000 f870 	bl	8004ac4 <__sinit>
 80049e4:	ab05      	add	r3, sp, #20
 80049e6:	0020      	movs	r0, r4
 80049e8:	9a04      	ldr	r2, [sp, #16]
 80049ea:	68a1      	ldr	r1, [r4, #8]
 80049ec:	9301      	str	r3, [sp, #4]
 80049ee:	f000 f9cd 	bl	8004d8c <_vfiprintf_r>
 80049f2:	bc16      	pop	{r1, r2, r4}
 80049f4:	bc08      	pop	{r3}
 80049f6:	b004      	add	sp, #16
 80049f8:	4718      	bx	r3
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	2000000c 	.word	0x2000000c

08004a00 <std>:
 8004a00:	2300      	movs	r3, #0
 8004a02:	b510      	push	{r4, lr}
 8004a04:	0004      	movs	r4, r0
 8004a06:	6003      	str	r3, [r0, #0]
 8004a08:	6043      	str	r3, [r0, #4]
 8004a0a:	6083      	str	r3, [r0, #8]
 8004a0c:	8181      	strh	r1, [r0, #12]
 8004a0e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a10:	0019      	movs	r1, r3
 8004a12:	81c2      	strh	r2, [r0, #14]
 8004a14:	6103      	str	r3, [r0, #16]
 8004a16:	6143      	str	r3, [r0, #20]
 8004a18:	6183      	str	r3, [r0, #24]
 8004a1a:	2208      	movs	r2, #8
 8004a1c:	305c      	adds	r0, #92	; 0x5c
 8004a1e:	f7ff ffcd 	bl	80049bc <memset>
 8004a22:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <std+0x38>)
 8004a24:	6224      	str	r4, [r4, #32]
 8004a26:	6263      	str	r3, [r4, #36]	; 0x24
 8004a28:	4b04      	ldr	r3, [pc, #16]	; (8004a3c <std+0x3c>)
 8004a2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a2c:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <std+0x40>)
 8004a2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a30:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <std+0x44>)
 8004a32:	6323      	str	r3, [r4, #48]	; 0x30
 8004a34:	bd10      	pop	{r4, pc}
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	08005329 	.word	0x08005329
 8004a3c:	08005351 	.word	0x08005351
 8004a40:	08005389 	.word	0x08005389
 8004a44:	080053b5 	.word	0x080053b5

08004a48 <_cleanup_r>:
 8004a48:	b510      	push	{r4, lr}
 8004a4a:	4902      	ldr	r1, [pc, #8]	; (8004a54 <_cleanup_r+0xc>)
 8004a4c:	f000 f8ba 	bl	8004bc4 <_fwalk_reent>
 8004a50:	bd10      	pop	{r4, pc}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	080056c1 	.word	0x080056c1

08004a58 <__sfmoreglue>:
 8004a58:	b570      	push	{r4, r5, r6, lr}
 8004a5a:	2568      	movs	r5, #104	; 0x68
 8004a5c:	1e4a      	subs	r2, r1, #1
 8004a5e:	4355      	muls	r5, r2
 8004a60:	000e      	movs	r6, r1
 8004a62:	0029      	movs	r1, r5
 8004a64:	3174      	adds	r1, #116	; 0x74
 8004a66:	f000 f8f3 	bl	8004c50 <_malloc_r>
 8004a6a:	1e04      	subs	r4, r0, #0
 8004a6c:	d008      	beq.n	8004a80 <__sfmoreglue+0x28>
 8004a6e:	2100      	movs	r1, #0
 8004a70:	002a      	movs	r2, r5
 8004a72:	6001      	str	r1, [r0, #0]
 8004a74:	6046      	str	r6, [r0, #4]
 8004a76:	300c      	adds	r0, #12
 8004a78:	60a0      	str	r0, [r4, #8]
 8004a7a:	3268      	adds	r2, #104	; 0x68
 8004a7c:	f7ff ff9e 	bl	80049bc <memset>
 8004a80:	0020      	movs	r0, r4
 8004a82:	bd70      	pop	{r4, r5, r6, pc}

08004a84 <__sfp_lock_acquire>:
 8004a84:	b510      	push	{r4, lr}
 8004a86:	4802      	ldr	r0, [pc, #8]	; (8004a90 <__sfp_lock_acquire+0xc>)
 8004a88:	f000 f8bd 	bl	8004c06 <__retarget_lock_acquire_recursive>
 8004a8c:	bd10      	pop	{r4, pc}
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	20000279 	.word	0x20000279

08004a94 <__sfp_lock_release>:
 8004a94:	b510      	push	{r4, lr}
 8004a96:	4802      	ldr	r0, [pc, #8]	; (8004aa0 <__sfp_lock_release+0xc>)
 8004a98:	f000 f8b6 	bl	8004c08 <__retarget_lock_release_recursive>
 8004a9c:	bd10      	pop	{r4, pc}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	20000279 	.word	0x20000279

08004aa4 <__sinit_lock_acquire>:
 8004aa4:	b510      	push	{r4, lr}
 8004aa6:	4802      	ldr	r0, [pc, #8]	; (8004ab0 <__sinit_lock_acquire+0xc>)
 8004aa8:	f000 f8ad 	bl	8004c06 <__retarget_lock_acquire_recursive>
 8004aac:	bd10      	pop	{r4, pc}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	2000027a 	.word	0x2000027a

08004ab4 <__sinit_lock_release>:
 8004ab4:	b510      	push	{r4, lr}
 8004ab6:	4802      	ldr	r0, [pc, #8]	; (8004ac0 <__sinit_lock_release+0xc>)
 8004ab8:	f000 f8a6 	bl	8004c08 <__retarget_lock_release_recursive>
 8004abc:	bd10      	pop	{r4, pc}
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	2000027a 	.word	0x2000027a

08004ac4 <__sinit>:
 8004ac4:	b513      	push	{r0, r1, r4, lr}
 8004ac6:	0004      	movs	r4, r0
 8004ac8:	f7ff ffec 	bl	8004aa4 <__sinit_lock_acquire>
 8004acc:	69a3      	ldr	r3, [r4, #24]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <__sinit+0x14>
 8004ad2:	f7ff ffef 	bl	8004ab4 <__sinit_lock_release>
 8004ad6:	bd13      	pop	{r0, r1, r4, pc}
 8004ad8:	64a3      	str	r3, [r4, #72]	; 0x48
 8004ada:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004adc:	6523      	str	r3, [r4, #80]	; 0x50
 8004ade:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <__sinit+0x68>)
 8004ae0:	4a13      	ldr	r2, [pc, #76]	; (8004b30 <__sinit+0x6c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ae6:	9301      	str	r3, [sp, #4]
 8004ae8:	42a3      	cmp	r3, r4
 8004aea:	d101      	bne.n	8004af0 <__sinit+0x2c>
 8004aec:	2301      	movs	r3, #1
 8004aee:	61a3      	str	r3, [r4, #24]
 8004af0:	0020      	movs	r0, r4
 8004af2:	f000 f81f 	bl	8004b34 <__sfp>
 8004af6:	6060      	str	r0, [r4, #4]
 8004af8:	0020      	movs	r0, r4
 8004afa:	f000 f81b 	bl	8004b34 <__sfp>
 8004afe:	60a0      	str	r0, [r4, #8]
 8004b00:	0020      	movs	r0, r4
 8004b02:	f000 f817 	bl	8004b34 <__sfp>
 8004b06:	2200      	movs	r2, #0
 8004b08:	2104      	movs	r1, #4
 8004b0a:	60e0      	str	r0, [r4, #12]
 8004b0c:	6860      	ldr	r0, [r4, #4]
 8004b0e:	f7ff ff77 	bl	8004a00 <std>
 8004b12:	2201      	movs	r2, #1
 8004b14:	2109      	movs	r1, #9
 8004b16:	68a0      	ldr	r0, [r4, #8]
 8004b18:	f7ff ff72 	bl	8004a00 <std>
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	2112      	movs	r1, #18
 8004b20:	68e0      	ldr	r0, [r4, #12]
 8004b22:	f7ff ff6d 	bl	8004a00 <std>
 8004b26:	2301      	movs	r3, #1
 8004b28:	61a3      	str	r3, [r4, #24]
 8004b2a:	e7d2      	b.n	8004ad2 <__sinit+0xe>
 8004b2c:	08005a20 	.word	0x08005a20
 8004b30:	08004a49 	.word	0x08004a49

08004b34 <__sfp>:
 8004b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b36:	0007      	movs	r7, r0
 8004b38:	f7ff ffa4 	bl	8004a84 <__sfp_lock_acquire>
 8004b3c:	4b1f      	ldr	r3, [pc, #124]	; (8004bbc <__sfp+0x88>)
 8004b3e:	681e      	ldr	r6, [r3, #0]
 8004b40:	69b3      	ldr	r3, [r6, #24]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d102      	bne.n	8004b4c <__sfp+0x18>
 8004b46:	0030      	movs	r0, r6
 8004b48:	f7ff ffbc 	bl	8004ac4 <__sinit>
 8004b4c:	3648      	adds	r6, #72	; 0x48
 8004b4e:	68b4      	ldr	r4, [r6, #8]
 8004b50:	6873      	ldr	r3, [r6, #4]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	d504      	bpl.n	8004b60 <__sfp+0x2c>
 8004b56:	6833      	ldr	r3, [r6, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d022      	beq.n	8004ba2 <__sfp+0x6e>
 8004b5c:	6836      	ldr	r6, [r6, #0]
 8004b5e:	e7f6      	b.n	8004b4e <__sfp+0x1a>
 8004b60:	220c      	movs	r2, #12
 8004b62:	5ea5      	ldrsh	r5, [r4, r2]
 8004b64:	2d00      	cmp	r5, #0
 8004b66:	d11a      	bne.n	8004b9e <__sfp+0x6a>
 8004b68:	0020      	movs	r0, r4
 8004b6a:	4b15      	ldr	r3, [pc, #84]	; (8004bc0 <__sfp+0x8c>)
 8004b6c:	3058      	adds	r0, #88	; 0x58
 8004b6e:	60e3      	str	r3, [r4, #12]
 8004b70:	6665      	str	r5, [r4, #100]	; 0x64
 8004b72:	f000 f847 	bl	8004c04 <__retarget_lock_init_recursive>
 8004b76:	f7ff ff8d 	bl	8004a94 <__sfp_lock_release>
 8004b7a:	0020      	movs	r0, r4
 8004b7c:	2208      	movs	r2, #8
 8004b7e:	0029      	movs	r1, r5
 8004b80:	6025      	str	r5, [r4, #0]
 8004b82:	60a5      	str	r5, [r4, #8]
 8004b84:	6065      	str	r5, [r4, #4]
 8004b86:	6125      	str	r5, [r4, #16]
 8004b88:	6165      	str	r5, [r4, #20]
 8004b8a:	61a5      	str	r5, [r4, #24]
 8004b8c:	305c      	adds	r0, #92	; 0x5c
 8004b8e:	f7ff ff15 	bl	80049bc <memset>
 8004b92:	6365      	str	r5, [r4, #52]	; 0x34
 8004b94:	63a5      	str	r5, [r4, #56]	; 0x38
 8004b96:	64a5      	str	r5, [r4, #72]	; 0x48
 8004b98:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004b9a:	0020      	movs	r0, r4
 8004b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b9e:	3468      	adds	r4, #104	; 0x68
 8004ba0:	e7d7      	b.n	8004b52 <__sfp+0x1e>
 8004ba2:	2104      	movs	r1, #4
 8004ba4:	0038      	movs	r0, r7
 8004ba6:	f7ff ff57 	bl	8004a58 <__sfmoreglue>
 8004baa:	1e04      	subs	r4, r0, #0
 8004bac:	6030      	str	r0, [r6, #0]
 8004bae:	d1d5      	bne.n	8004b5c <__sfp+0x28>
 8004bb0:	f7ff ff70 	bl	8004a94 <__sfp_lock_release>
 8004bb4:	230c      	movs	r3, #12
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	e7ef      	b.n	8004b9a <__sfp+0x66>
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	08005a20 	.word	0x08005a20
 8004bc0:	ffff0001 	.word	0xffff0001

08004bc4 <_fwalk_reent>:
 8004bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bc6:	0004      	movs	r4, r0
 8004bc8:	0006      	movs	r6, r0
 8004bca:	2700      	movs	r7, #0
 8004bcc:	9101      	str	r1, [sp, #4]
 8004bce:	3448      	adds	r4, #72	; 0x48
 8004bd0:	6863      	ldr	r3, [r4, #4]
 8004bd2:	68a5      	ldr	r5, [r4, #8]
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	9b00      	ldr	r3, [sp, #0]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	d504      	bpl.n	8004be8 <_fwalk_reent+0x24>
 8004bde:	6824      	ldr	r4, [r4, #0]
 8004be0:	2c00      	cmp	r4, #0
 8004be2:	d1f5      	bne.n	8004bd0 <_fwalk_reent+0xc>
 8004be4:	0038      	movs	r0, r7
 8004be6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004be8:	89ab      	ldrh	r3, [r5, #12]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d908      	bls.n	8004c00 <_fwalk_reent+0x3c>
 8004bee:	220e      	movs	r2, #14
 8004bf0:	5eab      	ldrsh	r3, [r5, r2]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	d004      	beq.n	8004c00 <_fwalk_reent+0x3c>
 8004bf6:	0029      	movs	r1, r5
 8004bf8:	0030      	movs	r0, r6
 8004bfa:	9b01      	ldr	r3, [sp, #4]
 8004bfc:	4798      	blx	r3
 8004bfe:	4307      	orrs	r7, r0
 8004c00:	3568      	adds	r5, #104	; 0x68
 8004c02:	e7e8      	b.n	8004bd6 <_fwalk_reent+0x12>

08004c04 <__retarget_lock_init_recursive>:
 8004c04:	4770      	bx	lr

08004c06 <__retarget_lock_acquire_recursive>:
 8004c06:	4770      	bx	lr

08004c08 <__retarget_lock_release_recursive>:
 8004c08:	4770      	bx	lr
	...

08004c0c <sbrk_aligned>:
 8004c0c:	b570      	push	{r4, r5, r6, lr}
 8004c0e:	4e0f      	ldr	r6, [pc, #60]	; (8004c4c <sbrk_aligned+0x40>)
 8004c10:	000d      	movs	r5, r1
 8004c12:	6831      	ldr	r1, [r6, #0]
 8004c14:	0004      	movs	r4, r0
 8004c16:	2900      	cmp	r1, #0
 8004c18:	d102      	bne.n	8004c20 <sbrk_aligned+0x14>
 8004c1a:	f000 fb73 	bl	8005304 <_sbrk_r>
 8004c1e:	6030      	str	r0, [r6, #0]
 8004c20:	0029      	movs	r1, r5
 8004c22:	0020      	movs	r0, r4
 8004c24:	f000 fb6e 	bl	8005304 <_sbrk_r>
 8004c28:	1c43      	adds	r3, r0, #1
 8004c2a:	d00a      	beq.n	8004c42 <sbrk_aligned+0x36>
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	1cc5      	adds	r5, r0, #3
 8004c30:	439d      	bics	r5, r3
 8004c32:	42a8      	cmp	r0, r5
 8004c34:	d007      	beq.n	8004c46 <sbrk_aligned+0x3a>
 8004c36:	1a29      	subs	r1, r5, r0
 8004c38:	0020      	movs	r0, r4
 8004c3a:	f000 fb63 	bl	8005304 <_sbrk_r>
 8004c3e:	1c43      	adds	r3, r0, #1
 8004c40:	d101      	bne.n	8004c46 <sbrk_aligned+0x3a>
 8004c42:	2501      	movs	r5, #1
 8004c44:	426d      	negs	r5, r5
 8004c46:	0028      	movs	r0, r5
 8004c48:	bd70      	pop	{r4, r5, r6, pc}
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	20000280 	.word	0x20000280

08004c50 <_malloc_r>:
 8004c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c52:	2203      	movs	r2, #3
 8004c54:	1ccb      	adds	r3, r1, #3
 8004c56:	4393      	bics	r3, r2
 8004c58:	3308      	adds	r3, #8
 8004c5a:	0006      	movs	r6, r0
 8004c5c:	001f      	movs	r7, r3
 8004c5e:	2b0c      	cmp	r3, #12
 8004c60:	d232      	bcs.n	8004cc8 <_malloc_r+0x78>
 8004c62:	270c      	movs	r7, #12
 8004c64:	42b9      	cmp	r1, r7
 8004c66:	d831      	bhi.n	8004ccc <_malloc_r+0x7c>
 8004c68:	0030      	movs	r0, r6
 8004c6a:	f000 fdf5 	bl	8005858 <__malloc_lock>
 8004c6e:	4d32      	ldr	r5, [pc, #200]	; (8004d38 <_malloc_r+0xe8>)
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	001c      	movs	r4, r3
 8004c74:	2c00      	cmp	r4, #0
 8004c76:	d12e      	bne.n	8004cd6 <_malloc_r+0x86>
 8004c78:	0039      	movs	r1, r7
 8004c7a:	0030      	movs	r0, r6
 8004c7c:	f7ff ffc6 	bl	8004c0c <sbrk_aligned>
 8004c80:	0004      	movs	r4, r0
 8004c82:	1c43      	adds	r3, r0, #1
 8004c84:	d11e      	bne.n	8004cc4 <_malloc_r+0x74>
 8004c86:	682c      	ldr	r4, [r5, #0]
 8004c88:	0025      	movs	r5, r4
 8004c8a:	2d00      	cmp	r5, #0
 8004c8c:	d14a      	bne.n	8004d24 <_malloc_r+0xd4>
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	0029      	movs	r1, r5
 8004c92:	18e3      	adds	r3, r4, r3
 8004c94:	0030      	movs	r0, r6
 8004c96:	9301      	str	r3, [sp, #4]
 8004c98:	f000 fb34 	bl	8005304 <_sbrk_r>
 8004c9c:	9b01      	ldr	r3, [sp, #4]
 8004c9e:	4283      	cmp	r3, r0
 8004ca0:	d143      	bne.n	8004d2a <_malloc_r+0xda>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	3703      	adds	r7, #3
 8004ca6:	1aff      	subs	r7, r7, r3
 8004ca8:	2303      	movs	r3, #3
 8004caa:	439f      	bics	r7, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	2f0c      	cmp	r7, #12
 8004cb0:	d200      	bcs.n	8004cb4 <_malloc_r+0x64>
 8004cb2:	270c      	movs	r7, #12
 8004cb4:	0039      	movs	r1, r7
 8004cb6:	0030      	movs	r0, r6
 8004cb8:	f7ff ffa8 	bl	8004c0c <sbrk_aligned>
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	d034      	beq.n	8004d2a <_malloc_r+0xda>
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	19df      	adds	r7, r3, r7
 8004cc4:	6027      	str	r7, [r4, #0]
 8004cc6:	e013      	b.n	8004cf0 <_malloc_r+0xa0>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	dacb      	bge.n	8004c64 <_malloc_r+0x14>
 8004ccc:	230c      	movs	r3, #12
 8004cce:	2500      	movs	r5, #0
 8004cd0:	6033      	str	r3, [r6, #0]
 8004cd2:	0028      	movs	r0, r5
 8004cd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004cd6:	6822      	ldr	r2, [r4, #0]
 8004cd8:	1bd1      	subs	r1, r2, r7
 8004cda:	d420      	bmi.n	8004d1e <_malloc_r+0xce>
 8004cdc:	290b      	cmp	r1, #11
 8004cde:	d917      	bls.n	8004d10 <_malloc_r+0xc0>
 8004ce0:	19e2      	adds	r2, r4, r7
 8004ce2:	6027      	str	r7, [r4, #0]
 8004ce4:	42a3      	cmp	r3, r4
 8004ce6:	d111      	bne.n	8004d0c <_malloc_r+0xbc>
 8004ce8:	602a      	str	r2, [r5, #0]
 8004cea:	6863      	ldr	r3, [r4, #4]
 8004cec:	6011      	str	r1, [r2, #0]
 8004cee:	6053      	str	r3, [r2, #4]
 8004cf0:	0030      	movs	r0, r6
 8004cf2:	0025      	movs	r5, r4
 8004cf4:	f000 fdb8 	bl	8005868 <__malloc_unlock>
 8004cf8:	2207      	movs	r2, #7
 8004cfa:	350b      	adds	r5, #11
 8004cfc:	1d23      	adds	r3, r4, #4
 8004cfe:	4395      	bics	r5, r2
 8004d00:	1aea      	subs	r2, r5, r3
 8004d02:	429d      	cmp	r5, r3
 8004d04:	d0e5      	beq.n	8004cd2 <_malloc_r+0x82>
 8004d06:	1b5b      	subs	r3, r3, r5
 8004d08:	50a3      	str	r3, [r4, r2]
 8004d0a:	e7e2      	b.n	8004cd2 <_malloc_r+0x82>
 8004d0c:	605a      	str	r2, [r3, #4]
 8004d0e:	e7ec      	b.n	8004cea <_malloc_r+0x9a>
 8004d10:	6862      	ldr	r2, [r4, #4]
 8004d12:	42a3      	cmp	r3, r4
 8004d14:	d101      	bne.n	8004d1a <_malloc_r+0xca>
 8004d16:	602a      	str	r2, [r5, #0]
 8004d18:	e7ea      	b.n	8004cf0 <_malloc_r+0xa0>
 8004d1a:	605a      	str	r2, [r3, #4]
 8004d1c:	e7e8      	b.n	8004cf0 <_malloc_r+0xa0>
 8004d1e:	0023      	movs	r3, r4
 8004d20:	6864      	ldr	r4, [r4, #4]
 8004d22:	e7a7      	b.n	8004c74 <_malloc_r+0x24>
 8004d24:	002c      	movs	r4, r5
 8004d26:	686d      	ldr	r5, [r5, #4]
 8004d28:	e7af      	b.n	8004c8a <_malloc_r+0x3a>
 8004d2a:	230c      	movs	r3, #12
 8004d2c:	0030      	movs	r0, r6
 8004d2e:	6033      	str	r3, [r6, #0]
 8004d30:	f000 fd9a 	bl	8005868 <__malloc_unlock>
 8004d34:	e7cd      	b.n	8004cd2 <_malloc_r+0x82>
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	2000027c 	.word	0x2000027c

08004d3c <__sfputc_r>:
 8004d3c:	6893      	ldr	r3, [r2, #8]
 8004d3e:	b510      	push	{r4, lr}
 8004d40:	3b01      	subs	r3, #1
 8004d42:	6093      	str	r3, [r2, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	da04      	bge.n	8004d52 <__sfputc_r+0x16>
 8004d48:	6994      	ldr	r4, [r2, #24]
 8004d4a:	42a3      	cmp	r3, r4
 8004d4c:	db07      	blt.n	8004d5e <__sfputc_r+0x22>
 8004d4e:	290a      	cmp	r1, #10
 8004d50:	d005      	beq.n	8004d5e <__sfputc_r+0x22>
 8004d52:	6813      	ldr	r3, [r2, #0]
 8004d54:	1c58      	adds	r0, r3, #1
 8004d56:	6010      	str	r0, [r2, #0]
 8004d58:	7019      	strb	r1, [r3, #0]
 8004d5a:	0008      	movs	r0, r1
 8004d5c:	bd10      	pop	{r4, pc}
 8004d5e:	f000 fb2f 	bl	80053c0 <__swbuf_r>
 8004d62:	0001      	movs	r1, r0
 8004d64:	e7f9      	b.n	8004d5a <__sfputc_r+0x1e>

08004d66 <__sfputs_r>:
 8004d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d68:	0006      	movs	r6, r0
 8004d6a:	000f      	movs	r7, r1
 8004d6c:	0014      	movs	r4, r2
 8004d6e:	18d5      	adds	r5, r2, r3
 8004d70:	42ac      	cmp	r4, r5
 8004d72:	d101      	bne.n	8004d78 <__sfputs_r+0x12>
 8004d74:	2000      	movs	r0, #0
 8004d76:	e007      	b.n	8004d88 <__sfputs_r+0x22>
 8004d78:	7821      	ldrb	r1, [r4, #0]
 8004d7a:	003a      	movs	r2, r7
 8004d7c:	0030      	movs	r0, r6
 8004d7e:	f7ff ffdd 	bl	8004d3c <__sfputc_r>
 8004d82:	3401      	adds	r4, #1
 8004d84:	1c43      	adds	r3, r0, #1
 8004d86:	d1f3      	bne.n	8004d70 <__sfputs_r+0xa>
 8004d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d8c <_vfiprintf_r>:
 8004d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d8e:	b0a1      	sub	sp, #132	; 0x84
 8004d90:	0006      	movs	r6, r0
 8004d92:	000c      	movs	r4, r1
 8004d94:	001f      	movs	r7, r3
 8004d96:	9203      	str	r2, [sp, #12]
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	d004      	beq.n	8004da6 <_vfiprintf_r+0x1a>
 8004d9c:	6983      	ldr	r3, [r0, #24]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <_vfiprintf_r+0x1a>
 8004da2:	f7ff fe8f 	bl	8004ac4 <__sinit>
 8004da6:	4b8e      	ldr	r3, [pc, #568]	; (8004fe0 <_vfiprintf_r+0x254>)
 8004da8:	429c      	cmp	r4, r3
 8004daa:	d11c      	bne.n	8004de6 <_vfiprintf_r+0x5a>
 8004dac:	6874      	ldr	r4, [r6, #4]
 8004dae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004db0:	07db      	lsls	r3, r3, #31
 8004db2:	d405      	bmi.n	8004dc0 <_vfiprintf_r+0x34>
 8004db4:	89a3      	ldrh	r3, [r4, #12]
 8004db6:	059b      	lsls	r3, r3, #22
 8004db8:	d402      	bmi.n	8004dc0 <_vfiprintf_r+0x34>
 8004dba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dbc:	f7ff ff23 	bl	8004c06 <__retarget_lock_acquire_recursive>
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	071b      	lsls	r3, r3, #28
 8004dc4:	d502      	bpl.n	8004dcc <_vfiprintf_r+0x40>
 8004dc6:	6923      	ldr	r3, [r4, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d11d      	bne.n	8004e08 <_vfiprintf_r+0x7c>
 8004dcc:	0021      	movs	r1, r4
 8004dce:	0030      	movs	r0, r6
 8004dd0:	f000 fb60 	bl	8005494 <__swsetup_r>
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	d017      	beq.n	8004e08 <_vfiprintf_r+0x7c>
 8004dd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dda:	07db      	lsls	r3, r3, #31
 8004ddc:	d50d      	bpl.n	8004dfa <_vfiprintf_r+0x6e>
 8004dde:	2001      	movs	r0, #1
 8004de0:	4240      	negs	r0, r0
 8004de2:	b021      	add	sp, #132	; 0x84
 8004de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004de6:	4b7f      	ldr	r3, [pc, #508]	; (8004fe4 <_vfiprintf_r+0x258>)
 8004de8:	429c      	cmp	r4, r3
 8004dea:	d101      	bne.n	8004df0 <_vfiprintf_r+0x64>
 8004dec:	68b4      	ldr	r4, [r6, #8]
 8004dee:	e7de      	b.n	8004dae <_vfiprintf_r+0x22>
 8004df0:	4b7d      	ldr	r3, [pc, #500]	; (8004fe8 <_vfiprintf_r+0x25c>)
 8004df2:	429c      	cmp	r4, r3
 8004df4:	d1db      	bne.n	8004dae <_vfiprintf_r+0x22>
 8004df6:	68f4      	ldr	r4, [r6, #12]
 8004df8:	e7d9      	b.n	8004dae <_vfiprintf_r+0x22>
 8004dfa:	89a3      	ldrh	r3, [r4, #12]
 8004dfc:	059b      	lsls	r3, r3, #22
 8004dfe:	d4ee      	bmi.n	8004dde <_vfiprintf_r+0x52>
 8004e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e02:	f7ff ff01 	bl	8004c08 <__retarget_lock_release_recursive>
 8004e06:	e7ea      	b.n	8004dde <_vfiprintf_r+0x52>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	ad08      	add	r5, sp, #32
 8004e0c:	616b      	str	r3, [r5, #20]
 8004e0e:	3320      	adds	r3, #32
 8004e10:	766b      	strb	r3, [r5, #25]
 8004e12:	3310      	adds	r3, #16
 8004e14:	76ab      	strb	r3, [r5, #26]
 8004e16:	9707      	str	r7, [sp, #28]
 8004e18:	9f03      	ldr	r7, [sp, #12]
 8004e1a:	783b      	ldrb	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <_vfiprintf_r+0x98>
 8004e20:	2b25      	cmp	r3, #37	; 0x25
 8004e22:	d14e      	bne.n	8004ec2 <_vfiprintf_r+0x136>
 8004e24:	9b03      	ldr	r3, [sp, #12]
 8004e26:	1afb      	subs	r3, r7, r3
 8004e28:	9305      	str	r3, [sp, #20]
 8004e2a:	9b03      	ldr	r3, [sp, #12]
 8004e2c:	429f      	cmp	r7, r3
 8004e2e:	d00d      	beq.n	8004e4c <_vfiprintf_r+0xc0>
 8004e30:	9b05      	ldr	r3, [sp, #20]
 8004e32:	0021      	movs	r1, r4
 8004e34:	0030      	movs	r0, r6
 8004e36:	9a03      	ldr	r2, [sp, #12]
 8004e38:	f7ff ff95 	bl	8004d66 <__sfputs_r>
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d100      	bne.n	8004e42 <_vfiprintf_r+0xb6>
 8004e40:	e0b5      	b.n	8004fae <_vfiprintf_r+0x222>
 8004e42:	696a      	ldr	r2, [r5, #20]
 8004e44:	9b05      	ldr	r3, [sp, #20]
 8004e46:	4694      	mov	ip, r2
 8004e48:	4463      	add	r3, ip
 8004e4a:	616b      	str	r3, [r5, #20]
 8004e4c:	783b      	ldrb	r3, [r7, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d100      	bne.n	8004e54 <_vfiprintf_r+0xc8>
 8004e52:	e0ac      	b.n	8004fae <_vfiprintf_r+0x222>
 8004e54:	2201      	movs	r2, #1
 8004e56:	1c7b      	adds	r3, r7, #1
 8004e58:	9303      	str	r3, [sp, #12]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	4252      	negs	r2, r2
 8004e5e:	606a      	str	r2, [r5, #4]
 8004e60:	a904      	add	r1, sp, #16
 8004e62:	3254      	adds	r2, #84	; 0x54
 8004e64:	1852      	adds	r2, r2, r1
 8004e66:	602b      	str	r3, [r5, #0]
 8004e68:	60eb      	str	r3, [r5, #12]
 8004e6a:	60ab      	str	r3, [r5, #8]
 8004e6c:	7013      	strb	r3, [r2, #0]
 8004e6e:	65ab      	str	r3, [r5, #88]	; 0x58
 8004e70:	9b03      	ldr	r3, [sp, #12]
 8004e72:	2205      	movs	r2, #5
 8004e74:	7819      	ldrb	r1, [r3, #0]
 8004e76:	485d      	ldr	r0, [pc, #372]	; (8004fec <_vfiprintf_r+0x260>)
 8004e78:	f000 fce2 	bl	8005840 <memchr>
 8004e7c:	9b03      	ldr	r3, [sp, #12]
 8004e7e:	1c5f      	adds	r7, r3, #1
 8004e80:	2800      	cmp	r0, #0
 8004e82:	d120      	bne.n	8004ec6 <_vfiprintf_r+0x13a>
 8004e84:	682a      	ldr	r2, [r5, #0]
 8004e86:	06d3      	lsls	r3, r2, #27
 8004e88:	d504      	bpl.n	8004e94 <_vfiprintf_r+0x108>
 8004e8a:	2353      	movs	r3, #83	; 0x53
 8004e8c:	a904      	add	r1, sp, #16
 8004e8e:	185b      	adds	r3, r3, r1
 8004e90:	2120      	movs	r1, #32
 8004e92:	7019      	strb	r1, [r3, #0]
 8004e94:	0713      	lsls	r3, r2, #28
 8004e96:	d504      	bpl.n	8004ea2 <_vfiprintf_r+0x116>
 8004e98:	2353      	movs	r3, #83	; 0x53
 8004e9a:	a904      	add	r1, sp, #16
 8004e9c:	185b      	adds	r3, r3, r1
 8004e9e:	212b      	movs	r1, #43	; 0x2b
 8004ea0:	7019      	strb	r1, [r3, #0]
 8004ea2:	9b03      	ldr	r3, [sp, #12]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8004ea8:	d016      	beq.n	8004ed8 <_vfiprintf_r+0x14c>
 8004eaa:	2100      	movs	r1, #0
 8004eac:	68eb      	ldr	r3, [r5, #12]
 8004eae:	9f03      	ldr	r7, [sp, #12]
 8004eb0:	783a      	ldrb	r2, [r7, #0]
 8004eb2:	1c78      	adds	r0, r7, #1
 8004eb4:	3a30      	subs	r2, #48	; 0x30
 8004eb6:	4684      	mov	ip, r0
 8004eb8:	2a09      	cmp	r2, #9
 8004eba:	d94f      	bls.n	8004f5c <_vfiprintf_r+0x1d0>
 8004ebc:	2900      	cmp	r1, #0
 8004ebe:	d111      	bne.n	8004ee4 <_vfiprintf_r+0x158>
 8004ec0:	e017      	b.n	8004ef2 <_vfiprintf_r+0x166>
 8004ec2:	3701      	adds	r7, #1
 8004ec4:	e7a9      	b.n	8004e1a <_vfiprintf_r+0x8e>
 8004ec6:	4b49      	ldr	r3, [pc, #292]	; (8004fec <_vfiprintf_r+0x260>)
 8004ec8:	682a      	ldr	r2, [r5, #0]
 8004eca:	1ac0      	subs	r0, r0, r3
 8004ecc:	2301      	movs	r3, #1
 8004ece:	4083      	lsls	r3, r0
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	602b      	str	r3, [r5, #0]
 8004ed4:	9703      	str	r7, [sp, #12]
 8004ed6:	e7cb      	b.n	8004e70 <_vfiprintf_r+0xe4>
 8004ed8:	9b07      	ldr	r3, [sp, #28]
 8004eda:	1d19      	adds	r1, r3, #4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	9107      	str	r1, [sp, #28]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	db01      	blt.n	8004ee8 <_vfiprintf_r+0x15c>
 8004ee4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ee6:	e004      	b.n	8004ef2 <_vfiprintf_r+0x166>
 8004ee8:	425b      	negs	r3, r3
 8004eea:	60eb      	str	r3, [r5, #12]
 8004eec:	2302      	movs	r3, #2
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	602b      	str	r3, [r5, #0]
 8004ef2:	783b      	ldrb	r3, [r7, #0]
 8004ef4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ef6:	d10a      	bne.n	8004f0e <_vfiprintf_r+0x182>
 8004ef8:	787b      	ldrb	r3, [r7, #1]
 8004efa:	2b2a      	cmp	r3, #42	; 0x2a
 8004efc:	d137      	bne.n	8004f6e <_vfiprintf_r+0x1e2>
 8004efe:	9b07      	ldr	r3, [sp, #28]
 8004f00:	3702      	adds	r7, #2
 8004f02:	1d1a      	adds	r2, r3, #4
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	9207      	str	r2, [sp, #28]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	db2d      	blt.n	8004f68 <_vfiprintf_r+0x1dc>
 8004f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f0e:	2203      	movs	r2, #3
 8004f10:	7839      	ldrb	r1, [r7, #0]
 8004f12:	4837      	ldr	r0, [pc, #220]	; (8004ff0 <_vfiprintf_r+0x264>)
 8004f14:	f000 fc94 	bl	8005840 <memchr>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	d007      	beq.n	8004f2c <_vfiprintf_r+0x1a0>
 8004f1c:	4b34      	ldr	r3, [pc, #208]	; (8004ff0 <_vfiprintf_r+0x264>)
 8004f1e:	682a      	ldr	r2, [r5, #0]
 8004f20:	1ac0      	subs	r0, r0, r3
 8004f22:	2340      	movs	r3, #64	; 0x40
 8004f24:	4083      	lsls	r3, r0
 8004f26:	4313      	orrs	r3, r2
 8004f28:	3701      	adds	r7, #1
 8004f2a:	602b      	str	r3, [r5, #0]
 8004f2c:	7839      	ldrb	r1, [r7, #0]
 8004f2e:	1c7b      	adds	r3, r7, #1
 8004f30:	2206      	movs	r2, #6
 8004f32:	4830      	ldr	r0, [pc, #192]	; (8004ff4 <_vfiprintf_r+0x268>)
 8004f34:	9303      	str	r3, [sp, #12]
 8004f36:	7629      	strb	r1, [r5, #24]
 8004f38:	f000 fc82 	bl	8005840 <memchr>
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	d045      	beq.n	8004fcc <_vfiprintf_r+0x240>
 8004f40:	4b2d      	ldr	r3, [pc, #180]	; (8004ff8 <_vfiprintf_r+0x26c>)
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d127      	bne.n	8004f96 <_vfiprintf_r+0x20a>
 8004f46:	2207      	movs	r2, #7
 8004f48:	9b07      	ldr	r3, [sp, #28]
 8004f4a:	3307      	adds	r3, #7
 8004f4c:	4393      	bics	r3, r2
 8004f4e:	3308      	adds	r3, #8
 8004f50:	9307      	str	r3, [sp, #28]
 8004f52:	696b      	ldr	r3, [r5, #20]
 8004f54:	9a04      	ldr	r2, [sp, #16]
 8004f56:	189b      	adds	r3, r3, r2
 8004f58:	616b      	str	r3, [r5, #20]
 8004f5a:	e75d      	b.n	8004e18 <_vfiprintf_r+0x8c>
 8004f5c:	210a      	movs	r1, #10
 8004f5e:	434b      	muls	r3, r1
 8004f60:	4667      	mov	r7, ip
 8004f62:	189b      	adds	r3, r3, r2
 8004f64:	3909      	subs	r1, #9
 8004f66:	e7a3      	b.n	8004eb0 <_vfiprintf_r+0x124>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	425b      	negs	r3, r3
 8004f6c:	e7ce      	b.n	8004f0c <_vfiprintf_r+0x180>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	001a      	movs	r2, r3
 8004f72:	3701      	adds	r7, #1
 8004f74:	606b      	str	r3, [r5, #4]
 8004f76:	7839      	ldrb	r1, [r7, #0]
 8004f78:	1c78      	adds	r0, r7, #1
 8004f7a:	3930      	subs	r1, #48	; 0x30
 8004f7c:	4684      	mov	ip, r0
 8004f7e:	2909      	cmp	r1, #9
 8004f80:	d903      	bls.n	8004f8a <_vfiprintf_r+0x1fe>
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0c3      	beq.n	8004f0e <_vfiprintf_r+0x182>
 8004f86:	9209      	str	r2, [sp, #36]	; 0x24
 8004f88:	e7c1      	b.n	8004f0e <_vfiprintf_r+0x182>
 8004f8a:	230a      	movs	r3, #10
 8004f8c:	435a      	muls	r2, r3
 8004f8e:	4667      	mov	r7, ip
 8004f90:	1852      	adds	r2, r2, r1
 8004f92:	3b09      	subs	r3, #9
 8004f94:	e7ef      	b.n	8004f76 <_vfiprintf_r+0x1ea>
 8004f96:	ab07      	add	r3, sp, #28
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	0022      	movs	r2, r4
 8004f9c:	0029      	movs	r1, r5
 8004f9e:	0030      	movs	r0, r6
 8004fa0:	4b16      	ldr	r3, [pc, #88]	; (8004ffc <_vfiprintf_r+0x270>)
 8004fa2:	e000      	b.n	8004fa6 <_vfiprintf_r+0x21a>
 8004fa4:	bf00      	nop
 8004fa6:	9004      	str	r0, [sp, #16]
 8004fa8:	9b04      	ldr	r3, [sp, #16]
 8004faa:	3301      	adds	r3, #1
 8004fac:	d1d1      	bne.n	8004f52 <_vfiprintf_r+0x1c6>
 8004fae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fb0:	07db      	lsls	r3, r3, #31
 8004fb2:	d405      	bmi.n	8004fc0 <_vfiprintf_r+0x234>
 8004fb4:	89a3      	ldrh	r3, [r4, #12]
 8004fb6:	059b      	lsls	r3, r3, #22
 8004fb8:	d402      	bmi.n	8004fc0 <_vfiprintf_r+0x234>
 8004fba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fbc:	f7ff fe24 	bl	8004c08 <__retarget_lock_release_recursive>
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	065b      	lsls	r3, r3, #25
 8004fc4:	d500      	bpl.n	8004fc8 <_vfiprintf_r+0x23c>
 8004fc6:	e70a      	b.n	8004dde <_vfiprintf_r+0x52>
 8004fc8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004fca:	e70a      	b.n	8004de2 <_vfiprintf_r+0x56>
 8004fcc:	ab07      	add	r3, sp, #28
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	0022      	movs	r2, r4
 8004fd2:	0029      	movs	r1, r5
 8004fd4:	0030      	movs	r0, r6
 8004fd6:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <_vfiprintf_r+0x270>)
 8004fd8:	f000 f882 	bl	80050e0 <_printf_i>
 8004fdc:	e7e3      	b.n	8004fa6 <_vfiprintf_r+0x21a>
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	08005a44 	.word	0x08005a44
 8004fe4:	08005a64 	.word	0x08005a64
 8004fe8:	08005a24 	.word	0x08005a24
 8004fec:	08005a84 	.word	0x08005a84
 8004ff0:	08005a8a 	.word	0x08005a8a
 8004ff4:	08005a8e 	.word	0x08005a8e
 8004ff8:	00000000 	.word	0x00000000
 8004ffc:	08004d67 	.word	0x08004d67

08005000 <_printf_common>:
 8005000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005002:	0015      	movs	r5, r2
 8005004:	9301      	str	r3, [sp, #4]
 8005006:	688a      	ldr	r2, [r1, #8]
 8005008:	690b      	ldr	r3, [r1, #16]
 800500a:	000c      	movs	r4, r1
 800500c:	9000      	str	r0, [sp, #0]
 800500e:	4293      	cmp	r3, r2
 8005010:	da00      	bge.n	8005014 <_printf_common+0x14>
 8005012:	0013      	movs	r3, r2
 8005014:	0022      	movs	r2, r4
 8005016:	602b      	str	r3, [r5, #0]
 8005018:	3243      	adds	r2, #67	; 0x43
 800501a:	7812      	ldrb	r2, [r2, #0]
 800501c:	2a00      	cmp	r2, #0
 800501e:	d001      	beq.n	8005024 <_printf_common+0x24>
 8005020:	3301      	adds	r3, #1
 8005022:	602b      	str	r3, [r5, #0]
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	069b      	lsls	r3, r3, #26
 8005028:	d502      	bpl.n	8005030 <_printf_common+0x30>
 800502a:	682b      	ldr	r3, [r5, #0]
 800502c:	3302      	adds	r3, #2
 800502e:	602b      	str	r3, [r5, #0]
 8005030:	6822      	ldr	r2, [r4, #0]
 8005032:	2306      	movs	r3, #6
 8005034:	0017      	movs	r7, r2
 8005036:	401f      	ands	r7, r3
 8005038:	421a      	tst	r2, r3
 800503a:	d027      	beq.n	800508c <_printf_common+0x8c>
 800503c:	0023      	movs	r3, r4
 800503e:	3343      	adds	r3, #67	; 0x43
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	1e5a      	subs	r2, r3, #1
 8005044:	4193      	sbcs	r3, r2
 8005046:	6822      	ldr	r2, [r4, #0]
 8005048:	0692      	lsls	r2, r2, #26
 800504a:	d430      	bmi.n	80050ae <_printf_common+0xae>
 800504c:	0022      	movs	r2, r4
 800504e:	9901      	ldr	r1, [sp, #4]
 8005050:	9800      	ldr	r0, [sp, #0]
 8005052:	9e08      	ldr	r6, [sp, #32]
 8005054:	3243      	adds	r2, #67	; 0x43
 8005056:	47b0      	blx	r6
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d025      	beq.n	80050a8 <_printf_common+0xa8>
 800505c:	2306      	movs	r3, #6
 800505e:	6820      	ldr	r0, [r4, #0]
 8005060:	682a      	ldr	r2, [r5, #0]
 8005062:	68e1      	ldr	r1, [r4, #12]
 8005064:	2500      	movs	r5, #0
 8005066:	4003      	ands	r3, r0
 8005068:	2b04      	cmp	r3, #4
 800506a:	d103      	bne.n	8005074 <_printf_common+0x74>
 800506c:	1a8d      	subs	r5, r1, r2
 800506e:	43eb      	mvns	r3, r5
 8005070:	17db      	asrs	r3, r3, #31
 8005072:	401d      	ands	r5, r3
 8005074:	68a3      	ldr	r3, [r4, #8]
 8005076:	6922      	ldr	r2, [r4, #16]
 8005078:	4293      	cmp	r3, r2
 800507a:	dd01      	ble.n	8005080 <_printf_common+0x80>
 800507c:	1a9b      	subs	r3, r3, r2
 800507e:	18ed      	adds	r5, r5, r3
 8005080:	2700      	movs	r7, #0
 8005082:	42bd      	cmp	r5, r7
 8005084:	d120      	bne.n	80050c8 <_printf_common+0xc8>
 8005086:	2000      	movs	r0, #0
 8005088:	e010      	b.n	80050ac <_printf_common+0xac>
 800508a:	3701      	adds	r7, #1
 800508c:	68e3      	ldr	r3, [r4, #12]
 800508e:	682a      	ldr	r2, [r5, #0]
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	42bb      	cmp	r3, r7
 8005094:	ddd2      	ble.n	800503c <_printf_common+0x3c>
 8005096:	0022      	movs	r2, r4
 8005098:	2301      	movs	r3, #1
 800509a:	9901      	ldr	r1, [sp, #4]
 800509c:	9800      	ldr	r0, [sp, #0]
 800509e:	9e08      	ldr	r6, [sp, #32]
 80050a0:	3219      	adds	r2, #25
 80050a2:	47b0      	blx	r6
 80050a4:	1c43      	adds	r3, r0, #1
 80050a6:	d1f0      	bne.n	800508a <_printf_common+0x8a>
 80050a8:	2001      	movs	r0, #1
 80050aa:	4240      	negs	r0, r0
 80050ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050ae:	2030      	movs	r0, #48	; 0x30
 80050b0:	18e1      	adds	r1, r4, r3
 80050b2:	3143      	adds	r1, #67	; 0x43
 80050b4:	7008      	strb	r0, [r1, #0]
 80050b6:	0021      	movs	r1, r4
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	3145      	adds	r1, #69	; 0x45
 80050bc:	7809      	ldrb	r1, [r1, #0]
 80050be:	18a2      	adds	r2, r4, r2
 80050c0:	3243      	adds	r2, #67	; 0x43
 80050c2:	3302      	adds	r3, #2
 80050c4:	7011      	strb	r1, [r2, #0]
 80050c6:	e7c1      	b.n	800504c <_printf_common+0x4c>
 80050c8:	0022      	movs	r2, r4
 80050ca:	2301      	movs	r3, #1
 80050cc:	9901      	ldr	r1, [sp, #4]
 80050ce:	9800      	ldr	r0, [sp, #0]
 80050d0:	9e08      	ldr	r6, [sp, #32]
 80050d2:	321a      	adds	r2, #26
 80050d4:	47b0      	blx	r6
 80050d6:	1c43      	adds	r3, r0, #1
 80050d8:	d0e6      	beq.n	80050a8 <_printf_common+0xa8>
 80050da:	3701      	adds	r7, #1
 80050dc:	e7d1      	b.n	8005082 <_printf_common+0x82>
	...

080050e0 <_printf_i>:
 80050e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050e2:	b08b      	sub	sp, #44	; 0x2c
 80050e4:	9206      	str	r2, [sp, #24]
 80050e6:	000a      	movs	r2, r1
 80050e8:	3243      	adds	r2, #67	; 0x43
 80050ea:	9307      	str	r3, [sp, #28]
 80050ec:	9005      	str	r0, [sp, #20]
 80050ee:	9204      	str	r2, [sp, #16]
 80050f0:	7e0a      	ldrb	r2, [r1, #24]
 80050f2:	000c      	movs	r4, r1
 80050f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050f6:	2a78      	cmp	r2, #120	; 0x78
 80050f8:	d807      	bhi.n	800510a <_printf_i+0x2a>
 80050fa:	2a62      	cmp	r2, #98	; 0x62
 80050fc:	d809      	bhi.n	8005112 <_printf_i+0x32>
 80050fe:	2a00      	cmp	r2, #0
 8005100:	d100      	bne.n	8005104 <_printf_i+0x24>
 8005102:	e0c1      	b.n	8005288 <_printf_i+0x1a8>
 8005104:	2a58      	cmp	r2, #88	; 0x58
 8005106:	d100      	bne.n	800510a <_printf_i+0x2a>
 8005108:	e08c      	b.n	8005224 <_printf_i+0x144>
 800510a:	0026      	movs	r6, r4
 800510c:	3642      	adds	r6, #66	; 0x42
 800510e:	7032      	strb	r2, [r6, #0]
 8005110:	e022      	b.n	8005158 <_printf_i+0x78>
 8005112:	0010      	movs	r0, r2
 8005114:	3863      	subs	r0, #99	; 0x63
 8005116:	2815      	cmp	r0, #21
 8005118:	d8f7      	bhi.n	800510a <_printf_i+0x2a>
 800511a:	f7fa fff5 	bl	8000108 <__gnu_thumb1_case_shi>
 800511e:	0016      	.short	0x0016
 8005120:	fff6001f 	.word	0xfff6001f
 8005124:	fff6fff6 	.word	0xfff6fff6
 8005128:	001ffff6 	.word	0x001ffff6
 800512c:	fff6fff6 	.word	0xfff6fff6
 8005130:	fff6fff6 	.word	0xfff6fff6
 8005134:	003600a8 	.word	0x003600a8
 8005138:	fff6009a 	.word	0xfff6009a
 800513c:	00b9fff6 	.word	0x00b9fff6
 8005140:	0036fff6 	.word	0x0036fff6
 8005144:	fff6fff6 	.word	0xfff6fff6
 8005148:	009e      	.short	0x009e
 800514a:	0026      	movs	r6, r4
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	3642      	adds	r6, #66	; 0x42
 8005150:	1d11      	adds	r1, r2, #4
 8005152:	6019      	str	r1, [r3, #0]
 8005154:	6813      	ldr	r3, [r2, #0]
 8005156:	7033      	strb	r3, [r6, #0]
 8005158:	2301      	movs	r3, #1
 800515a:	e0a7      	b.n	80052ac <_printf_i+0x1cc>
 800515c:	6808      	ldr	r0, [r1, #0]
 800515e:	6819      	ldr	r1, [r3, #0]
 8005160:	1d0a      	adds	r2, r1, #4
 8005162:	0605      	lsls	r5, r0, #24
 8005164:	d50b      	bpl.n	800517e <_printf_i+0x9e>
 8005166:	680d      	ldr	r5, [r1, #0]
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	2d00      	cmp	r5, #0
 800516c:	da03      	bge.n	8005176 <_printf_i+0x96>
 800516e:	232d      	movs	r3, #45	; 0x2d
 8005170:	9a04      	ldr	r2, [sp, #16]
 8005172:	426d      	negs	r5, r5
 8005174:	7013      	strb	r3, [r2, #0]
 8005176:	4b61      	ldr	r3, [pc, #388]	; (80052fc <_printf_i+0x21c>)
 8005178:	270a      	movs	r7, #10
 800517a:	9303      	str	r3, [sp, #12]
 800517c:	e01b      	b.n	80051b6 <_printf_i+0xd6>
 800517e:	680d      	ldr	r5, [r1, #0]
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	0641      	lsls	r1, r0, #25
 8005184:	d5f1      	bpl.n	800516a <_printf_i+0x8a>
 8005186:	b22d      	sxth	r5, r5
 8005188:	e7ef      	b.n	800516a <_printf_i+0x8a>
 800518a:	680d      	ldr	r5, [r1, #0]
 800518c:	6819      	ldr	r1, [r3, #0]
 800518e:	1d08      	adds	r0, r1, #4
 8005190:	6018      	str	r0, [r3, #0]
 8005192:	062e      	lsls	r6, r5, #24
 8005194:	d501      	bpl.n	800519a <_printf_i+0xba>
 8005196:	680d      	ldr	r5, [r1, #0]
 8005198:	e003      	b.n	80051a2 <_printf_i+0xc2>
 800519a:	066d      	lsls	r5, r5, #25
 800519c:	d5fb      	bpl.n	8005196 <_printf_i+0xb6>
 800519e:	680d      	ldr	r5, [r1, #0]
 80051a0:	b2ad      	uxth	r5, r5
 80051a2:	4b56      	ldr	r3, [pc, #344]	; (80052fc <_printf_i+0x21c>)
 80051a4:	2708      	movs	r7, #8
 80051a6:	9303      	str	r3, [sp, #12]
 80051a8:	2a6f      	cmp	r2, #111	; 0x6f
 80051aa:	d000      	beq.n	80051ae <_printf_i+0xce>
 80051ac:	3702      	adds	r7, #2
 80051ae:	0023      	movs	r3, r4
 80051b0:	2200      	movs	r2, #0
 80051b2:	3343      	adds	r3, #67	; 0x43
 80051b4:	701a      	strb	r2, [r3, #0]
 80051b6:	6863      	ldr	r3, [r4, #4]
 80051b8:	60a3      	str	r3, [r4, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	db03      	blt.n	80051c6 <_printf_i+0xe6>
 80051be:	2204      	movs	r2, #4
 80051c0:	6821      	ldr	r1, [r4, #0]
 80051c2:	4391      	bics	r1, r2
 80051c4:	6021      	str	r1, [r4, #0]
 80051c6:	2d00      	cmp	r5, #0
 80051c8:	d102      	bne.n	80051d0 <_printf_i+0xf0>
 80051ca:	9e04      	ldr	r6, [sp, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00c      	beq.n	80051ea <_printf_i+0x10a>
 80051d0:	9e04      	ldr	r6, [sp, #16]
 80051d2:	0028      	movs	r0, r5
 80051d4:	0039      	movs	r1, r7
 80051d6:	f7fb f827 	bl	8000228 <__aeabi_uidivmod>
 80051da:	9b03      	ldr	r3, [sp, #12]
 80051dc:	3e01      	subs	r6, #1
 80051de:	5c5b      	ldrb	r3, [r3, r1]
 80051e0:	7033      	strb	r3, [r6, #0]
 80051e2:	002b      	movs	r3, r5
 80051e4:	0005      	movs	r5, r0
 80051e6:	429f      	cmp	r7, r3
 80051e8:	d9f3      	bls.n	80051d2 <_printf_i+0xf2>
 80051ea:	2f08      	cmp	r7, #8
 80051ec:	d109      	bne.n	8005202 <_printf_i+0x122>
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	07db      	lsls	r3, r3, #31
 80051f2:	d506      	bpl.n	8005202 <_printf_i+0x122>
 80051f4:	6863      	ldr	r3, [r4, #4]
 80051f6:	6922      	ldr	r2, [r4, #16]
 80051f8:	4293      	cmp	r3, r2
 80051fa:	dc02      	bgt.n	8005202 <_printf_i+0x122>
 80051fc:	2330      	movs	r3, #48	; 0x30
 80051fe:	3e01      	subs	r6, #1
 8005200:	7033      	strb	r3, [r6, #0]
 8005202:	9b04      	ldr	r3, [sp, #16]
 8005204:	1b9b      	subs	r3, r3, r6
 8005206:	6123      	str	r3, [r4, #16]
 8005208:	9b07      	ldr	r3, [sp, #28]
 800520a:	0021      	movs	r1, r4
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	9805      	ldr	r0, [sp, #20]
 8005210:	9b06      	ldr	r3, [sp, #24]
 8005212:	aa09      	add	r2, sp, #36	; 0x24
 8005214:	f7ff fef4 	bl	8005000 <_printf_common>
 8005218:	1c43      	adds	r3, r0, #1
 800521a:	d14c      	bne.n	80052b6 <_printf_i+0x1d6>
 800521c:	2001      	movs	r0, #1
 800521e:	4240      	negs	r0, r0
 8005220:	b00b      	add	sp, #44	; 0x2c
 8005222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005224:	3145      	adds	r1, #69	; 0x45
 8005226:	700a      	strb	r2, [r1, #0]
 8005228:	4a34      	ldr	r2, [pc, #208]	; (80052fc <_printf_i+0x21c>)
 800522a:	9203      	str	r2, [sp, #12]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	6821      	ldr	r1, [r4, #0]
 8005230:	ca20      	ldmia	r2!, {r5}
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	0608      	lsls	r0, r1, #24
 8005236:	d516      	bpl.n	8005266 <_printf_i+0x186>
 8005238:	07cb      	lsls	r3, r1, #31
 800523a:	d502      	bpl.n	8005242 <_printf_i+0x162>
 800523c:	2320      	movs	r3, #32
 800523e:	4319      	orrs	r1, r3
 8005240:	6021      	str	r1, [r4, #0]
 8005242:	2710      	movs	r7, #16
 8005244:	2d00      	cmp	r5, #0
 8005246:	d1b2      	bne.n	80051ae <_printf_i+0xce>
 8005248:	2320      	movs	r3, #32
 800524a:	6822      	ldr	r2, [r4, #0]
 800524c:	439a      	bics	r2, r3
 800524e:	6022      	str	r2, [r4, #0]
 8005250:	e7ad      	b.n	80051ae <_printf_i+0xce>
 8005252:	2220      	movs	r2, #32
 8005254:	6809      	ldr	r1, [r1, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	6022      	str	r2, [r4, #0]
 800525a:	0022      	movs	r2, r4
 800525c:	2178      	movs	r1, #120	; 0x78
 800525e:	3245      	adds	r2, #69	; 0x45
 8005260:	7011      	strb	r1, [r2, #0]
 8005262:	4a27      	ldr	r2, [pc, #156]	; (8005300 <_printf_i+0x220>)
 8005264:	e7e1      	b.n	800522a <_printf_i+0x14a>
 8005266:	0648      	lsls	r0, r1, #25
 8005268:	d5e6      	bpl.n	8005238 <_printf_i+0x158>
 800526a:	b2ad      	uxth	r5, r5
 800526c:	e7e4      	b.n	8005238 <_printf_i+0x158>
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	680d      	ldr	r5, [r1, #0]
 8005272:	1d10      	adds	r0, r2, #4
 8005274:	6949      	ldr	r1, [r1, #20]
 8005276:	6018      	str	r0, [r3, #0]
 8005278:	6813      	ldr	r3, [r2, #0]
 800527a:	062e      	lsls	r6, r5, #24
 800527c:	d501      	bpl.n	8005282 <_printf_i+0x1a2>
 800527e:	6019      	str	r1, [r3, #0]
 8005280:	e002      	b.n	8005288 <_printf_i+0x1a8>
 8005282:	066d      	lsls	r5, r5, #25
 8005284:	d5fb      	bpl.n	800527e <_printf_i+0x19e>
 8005286:	8019      	strh	r1, [r3, #0]
 8005288:	2300      	movs	r3, #0
 800528a:	9e04      	ldr	r6, [sp, #16]
 800528c:	6123      	str	r3, [r4, #16]
 800528e:	e7bb      	b.n	8005208 <_printf_i+0x128>
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	1d11      	adds	r1, r2, #4
 8005294:	6019      	str	r1, [r3, #0]
 8005296:	6816      	ldr	r6, [r2, #0]
 8005298:	2100      	movs	r1, #0
 800529a:	0030      	movs	r0, r6
 800529c:	6862      	ldr	r2, [r4, #4]
 800529e:	f000 facf 	bl	8005840 <memchr>
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d001      	beq.n	80052aa <_printf_i+0x1ca>
 80052a6:	1b80      	subs	r0, r0, r6
 80052a8:	6060      	str	r0, [r4, #4]
 80052aa:	6863      	ldr	r3, [r4, #4]
 80052ac:	6123      	str	r3, [r4, #16]
 80052ae:	2300      	movs	r3, #0
 80052b0:	9a04      	ldr	r2, [sp, #16]
 80052b2:	7013      	strb	r3, [r2, #0]
 80052b4:	e7a8      	b.n	8005208 <_printf_i+0x128>
 80052b6:	6923      	ldr	r3, [r4, #16]
 80052b8:	0032      	movs	r2, r6
 80052ba:	9906      	ldr	r1, [sp, #24]
 80052bc:	9805      	ldr	r0, [sp, #20]
 80052be:	9d07      	ldr	r5, [sp, #28]
 80052c0:	47a8      	blx	r5
 80052c2:	1c43      	adds	r3, r0, #1
 80052c4:	d0aa      	beq.n	800521c <_printf_i+0x13c>
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	079b      	lsls	r3, r3, #30
 80052ca:	d415      	bmi.n	80052f8 <_printf_i+0x218>
 80052cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ce:	68e0      	ldr	r0, [r4, #12]
 80052d0:	4298      	cmp	r0, r3
 80052d2:	daa5      	bge.n	8005220 <_printf_i+0x140>
 80052d4:	0018      	movs	r0, r3
 80052d6:	e7a3      	b.n	8005220 <_printf_i+0x140>
 80052d8:	0022      	movs	r2, r4
 80052da:	2301      	movs	r3, #1
 80052dc:	9906      	ldr	r1, [sp, #24]
 80052de:	9805      	ldr	r0, [sp, #20]
 80052e0:	9e07      	ldr	r6, [sp, #28]
 80052e2:	3219      	adds	r2, #25
 80052e4:	47b0      	blx	r6
 80052e6:	1c43      	adds	r3, r0, #1
 80052e8:	d098      	beq.n	800521c <_printf_i+0x13c>
 80052ea:	3501      	adds	r5, #1
 80052ec:	68e3      	ldr	r3, [r4, #12]
 80052ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052f0:	1a9b      	subs	r3, r3, r2
 80052f2:	42ab      	cmp	r3, r5
 80052f4:	dcf0      	bgt.n	80052d8 <_printf_i+0x1f8>
 80052f6:	e7e9      	b.n	80052cc <_printf_i+0x1ec>
 80052f8:	2500      	movs	r5, #0
 80052fa:	e7f7      	b.n	80052ec <_printf_i+0x20c>
 80052fc:	08005a95 	.word	0x08005a95
 8005300:	08005aa6 	.word	0x08005aa6

08005304 <_sbrk_r>:
 8005304:	2300      	movs	r3, #0
 8005306:	b570      	push	{r4, r5, r6, lr}
 8005308:	4d06      	ldr	r5, [pc, #24]	; (8005324 <_sbrk_r+0x20>)
 800530a:	0004      	movs	r4, r0
 800530c:	0008      	movs	r0, r1
 800530e:	602b      	str	r3, [r5, #0]
 8005310:	f7fb fda0 	bl	8000e54 <_sbrk>
 8005314:	1c43      	adds	r3, r0, #1
 8005316:	d103      	bne.n	8005320 <_sbrk_r+0x1c>
 8005318:	682b      	ldr	r3, [r5, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d000      	beq.n	8005320 <_sbrk_r+0x1c>
 800531e:	6023      	str	r3, [r4, #0]
 8005320:	bd70      	pop	{r4, r5, r6, pc}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	20000284 	.word	0x20000284

08005328 <__sread>:
 8005328:	b570      	push	{r4, r5, r6, lr}
 800532a:	000c      	movs	r4, r1
 800532c:	250e      	movs	r5, #14
 800532e:	5f49      	ldrsh	r1, [r1, r5]
 8005330:	f000 faec 	bl	800590c <_read_r>
 8005334:	2800      	cmp	r0, #0
 8005336:	db03      	blt.n	8005340 <__sread+0x18>
 8005338:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800533a:	181b      	adds	r3, r3, r0
 800533c:	6563      	str	r3, [r4, #84]	; 0x54
 800533e:	bd70      	pop	{r4, r5, r6, pc}
 8005340:	89a3      	ldrh	r3, [r4, #12]
 8005342:	4a02      	ldr	r2, [pc, #8]	; (800534c <__sread+0x24>)
 8005344:	4013      	ands	r3, r2
 8005346:	81a3      	strh	r3, [r4, #12]
 8005348:	e7f9      	b.n	800533e <__sread+0x16>
 800534a:	46c0      	nop			; (mov r8, r8)
 800534c:	ffffefff 	.word	0xffffefff

08005350 <__swrite>:
 8005350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005352:	001f      	movs	r7, r3
 8005354:	898b      	ldrh	r3, [r1, #12]
 8005356:	0005      	movs	r5, r0
 8005358:	000c      	movs	r4, r1
 800535a:	0016      	movs	r6, r2
 800535c:	05db      	lsls	r3, r3, #23
 800535e:	d505      	bpl.n	800536c <__swrite+0x1c>
 8005360:	230e      	movs	r3, #14
 8005362:	5ec9      	ldrsh	r1, [r1, r3]
 8005364:	2200      	movs	r2, #0
 8005366:	2302      	movs	r3, #2
 8005368:	f000 f9ea 	bl	8005740 <_lseek_r>
 800536c:	89a3      	ldrh	r3, [r4, #12]
 800536e:	4a05      	ldr	r2, [pc, #20]	; (8005384 <__swrite+0x34>)
 8005370:	0028      	movs	r0, r5
 8005372:	4013      	ands	r3, r2
 8005374:	81a3      	strh	r3, [r4, #12]
 8005376:	0032      	movs	r2, r6
 8005378:	230e      	movs	r3, #14
 800537a:	5ee1      	ldrsh	r1, [r4, r3]
 800537c:	003b      	movs	r3, r7
 800537e:	f000 f875 	bl	800546c <_write_r>
 8005382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005384:	ffffefff 	.word	0xffffefff

08005388 <__sseek>:
 8005388:	b570      	push	{r4, r5, r6, lr}
 800538a:	000c      	movs	r4, r1
 800538c:	250e      	movs	r5, #14
 800538e:	5f49      	ldrsh	r1, [r1, r5]
 8005390:	f000 f9d6 	bl	8005740 <_lseek_r>
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	1c42      	adds	r2, r0, #1
 8005398:	d103      	bne.n	80053a2 <__sseek+0x1a>
 800539a:	4a05      	ldr	r2, [pc, #20]	; (80053b0 <__sseek+0x28>)
 800539c:	4013      	ands	r3, r2
 800539e:	81a3      	strh	r3, [r4, #12]
 80053a0:	bd70      	pop	{r4, r5, r6, pc}
 80053a2:	2280      	movs	r2, #128	; 0x80
 80053a4:	0152      	lsls	r2, r2, #5
 80053a6:	4313      	orrs	r3, r2
 80053a8:	81a3      	strh	r3, [r4, #12]
 80053aa:	6560      	str	r0, [r4, #84]	; 0x54
 80053ac:	e7f8      	b.n	80053a0 <__sseek+0x18>
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	ffffefff 	.word	0xffffefff

080053b4 <__sclose>:
 80053b4:	b510      	push	{r4, lr}
 80053b6:	230e      	movs	r3, #14
 80053b8:	5ec9      	ldrsh	r1, [r1, r3]
 80053ba:	f000 f8e3 	bl	8005584 <_close_r>
 80053be:	bd10      	pop	{r4, pc}

080053c0 <__swbuf_r>:
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	0005      	movs	r5, r0
 80053c4:	000e      	movs	r6, r1
 80053c6:	0014      	movs	r4, r2
 80053c8:	2800      	cmp	r0, #0
 80053ca:	d004      	beq.n	80053d6 <__swbuf_r+0x16>
 80053cc:	6983      	ldr	r3, [r0, #24]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <__swbuf_r+0x16>
 80053d2:	f7ff fb77 	bl	8004ac4 <__sinit>
 80053d6:	4b22      	ldr	r3, [pc, #136]	; (8005460 <__swbuf_r+0xa0>)
 80053d8:	429c      	cmp	r4, r3
 80053da:	d12e      	bne.n	800543a <__swbuf_r+0x7a>
 80053dc:	686c      	ldr	r4, [r5, #4]
 80053de:	69a3      	ldr	r3, [r4, #24]
 80053e0:	60a3      	str	r3, [r4, #8]
 80053e2:	89a3      	ldrh	r3, [r4, #12]
 80053e4:	071b      	lsls	r3, r3, #28
 80053e6:	d532      	bpl.n	800544e <__swbuf_r+0x8e>
 80053e8:	6923      	ldr	r3, [r4, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d02f      	beq.n	800544e <__swbuf_r+0x8e>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	6922      	ldr	r2, [r4, #16]
 80053f2:	b2f7      	uxtb	r7, r6
 80053f4:	1a98      	subs	r0, r3, r2
 80053f6:	6963      	ldr	r3, [r4, #20]
 80053f8:	b2f6      	uxtb	r6, r6
 80053fa:	4283      	cmp	r3, r0
 80053fc:	dc05      	bgt.n	800540a <__swbuf_r+0x4a>
 80053fe:	0021      	movs	r1, r4
 8005400:	0028      	movs	r0, r5
 8005402:	f000 f95d 	bl	80056c0 <_fflush_r>
 8005406:	2800      	cmp	r0, #0
 8005408:	d127      	bne.n	800545a <__swbuf_r+0x9a>
 800540a:	68a3      	ldr	r3, [r4, #8]
 800540c:	3001      	adds	r0, #1
 800540e:	3b01      	subs	r3, #1
 8005410:	60a3      	str	r3, [r4, #8]
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	6022      	str	r2, [r4, #0]
 8005418:	701f      	strb	r7, [r3, #0]
 800541a:	6963      	ldr	r3, [r4, #20]
 800541c:	4283      	cmp	r3, r0
 800541e:	d004      	beq.n	800542a <__swbuf_r+0x6a>
 8005420:	89a3      	ldrh	r3, [r4, #12]
 8005422:	07db      	lsls	r3, r3, #31
 8005424:	d507      	bpl.n	8005436 <__swbuf_r+0x76>
 8005426:	2e0a      	cmp	r6, #10
 8005428:	d105      	bne.n	8005436 <__swbuf_r+0x76>
 800542a:	0021      	movs	r1, r4
 800542c:	0028      	movs	r0, r5
 800542e:	f000 f947 	bl	80056c0 <_fflush_r>
 8005432:	2800      	cmp	r0, #0
 8005434:	d111      	bne.n	800545a <__swbuf_r+0x9a>
 8005436:	0030      	movs	r0, r6
 8005438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800543a:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <__swbuf_r+0xa4>)
 800543c:	429c      	cmp	r4, r3
 800543e:	d101      	bne.n	8005444 <__swbuf_r+0x84>
 8005440:	68ac      	ldr	r4, [r5, #8]
 8005442:	e7cc      	b.n	80053de <__swbuf_r+0x1e>
 8005444:	4b08      	ldr	r3, [pc, #32]	; (8005468 <__swbuf_r+0xa8>)
 8005446:	429c      	cmp	r4, r3
 8005448:	d1c9      	bne.n	80053de <__swbuf_r+0x1e>
 800544a:	68ec      	ldr	r4, [r5, #12]
 800544c:	e7c7      	b.n	80053de <__swbuf_r+0x1e>
 800544e:	0021      	movs	r1, r4
 8005450:	0028      	movs	r0, r5
 8005452:	f000 f81f 	bl	8005494 <__swsetup_r>
 8005456:	2800      	cmp	r0, #0
 8005458:	d0c9      	beq.n	80053ee <__swbuf_r+0x2e>
 800545a:	2601      	movs	r6, #1
 800545c:	4276      	negs	r6, r6
 800545e:	e7ea      	b.n	8005436 <__swbuf_r+0x76>
 8005460:	08005a44 	.word	0x08005a44
 8005464:	08005a64 	.word	0x08005a64
 8005468:	08005a24 	.word	0x08005a24

0800546c <_write_r>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	0004      	movs	r4, r0
 8005470:	0008      	movs	r0, r1
 8005472:	0011      	movs	r1, r2
 8005474:	001a      	movs	r2, r3
 8005476:	2300      	movs	r3, #0
 8005478:	4d05      	ldr	r5, [pc, #20]	; (8005490 <_write_r+0x24>)
 800547a:	602b      	str	r3, [r5, #0]
 800547c:	f7fb fca1 	bl	8000dc2 <_write>
 8005480:	1c43      	adds	r3, r0, #1
 8005482:	d103      	bne.n	800548c <_write_r+0x20>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d000      	beq.n	800548c <_write_r+0x20>
 800548a:	6023      	str	r3, [r4, #0]
 800548c:	bd70      	pop	{r4, r5, r6, pc}
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	20000284 	.word	0x20000284

08005494 <__swsetup_r>:
 8005494:	4b37      	ldr	r3, [pc, #220]	; (8005574 <__swsetup_r+0xe0>)
 8005496:	b570      	push	{r4, r5, r6, lr}
 8005498:	681d      	ldr	r5, [r3, #0]
 800549a:	0006      	movs	r6, r0
 800549c:	000c      	movs	r4, r1
 800549e:	2d00      	cmp	r5, #0
 80054a0:	d005      	beq.n	80054ae <__swsetup_r+0x1a>
 80054a2:	69ab      	ldr	r3, [r5, #24]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d102      	bne.n	80054ae <__swsetup_r+0x1a>
 80054a8:	0028      	movs	r0, r5
 80054aa:	f7ff fb0b 	bl	8004ac4 <__sinit>
 80054ae:	4b32      	ldr	r3, [pc, #200]	; (8005578 <__swsetup_r+0xe4>)
 80054b0:	429c      	cmp	r4, r3
 80054b2:	d10f      	bne.n	80054d4 <__swsetup_r+0x40>
 80054b4:	686c      	ldr	r4, [r5, #4]
 80054b6:	230c      	movs	r3, #12
 80054b8:	5ee2      	ldrsh	r2, [r4, r3]
 80054ba:	b293      	uxth	r3, r2
 80054bc:	0711      	lsls	r1, r2, #28
 80054be:	d42d      	bmi.n	800551c <__swsetup_r+0x88>
 80054c0:	06d9      	lsls	r1, r3, #27
 80054c2:	d411      	bmi.n	80054e8 <__swsetup_r+0x54>
 80054c4:	2309      	movs	r3, #9
 80054c6:	2001      	movs	r0, #1
 80054c8:	6033      	str	r3, [r6, #0]
 80054ca:	3337      	adds	r3, #55	; 0x37
 80054cc:	4313      	orrs	r3, r2
 80054ce:	81a3      	strh	r3, [r4, #12]
 80054d0:	4240      	negs	r0, r0
 80054d2:	bd70      	pop	{r4, r5, r6, pc}
 80054d4:	4b29      	ldr	r3, [pc, #164]	; (800557c <__swsetup_r+0xe8>)
 80054d6:	429c      	cmp	r4, r3
 80054d8:	d101      	bne.n	80054de <__swsetup_r+0x4a>
 80054da:	68ac      	ldr	r4, [r5, #8]
 80054dc:	e7eb      	b.n	80054b6 <__swsetup_r+0x22>
 80054de:	4b28      	ldr	r3, [pc, #160]	; (8005580 <__swsetup_r+0xec>)
 80054e0:	429c      	cmp	r4, r3
 80054e2:	d1e8      	bne.n	80054b6 <__swsetup_r+0x22>
 80054e4:	68ec      	ldr	r4, [r5, #12]
 80054e6:	e7e6      	b.n	80054b6 <__swsetup_r+0x22>
 80054e8:	075b      	lsls	r3, r3, #29
 80054ea:	d513      	bpl.n	8005514 <__swsetup_r+0x80>
 80054ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054ee:	2900      	cmp	r1, #0
 80054f0:	d008      	beq.n	8005504 <__swsetup_r+0x70>
 80054f2:	0023      	movs	r3, r4
 80054f4:	3344      	adds	r3, #68	; 0x44
 80054f6:	4299      	cmp	r1, r3
 80054f8:	d002      	beq.n	8005500 <__swsetup_r+0x6c>
 80054fa:	0030      	movs	r0, r6
 80054fc:	f000 f9bc 	bl	8005878 <_free_r>
 8005500:	2300      	movs	r3, #0
 8005502:	6363      	str	r3, [r4, #52]	; 0x34
 8005504:	2224      	movs	r2, #36	; 0x24
 8005506:	89a3      	ldrh	r3, [r4, #12]
 8005508:	4393      	bics	r3, r2
 800550a:	81a3      	strh	r3, [r4, #12]
 800550c:	2300      	movs	r3, #0
 800550e:	6063      	str	r3, [r4, #4]
 8005510:	6923      	ldr	r3, [r4, #16]
 8005512:	6023      	str	r3, [r4, #0]
 8005514:	2308      	movs	r3, #8
 8005516:	89a2      	ldrh	r2, [r4, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	81a3      	strh	r3, [r4, #12]
 800551c:	6923      	ldr	r3, [r4, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10b      	bne.n	800553a <__swsetup_r+0xa6>
 8005522:	21a0      	movs	r1, #160	; 0xa0
 8005524:	2280      	movs	r2, #128	; 0x80
 8005526:	89a3      	ldrh	r3, [r4, #12]
 8005528:	0089      	lsls	r1, r1, #2
 800552a:	0092      	lsls	r2, r2, #2
 800552c:	400b      	ands	r3, r1
 800552e:	4293      	cmp	r3, r2
 8005530:	d003      	beq.n	800553a <__swsetup_r+0xa6>
 8005532:	0021      	movs	r1, r4
 8005534:	0030      	movs	r0, r6
 8005536:	f000 f93f 	bl	80057b8 <__smakebuf_r>
 800553a:	220c      	movs	r2, #12
 800553c:	5ea3      	ldrsh	r3, [r4, r2]
 800553e:	2001      	movs	r0, #1
 8005540:	001a      	movs	r2, r3
 8005542:	b299      	uxth	r1, r3
 8005544:	4002      	ands	r2, r0
 8005546:	4203      	tst	r3, r0
 8005548:	d00f      	beq.n	800556a <__swsetup_r+0xd6>
 800554a:	2200      	movs	r2, #0
 800554c:	60a2      	str	r2, [r4, #8]
 800554e:	6962      	ldr	r2, [r4, #20]
 8005550:	4252      	negs	r2, r2
 8005552:	61a2      	str	r2, [r4, #24]
 8005554:	2000      	movs	r0, #0
 8005556:	6922      	ldr	r2, [r4, #16]
 8005558:	4282      	cmp	r2, r0
 800555a:	d1ba      	bne.n	80054d2 <__swsetup_r+0x3e>
 800555c:	060a      	lsls	r2, r1, #24
 800555e:	d5b8      	bpl.n	80054d2 <__swsetup_r+0x3e>
 8005560:	2240      	movs	r2, #64	; 0x40
 8005562:	4313      	orrs	r3, r2
 8005564:	81a3      	strh	r3, [r4, #12]
 8005566:	3801      	subs	r0, #1
 8005568:	e7b3      	b.n	80054d2 <__swsetup_r+0x3e>
 800556a:	0788      	lsls	r0, r1, #30
 800556c:	d400      	bmi.n	8005570 <__swsetup_r+0xdc>
 800556e:	6962      	ldr	r2, [r4, #20]
 8005570:	60a2      	str	r2, [r4, #8]
 8005572:	e7ef      	b.n	8005554 <__swsetup_r+0xc0>
 8005574:	2000000c 	.word	0x2000000c
 8005578:	08005a44 	.word	0x08005a44
 800557c:	08005a64 	.word	0x08005a64
 8005580:	08005a24 	.word	0x08005a24

08005584 <_close_r>:
 8005584:	2300      	movs	r3, #0
 8005586:	b570      	push	{r4, r5, r6, lr}
 8005588:	4d06      	ldr	r5, [pc, #24]	; (80055a4 <_close_r+0x20>)
 800558a:	0004      	movs	r4, r0
 800558c:	0008      	movs	r0, r1
 800558e:	602b      	str	r3, [r5, #0]
 8005590:	f7fb fc33 	bl	8000dfa <_close>
 8005594:	1c43      	adds	r3, r0, #1
 8005596:	d103      	bne.n	80055a0 <_close_r+0x1c>
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d000      	beq.n	80055a0 <_close_r+0x1c>
 800559e:	6023      	str	r3, [r4, #0]
 80055a0:	bd70      	pop	{r4, r5, r6, pc}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	20000284 	.word	0x20000284

080055a8 <__sflush_r>:
 80055a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055aa:	898b      	ldrh	r3, [r1, #12]
 80055ac:	0005      	movs	r5, r0
 80055ae:	000c      	movs	r4, r1
 80055b0:	071a      	lsls	r2, r3, #28
 80055b2:	d45f      	bmi.n	8005674 <__sflush_r+0xcc>
 80055b4:	684a      	ldr	r2, [r1, #4]
 80055b6:	2a00      	cmp	r2, #0
 80055b8:	dc04      	bgt.n	80055c4 <__sflush_r+0x1c>
 80055ba:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80055bc:	2a00      	cmp	r2, #0
 80055be:	dc01      	bgt.n	80055c4 <__sflush_r+0x1c>
 80055c0:	2000      	movs	r0, #0
 80055c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055c4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80055c6:	2f00      	cmp	r7, #0
 80055c8:	d0fa      	beq.n	80055c0 <__sflush_r+0x18>
 80055ca:	2200      	movs	r2, #0
 80055cc:	2180      	movs	r1, #128	; 0x80
 80055ce:	682e      	ldr	r6, [r5, #0]
 80055d0:	602a      	str	r2, [r5, #0]
 80055d2:	001a      	movs	r2, r3
 80055d4:	0149      	lsls	r1, r1, #5
 80055d6:	400a      	ands	r2, r1
 80055d8:	420b      	tst	r3, r1
 80055da:	d034      	beq.n	8005646 <__sflush_r+0x9e>
 80055dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055de:	89a3      	ldrh	r3, [r4, #12]
 80055e0:	075b      	lsls	r3, r3, #29
 80055e2:	d506      	bpl.n	80055f2 <__sflush_r+0x4a>
 80055e4:	6863      	ldr	r3, [r4, #4]
 80055e6:	1ac0      	subs	r0, r0, r3
 80055e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <__sflush_r+0x4a>
 80055ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055f0:	1ac0      	subs	r0, r0, r3
 80055f2:	0002      	movs	r2, r0
 80055f4:	6a21      	ldr	r1, [r4, #32]
 80055f6:	2300      	movs	r3, #0
 80055f8:	0028      	movs	r0, r5
 80055fa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80055fc:	47b8      	blx	r7
 80055fe:	89a1      	ldrh	r1, [r4, #12]
 8005600:	1c43      	adds	r3, r0, #1
 8005602:	d106      	bne.n	8005612 <__sflush_r+0x6a>
 8005604:	682b      	ldr	r3, [r5, #0]
 8005606:	2b1d      	cmp	r3, #29
 8005608:	d831      	bhi.n	800566e <__sflush_r+0xc6>
 800560a:	4a2c      	ldr	r2, [pc, #176]	; (80056bc <__sflush_r+0x114>)
 800560c:	40da      	lsrs	r2, r3
 800560e:	07d3      	lsls	r3, r2, #31
 8005610:	d52d      	bpl.n	800566e <__sflush_r+0xc6>
 8005612:	2300      	movs	r3, #0
 8005614:	6063      	str	r3, [r4, #4]
 8005616:	6923      	ldr	r3, [r4, #16]
 8005618:	6023      	str	r3, [r4, #0]
 800561a:	04cb      	lsls	r3, r1, #19
 800561c:	d505      	bpl.n	800562a <__sflush_r+0x82>
 800561e:	1c43      	adds	r3, r0, #1
 8005620:	d102      	bne.n	8005628 <__sflush_r+0x80>
 8005622:	682b      	ldr	r3, [r5, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d100      	bne.n	800562a <__sflush_r+0x82>
 8005628:	6560      	str	r0, [r4, #84]	; 0x54
 800562a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800562c:	602e      	str	r6, [r5, #0]
 800562e:	2900      	cmp	r1, #0
 8005630:	d0c6      	beq.n	80055c0 <__sflush_r+0x18>
 8005632:	0023      	movs	r3, r4
 8005634:	3344      	adds	r3, #68	; 0x44
 8005636:	4299      	cmp	r1, r3
 8005638:	d002      	beq.n	8005640 <__sflush_r+0x98>
 800563a:	0028      	movs	r0, r5
 800563c:	f000 f91c 	bl	8005878 <_free_r>
 8005640:	2000      	movs	r0, #0
 8005642:	6360      	str	r0, [r4, #52]	; 0x34
 8005644:	e7bd      	b.n	80055c2 <__sflush_r+0x1a>
 8005646:	2301      	movs	r3, #1
 8005648:	0028      	movs	r0, r5
 800564a:	6a21      	ldr	r1, [r4, #32]
 800564c:	47b8      	blx	r7
 800564e:	1c43      	adds	r3, r0, #1
 8005650:	d1c5      	bne.n	80055de <__sflush_r+0x36>
 8005652:	682b      	ldr	r3, [r5, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0c2      	beq.n	80055de <__sflush_r+0x36>
 8005658:	2b1d      	cmp	r3, #29
 800565a:	d001      	beq.n	8005660 <__sflush_r+0xb8>
 800565c:	2b16      	cmp	r3, #22
 800565e:	d101      	bne.n	8005664 <__sflush_r+0xbc>
 8005660:	602e      	str	r6, [r5, #0]
 8005662:	e7ad      	b.n	80055c0 <__sflush_r+0x18>
 8005664:	2340      	movs	r3, #64	; 0x40
 8005666:	89a2      	ldrh	r2, [r4, #12]
 8005668:	4313      	orrs	r3, r2
 800566a:	81a3      	strh	r3, [r4, #12]
 800566c:	e7a9      	b.n	80055c2 <__sflush_r+0x1a>
 800566e:	2340      	movs	r3, #64	; 0x40
 8005670:	430b      	orrs	r3, r1
 8005672:	e7fa      	b.n	800566a <__sflush_r+0xc2>
 8005674:	690f      	ldr	r7, [r1, #16]
 8005676:	2f00      	cmp	r7, #0
 8005678:	d0a2      	beq.n	80055c0 <__sflush_r+0x18>
 800567a:	680a      	ldr	r2, [r1, #0]
 800567c:	600f      	str	r7, [r1, #0]
 800567e:	1bd2      	subs	r2, r2, r7
 8005680:	9201      	str	r2, [sp, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	079b      	lsls	r3, r3, #30
 8005686:	d100      	bne.n	800568a <__sflush_r+0xe2>
 8005688:	694a      	ldr	r2, [r1, #20]
 800568a:	60a2      	str	r2, [r4, #8]
 800568c:	9b01      	ldr	r3, [sp, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	dc00      	bgt.n	8005694 <__sflush_r+0xec>
 8005692:	e795      	b.n	80055c0 <__sflush_r+0x18>
 8005694:	003a      	movs	r2, r7
 8005696:	0028      	movs	r0, r5
 8005698:	9b01      	ldr	r3, [sp, #4]
 800569a:	6a21      	ldr	r1, [r4, #32]
 800569c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800569e:	47b0      	blx	r6
 80056a0:	2800      	cmp	r0, #0
 80056a2:	dc06      	bgt.n	80056b2 <__sflush_r+0x10a>
 80056a4:	2340      	movs	r3, #64	; 0x40
 80056a6:	2001      	movs	r0, #1
 80056a8:	89a2      	ldrh	r2, [r4, #12]
 80056aa:	4240      	negs	r0, r0
 80056ac:	4313      	orrs	r3, r2
 80056ae:	81a3      	strh	r3, [r4, #12]
 80056b0:	e787      	b.n	80055c2 <__sflush_r+0x1a>
 80056b2:	9b01      	ldr	r3, [sp, #4]
 80056b4:	183f      	adds	r7, r7, r0
 80056b6:	1a1b      	subs	r3, r3, r0
 80056b8:	9301      	str	r3, [sp, #4]
 80056ba:	e7e7      	b.n	800568c <__sflush_r+0xe4>
 80056bc:	20400001 	.word	0x20400001

080056c0 <_fflush_r>:
 80056c0:	690b      	ldr	r3, [r1, #16]
 80056c2:	b570      	push	{r4, r5, r6, lr}
 80056c4:	0005      	movs	r5, r0
 80056c6:	000c      	movs	r4, r1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d102      	bne.n	80056d2 <_fflush_r+0x12>
 80056cc:	2500      	movs	r5, #0
 80056ce:	0028      	movs	r0, r5
 80056d0:	bd70      	pop	{r4, r5, r6, pc}
 80056d2:	2800      	cmp	r0, #0
 80056d4:	d004      	beq.n	80056e0 <_fflush_r+0x20>
 80056d6:	6983      	ldr	r3, [r0, #24]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <_fflush_r+0x20>
 80056dc:	f7ff f9f2 	bl	8004ac4 <__sinit>
 80056e0:	4b14      	ldr	r3, [pc, #80]	; (8005734 <_fflush_r+0x74>)
 80056e2:	429c      	cmp	r4, r3
 80056e4:	d11b      	bne.n	800571e <_fflush_r+0x5e>
 80056e6:	686c      	ldr	r4, [r5, #4]
 80056e8:	220c      	movs	r2, #12
 80056ea:	5ea3      	ldrsh	r3, [r4, r2]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0ed      	beq.n	80056cc <_fflush_r+0xc>
 80056f0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056f2:	07d2      	lsls	r2, r2, #31
 80056f4:	d404      	bmi.n	8005700 <_fflush_r+0x40>
 80056f6:	059b      	lsls	r3, r3, #22
 80056f8:	d402      	bmi.n	8005700 <_fflush_r+0x40>
 80056fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056fc:	f7ff fa83 	bl	8004c06 <__retarget_lock_acquire_recursive>
 8005700:	0028      	movs	r0, r5
 8005702:	0021      	movs	r1, r4
 8005704:	f7ff ff50 	bl	80055a8 <__sflush_r>
 8005708:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800570a:	0005      	movs	r5, r0
 800570c:	07db      	lsls	r3, r3, #31
 800570e:	d4de      	bmi.n	80056ce <_fflush_r+0xe>
 8005710:	89a3      	ldrh	r3, [r4, #12]
 8005712:	059b      	lsls	r3, r3, #22
 8005714:	d4db      	bmi.n	80056ce <_fflush_r+0xe>
 8005716:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005718:	f7ff fa76 	bl	8004c08 <__retarget_lock_release_recursive>
 800571c:	e7d7      	b.n	80056ce <_fflush_r+0xe>
 800571e:	4b06      	ldr	r3, [pc, #24]	; (8005738 <_fflush_r+0x78>)
 8005720:	429c      	cmp	r4, r3
 8005722:	d101      	bne.n	8005728 <_fflush_r+0x68>
 8005724:	68ac      	ldr	r4, [r5, #8]
 8005726:	e7df      	b.n	80056e8 <_fflush_r+0x28>
 8005728:	4b04      	ldr	r3, [pc, #16]	; (800573c <_fflush_r+0x7c>)
 800572a:	429c      	cmp	r4, r3
 800572c:	d1dc      	bne.n	80056e8 <_fflush_r+0x28>
 800572e:	68ec      	ldr	r4, [r5, #12]
 8005730:	e7da      	b.n	80056e8 <_fflush_r+0x28>
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	08005a44 	.word	0x08005a44
 8005738:	08005a64 	.word	0x08005a64
 800573c:	08005a24 	.word	0x08005a24

08005740 <_lseek_r>:
 8005740:	b570      	push	{r4, r5, r6, lr}
 8005742:	0004      	movs	r4, r0
 8005744:	0008      	movs	r0, r1
 8005746:	0011      	movs	r1, r2
 8005748:	001a      	movs	r2, r3
 800574a:	2300      	movs	r3, #0
 800574c:	4d05      	ldr	r5, [pc, #20]	; (8005764 <_lseek_r+0x24>)
 800574e:	602b      	str	r3, [r5, #0]
 8005750:	f7fb fb74 	bl	8000e3c <_lseek>
 8005754:	1c43      	adds	r3, r0, #1
 8005756:	d103      	bne.n	8005760 <_lseek_r+0x20>
 8005758:	682b      	ldr	r3, [r5, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d000      	beq.n	8005760 <_lseek_r+0x20>
 800575e:	6023      	str	r3, [r4, #0]
 8005760:	bd70      	pop	{r4, r5, r6, pc}
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	20000284 	.word	0x20000284

08005768 <__swhatbuf_r>:
 8005768:	b570      	push	{r4, r5, r6, lr}
 800576a:	000e      	movs	r6, r1
 800576c:	001d      	movs	r5, r3
 800576e:	230e      	movs	r3, #14
 8005770:	5ec9      	ldrsh	r1, [r1, r3]
 8005772:	0014      	movs	r4, r2
 8005774:	b096      	sub	sp, #88	; 0x58
 8005776:	2900      	cmp	r1, #0
 8005778:	da08      	bge.n	800578c <__swhatbuf_r+0x24>
 800577a:	220c      	movs	r2, #12
 800577c:	5eb3      	ldrsh	r3, [r6, r2]
 800577e:	2200      	movs	r2, #0
 8005780:	602a      	str	r2, [r5, #0]
 8005782:	061b      	lsls	r3, r3, #24
 8005784:	d411      	bmi.n	80057aa <__swhatbuf_r+0x42>
 8005786:	2380      	movs	r3, #128	; 0x80
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	e00f      	b.n	80057ac <__swhatbuf_r+0x44>
 800578c:	466a      	mov	r2, sp
 800578e:	f000 f8d1 	bl	8005934 <_fstat_r>
 8005792:	2800      	cmp	r0, #0
 8005794:	dbf1      	blt.n	800577a <__swhatbuf_r+0x12>
 8005796:	23f0      	movs	r3, #240	; 0xf0
 8005798:	9901      	ldr	r1, [sp, #4]
 800579a:	021b      	lsls	r3, r3, #8
 800579c:	4019      	ands	r1, r3
 800579e:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <__swhatbuf_r+0x4c>)
 80057a0:	18c9      	adds	r1, r1, r3
 80057a2:	424b      	negs	r3, r1
 80057a4:	4159      	adcs	r1, r3
 80057a6:	6029      	str	r1, [r5, #0]
 80057a8:	e7ed      	b.n	8005786 <__swhatbuf_r+0x1e>
 80057aa:	2340      	movs	r3, #64	; 0x40
 80057ac:	2000      	movs	r0, #0
 80057ae:	6023      	str	r3, [r4, #0]
 80057b0:	b016      	add	sp, #88	; 0x58
 80057b2:	bd70      	pop	{r4, r5, r6, pc}
 80057b4:	ffffe000 	.word	0xffffe000

080057b8 <__smakebuf_r>:
 80057b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057ba:	2602      	movs	r6, #2
 80057bc:	898b      	ldrh	r3, [r1, #12]
 80057be:	0005      	movs	r5, r0
 80057c0:	000c      	movs	r4, r1
 80057c2:	4233      	tst	r3, r6
 80057c4:	d006      	beq.n	80057d4 <__smakebuf_r+0x1c>
 80057c6:	0023      	movs	r3, r4
 80057c8:	3347      	adds	r3, #71	; 0x47
 80057ca:	6023      	str	r3, [r4, #0]
 80057cc:	6123      	str	r3, [r4, #16]
 80057ce:	2301      	movs	r3, #1
 80057d0:	6163      	str	r3, [r4, #20]
 80057d2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80057d4:	466a      	mov	r2, sp
 80057d6:	ab01      	add	r3, sp, #4
 80057d8:	f7ff ffc6 	bl	8005768 <__swhatbuf_r>
 80057dc:	9900      	ldr	r1, [sp, #0]
 80057de:	0007      	movs	r7, r0
 80057e0:	0028      	movs	r0, r5
 80057e2:	f7ff fa35 	bl	8004c50 <_malloc_r>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d108      	bne.n	80057fc <__smakebuf_r+0x44>
 80057ea:	220c      	movs	r2, #12
 80057ec:	5ea3      	ldrsh	r3, [r4, r2]
 80057ee:	059a      	lsls	r2, r3, #22
 80057f0:	d4ef      	bmi.n	80057d2 <__smakebuf_r+0x1a>
 80057f2:	2203      	movs	r2, #3
 80057f4:	4393      	bics	r3, r2
 80057f6:	431e      	orrs	r6, r3
 80057f8:	81a6      	strh	r6, [r4, #12]
 80057fa:	e7e4      	b.n	80057c6 <__smakebuf_r+0xe>
 80057fc:	4b0f      	ldr	r3, [pc, #60]	; (800583c <__smakebuf_r+0x84>)
 80057fe:	62ab      	str	r3, [r5, #40]	; 0x28
 8005800:	2380      	movs	r3, #128	; 0x80
 8005802:	89a2      	ldrh	r2, [r4, #12]
 8005804:	6020      	str	r0, [r4, #0]
 8005806:	4313      	orrs	r3, r2
 8005808:	81a3      	strh	r3, [r4, #12]
 800580a:	9b00      	ldr	r3, [sp, #0]
 800580c:	6120      	str	r0, [r4, #16]
 800580e:	6163      	str	r3, [r4, #20]
 8005810:	9b01      	ldr	r3, [sp, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00d      	beq.n	8005832 <__smakebuf_r+0x7a>
 8005816:	0028      	movs	r0, r5
 8005818:	230e      	movs	r3, #14
 800581a:	5ee1      	ldrsh	r1, [r4, r3]
 800581c:	f000 f89c 	bl	8005958 <_isatty_r>
 8005820:	2800      	cmp	r0, #0
 8005822:	d006      	beq.n	8005832 <__smakebuf_r+0x7a>
 8005824:	2203      	movs	r2, #3
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	4393      	bics	r3, r2
 800582a:	001a      	movs	r2, r3
 800582c:	2301      	movs	r3, #1
 800582e:	4313      	orrs	r3, r2
 8005830:	81a3      	strh	r3, [r4, #12]
 8005832:	89a0      	ldrh	r0, [r4, #12]
 8005834:	4307      	orrs	r7, r0
 8005836:	81a7      	strh	r7, [r4, #12]
 8005838:	e7cb      	b.n	80057d2 <__smakebuf_r+0x1a>
 800583a:	46c0      	nop			; (mov r8, r8)
 800583c:	08004a49 	.word	0x08004a49

08005840 <memchr>:
 8005840:	b2c9      	uxtb	r1, r1
 8005842:	1882      	adds	r2, r0, r2
 8005844:	4290      	cmp	r0, r2
 8005846:	d101      	bne.n	800584c <memchr+0xc>
 8005848:	2000      	movs	r0, #0
 800584a:	4770      	bx	lr
 800584c:	7803      	ldrb	r3, [r0, #0]
 800584e:	428b      	cmp	r3, r1
 8005850:	d0fb      	beq.n	800584a <memchr+0xa>
 8005852:	3001      	adds	r0, #1
 8005854:	e7f6      	b.n	8005844 <memchr+0x4>
	...

08005858 <__malloc_lock>:
 8005858:	b510      	push	{r4, lr}
 800585a:	4802      	ldr	r0, [pc, #8]	; (8005864 <__malloc_lock+0xc>)
 800585c:	f7ff f9d3 	bl	8004c06 <__retarget_lock_acquire_recursive>
 8005860:	bd10      	pop	{r4, pc}
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	20000278 	.word	0x20000278

08005868 <__malloc_unlock>:
 8005868:	b510      	push	{r4, lr}
 800586a:	4802      	ldr	r0, [pc, #8]	; (8005874 <__malloc_unlock+0xc>)
 800586c:	f7ff f9cc 	bl	8004c08 <__retarget_lock_release_recursive>
 8005870:	bd10      	pop	{r4, pc}
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	20000278 	.word	0x20000278

08005878 <_free_r>:
 8005878:	b570      	push	{r4, r5, r6, lr}
 800587a:	0005      	movs	r5, r0
 800587c:	2900      	cmp	r1, #0
 800587e:	d010      	beq.n	80058a2 <_free_r+0x2a>
 8005880:	1f0c      	subs	r4, r1, #4
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	da00      	bge.n	800588a <_free_r+0x12>
 8005888:	18e4      	adds	r4, r4, r3
 800588a:	0028      	movs	r0, r5
 800588c:	f7ff ffe4 	bl	8005858 <__malloc_lock>
 8005890:	4a1d      	ldr	r2, [pc, #116]	; (8005908 <_free_r+0x90>)
 8005892:	6813      	ldr	r3, [r2, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d105      	bne.n	80058a4 <_free_r+0x2c>
 8005898:	6063      	str	r3, [r4, #4]
 800589a:	6014      	str	r4, [r2, #0]
 800589c:	0028      	movs	r0, r5
 800589e:	f7ff ffe3 	bl	8005868 <__malloc_unlock>
 80058a2:	bd70      	pop	{r4, r5, r6, pc}
 80058a4:	42a3      	cmp	r3, r4
 80058a6:	d908      	bls.n	80058ba <_free_r+0x42>
 80058a8:	6821      	ldr	r1, [r4, #0]
 80058aa:	1860      	adds	r0, r4, r1
 80058ac:	4283      	cmp	r3, r0
 80058ae:	d1f3      	bne.n	8005898 <_free_r+0x20>
 80058b0:	6818      	ldr	r0, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	1841      	adds	r1, r0, r1
 80058b6:	6021      	str	r1, [r4, #0]
 80058b8:	e7ee      	b.n	8005898 <_free_r+0x20>
 80058ba:	001a      	movs	r2, r3
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <_free_r+0x4e>
 80058c2:	42a3      	cmp	r3, r4
 80058c4:	d9f9      	bls.n	80058ba <_free_r+0x42>
 80058c6:	6811      	ldr	r1, [r2, #0]
 80058c8:	1850      	adds	r0, r2, r1
 80058ca:	42a0      	cmp	r0, r4
 80058cc:	d10b      	bne.n	80058e6 <_free_r+0x6e>
 80058ce:	6820      	ldr	r0, [r4, #0]
 80058d0:	1809      	adds	r1, r1, r0
 80058d2:	1850      	adds	r0, r2, r1
 80058d4:	6011      	str	r1, [r2, #0]
 80058d6:	4283      	cmp	r3, r0
 80058d8:	d1e0      	bne.n	800589c <_free_r+0x24>
 80058da:	6818      	ldr	r0, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	1841      	adds	r1, r0, r1
 80058e0:	6011      	str	r1, [r2, #0]
 80058e2:	6053      	str	r3, [r2, #4]
 80058e4:	e7da      	b.n	800589c <_free_r+0x24>
 80058e6:	42a0      	cmp	r0, r4
 80058e8:	d902      	bls.n	80058f0 <_free_r+0x78>
 80058ea:	230c      	movs	r3, #12
 80058ec:	602b      	str	r3, [r5, #0]
 80058ee:	e7d5      	b.n	800589c <_free_r+0x24>
 80058f0:	6821      	ldr	r1, [r4, #0]
 80058f2:	1860      	adds	r0, r4, r1
 80058f4:	4283      	cmp	r3, r0
 80058f6:	d103      	bne.n	8005900 <_free_r+0x88>
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	1841      	adds	r1, r0, r1
 80058fe:	6021      	str	r1, [r4, #0]
 8005900:	6063      	str	r3, [r4, #4]
 8005902:	6054      	str	r4, [r2, #4]
 8005904:	e7ca      	b.n	800589c <_free_r+0x24>
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	2000027c 	.word	0x2000027c

0800590c <_read_r>:
 800590c:	b570      	push	{r4, r5, r6, lr}
 800590e:	0004      	movs	r4, r0
 8005910:	0008      	movs	r0, r1
 8005912:	0011      	movs	r1, r2
 8005914:	001a      	movs	r2, r3
 8005916:	2300      	movs	r3, #0
 8005918:	4d05      	ldr	r5, [pc, #20]	; (8005930 <_read_r+0x24>)
 800591a:	602b      	str	r3, [r5, #0]
 800591c:	f7fb fa34 	bl	8000d88 <_read>
 8005920:	1c43      	adds	r3, r0, #1
 8005922:	d103      	bne.n	800592c <_read_r+0x20>
 8005924:	682b      	ldr	r3, [r5, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d000      	beq.n	800592c <_read_r+0x20>
 800592a:	6023      	str	r3, [r4, #0]
 800592c:	bd70      	pop	{r4, r5, r6, pc}
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	20000284 	.word	0x20000284

08005934 <_fstat_r>:
 8005934:	2300      	movs	r3, #0
 8005936:	b570      	push	{r4, r5, r6, lr}
 8005938:	4d06      	ldr	r5, [pc, #24]	; (8005954 <_fstat_r+0x20>)
 800593a:	0004      	movs	r4, r0
 800593c:	0008      	movs	r0, r1
 800593e:	0011      	movs	r1, r2
 8005940:	602b      	str	r3, [r5, #0]
 8005942:	f7fb fa64 	bl	8000e0e <_fstat>
 8005946:	1c43      	adds	r3, r0, #1
 8005948:	d103      	bne.n	8005952 <_fstat_r+0x1e>
 800594a:	682b      	ldr	r3, [r5, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d000      	beq.n	8005952 <_fstat_r+0x1e>
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	bd70      	pop	{r4, r5, r6, pc}
 8005954:	20000284 	.word	0x20000284

08005958 <_isatty_r>:
 8005958:	2300      	movs	r3, #0
 800595a:	b570      	push	{r4, r5, r6, lr}
 800595c:	4d06      	ldr	r5, [pc, #24]	; (8005978 <_isatty_r+0x20>)
 800595e:	0004      	movs	r4, r0
 8005960:	0008      	movs	r0, r1
 8005962:	602b      	str	r3, [r5, #0]
 8005964:	f7fb fa61 	bl	8000e2a <_isatty>
 8005968:	1c43      	adds	r3, r0, #1
 800596a:	d103      	bne.n	8005974 <_isatty_r+0x1c>
 800596c:	682b      	ldr	r3, [r5, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d000      	beq.n	8005974 <_isatty_r+0x1c>
 8005972:	6023      	str	r3, [r4, #0]
 8005974:	bd70      	pop	{r4, r5, r6, pc}
 8005976:	46c0      	nop			; (mov r8, r8)
 8005978:	20000284 	.word	0x20000284

0800597c <_init>:
 800597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597e:	46c0      	nop			; (mov r8, r8)
 8005980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005982:	bc08      	pop	{r3}
 8005984:	469e      	mov	lr, r3
 8005986:	4770      	bx	lr

08005988 <_fini>:
 8005988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598e:	bc08      	pop	{r3}
 8005990:	469e      	mov	lr, r3
 8005992:	4770      	bx	lr
