
pd1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ec8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08005f88  08005f88  00015f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006180  08006180  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006180  08006180  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006180  08006180  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006180  08006180  00016180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006184  08006184  00016184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000070  080061f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  080061f8  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff54  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000238f  00000000  00000000  0002ffec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00032380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  000331e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3e9  00000000  00000000  00033f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001100b  00000000  00000000  0004e351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095e44  00000000  00000000  0005f35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f51a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be8  00000000  00000000  000f51f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005f70 	.word	0x08005f70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005f70 	.word	0x08005f70

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000410:	2301      	movs	r3, #1
 8000412:	425b      	negs	r3, r3
 8000414:	1d39      	adds	r1, r7, #4
 8000416:	4804      	ldr	r0, [pc, #16]	; (8000428 <__io_putchar+0x20>)
 8000418:	2201      	movs	r2, #1
 800041a:	f003 fa27 	bl	800386c <HAL_UART_Transmit>
  return ch;
 800041e:	687b      	ldr	r3, [r7, #4]
}
 8000420:	0018      	movs	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	b002      	add	sp, #8
 8000426:	bd80      	pop	{r7, pc}
 8000428:	200001dc 	.word	0x200001dc

0800042c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000432:	f000 feb5 	bl	80011a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000436:	f000 f9cd 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800043a:	f000 fb7f 	bl	8000b3c <MX_GPIO_Init>
  MX_DMA_Init();
 800043e:	f000 fb5f 	bl	8000b00 <MX_DMA_Init>
  MX_ADC_Init();
 8000442:	f000 fa2f 	bl	80008a4 <MX_ADC_Init>
  MX_TIM1_Init();
 8000446:	f000 faa3 	bl	8000990 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800044a:	f000 fb29 	bl	8000aa0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800044e:	f000 faf7 	bl	8000a40 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&rxEN,1);
 8000452:	49c0      	ldr	r1, [pc, #768]	; (8000754 <main+0x328>)
 8000454:	4bc0      	ldr	r3, [pc, #768]	; (8000758 <main+0x32c>)
 8000456:	2201      	movs	r2, #1
 8000458:	0018      	movs	r0, r3
 800045a:	f003 fb31 	bl	8003ac0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim1);
 800045e:	4bbf      	ldr	r3, [pc, #764]	; (800075c <main+0x330>)
 8000460:	0018      	movs	r0, r3
 8000462:	f002 fde1 	bl	8003028 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //surowe dane z przetwornika - pokazuje tylko to co pobiera się co 1s
	  printf("Ch1: %d\r\n",raw[0]);
 8000466:	4bbe      	ldr	r3, [pc, #760]	; (8000760 <main+0x334>)
 8000468:	881b      	ldrh	r3, [r3, #0]
 800046a:	001a      	movs	r2, r3
 800046c:	4bbd      	ldr	r3, [pc, #756]	; (8000764 <main+0x338>)
 800046e:	0011      	movs	r1, r2
 8000470:	0018      	movs	r0, r3
 8000472:	f004 fd29 	bl	8004ec8 <iprintf>
	  HAL_Delay(1000);
 8000476:	23fa      	movs	r3, #250	; 0xfa
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	0018      	movs	r0, r3
 800047c:	f000 fef4 	bl	8001268 <HAL_Delay>
	  printf("Ch2: %d\r\n",raw[1]);
 8000480:	4bb7      	ldr	r3, [pc, #732]	; (8000760 <main+0x334>)
 8000482:	885b      	ldrh	r3, [r3, #2]
 8000484:	001a      	movs	r2, r3
 8000486:	4bb8      	ldr	r3, [pc, #736]	; (8000768 <main+0x33c>)
 8000488:	0011      	movs	r1, r2
 800048a:	0018      	movs	r0, r3
 800048c:	f004 fd1c 	bl	8004ec8 <iprintf>
	  HAL_Delay(1000);
 8000490:	23fa      	movs	r3, #250	; 0xfa
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	0018      	movs	r0, r3
 8000496:	f000 fee7 	bl	8001268 <HAL_Delay>
	  printf("Ch3: %d\r\n",raw[2]);
 800049a:	4bb1      	ldr	r3, [pc, #708]	; (8000760 <main+0x334>)
 800049c:	889b      	ldrh	r3, [r3, #4]
 800049e:	001a      	movs	r2, r3
 80004a0:	4bb2      	ldr	r3, [pc, #712]	; (800076c <main+0x340>)
 80004a2:	0011      	movs	r1, r2
 80004a4:	0018      	movs	r0, r3
 80004a6:	f004 fd0f 	bl	8004ec8 <iprintf>
	  HAL_Delay(1000);
 80004aa:	23fa      	movs	r3, #250	; 0xfa
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	0018      	movs	r0, r3
 80004b0:	f000 feda 	bl	8001268 <HAL_Delay>
	  //dane EMG podane w mV
	  emg[0]=raw[0]*3300/4095;
 80004b4:	4baa      	ldr	r3, [pc, #680]	; (8000760 <main+0x334>)
 80004b6:	881b      	ldrh	r3, [r3, #0]
 80004b8:	001a      	movs	r2, r3
 80004ba:	4bad      	ldr	r3, [pc, #692]	; (8000770 <main+0x344>)
 80004bc:	4353      	muls	r3, r2
 80004be:	49ad      	ldr	r1, [pc, #692]	; (8000774 <main+0x348>)
 80004c0:	0018      	movs	r0, r3
 80004c2:	f7ff feb5 	bl	8000230 <__divsi3>
 80004c6:	0003      	movs	r3, r0
 80004c8:	b29a      	uxth	r2, r3
 80004ca:	4bab      	ldr	r3, [pc, #684]	; (8000778 <main+0x34c>)
 80004cc:	801a      	strh	r2, [r3, #0]
	  emg[1]=raw[1]*3300/4095;
 80004ce:	4ba4      	ldr	r3, [pc, #656]	; (8000760 <main+0x334>)
 80004d0:	885b      	ldrh	r3, [r3, #2]
 80004d2:	001a      	movs	r2, r3
 80004d4:	4ba6      	ldr	r3, [pc, #664]	; (8000770 <main+0x344>)
 80004d6:	4353      	muls	r3, r2
 80004d8:	49a6      	ldr	r1, [pc, #664]	; (8000774 <main+0x348>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f7ff fea8 	bl	8000230 <__divsi3>
 80004e0:	0003      	movs	r3, r0
 80004e2:	b29a      	uxth	r2, r3
 80004e4:	4ba4      	ldr	r3, [pc, #656]	; (8000778 <main+0x34c>)
 80004e6:	805a      	strh	r2, [r3, #2]
	  emg[2]=raw[2]*3300/4095;
 80004e8:	4b9d      	ldr	r3, [pc, #628]	; (8000760 <main+0x334>)
 80004ea:	889b      	ldrh	r3, [r3, #4]
 80004ec:	001a      	movs	r2, r3
 80004ee:	4ba0      	ldr	r3, [pc, #640]	; (8000770 <main+0x344>)
 80004f0:	4353      	muls	r3, r2
 80004f2:	49a0      	ldr	r1, [pc, #640]	; (8000774 <main+0x348>)
 80004f4:	0018      	movs	r0, r3
 80004f6:	f7ff fe9b 	bl	8000230 <__divsi3>
 80004fa:	0003      	movs	r3, r0
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	4b9e      	ldr	r3, [pc, #632]	; (8000778 <main+0x34c>)
 8000500:	809a      	strh	r2, [r3, #4]
	  //wyswietlenie danych w mV
	  printf("EMG_1 mV: %d\r\n",emg[0]);
 8000502:	4b9d      	ldr	r3, [pc, #628]	; (8000778 <main+0x34c>)
 8000504:	881b      	ldrh	r3, [r3, #0]
 8000506:	001a      	movs	r2, r3
 8000508:	4b9c      	ldr	r3, [pc, #624]	; (800077c <main+0x350>)
 800050a:	0011      	movs	r1, r2
 800050c:	0018      	movs	r0, r3
 800050e:	f004 fcdb 	bl	8004ec8 <iprintf>
	  HAL_Delay(1000);
 8000512:	23fa      	movs	r3, #250	; 0xfa
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	0018      	movs	r0, r3
 8000518:	f000 fea6 	bl	8001268 <HAL_Delay>
	  printf("EMG_2 mV: %d\r\n",emg[1]);
 800051c:	4b96      	ldr	r3, [pc, #600]	; (8000778 <main+0x34c>)
 800051e:	885b      	ldrh	r3, [r3, #2]
 8000520:	001a      	movs	r2, r3
 8000522:	4b97      	ldr	r3, [pc, #604]	; (8000780 <main+0x354>)
 8000524:	0011      	movs	r1, r2
 8000526:	0018      	movs	r0, r3
 8000528:	f004 fcce 	bl	8004ec8 <iprintf>
	  HAL_Delay(1000);
 800052c:	23fa      	movs	r3, #250	; 0xfa
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	0018      	movs	r0, r3
 8000532:	f000 fe99 	bl	8001268 <HAL_Delay>
	  printf("EMG_3 mV: %d\r\n",emg[2]);
 8000536:	4b90      	ldr	r3, [pc, #576]	; (8000778 <main+0x34c>)
 8000538:	889b      	ldrh	r3, [r3, #4]
 800053a:	001a      	movs	r2, r3
 800053c:	4b91      	ldr	r3, [pc, #580]	; (8000784 <main+0x358>)
 800053e:	0011      	movs	r1, r2
 8000540:	0018      	movs	r0, r3
 8000542:	f004 fcc1 	bl	8004ec8 <iprintf>
	  HAL_Delay(1000);
 8000546:	23fa      	movs	r3, #250	; 0xfa
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	0018      	movs	r0, r3
 800054c:	f000 fe8c 	bl	8001268 <HAL_Delay>
	  //przetworzenie danych

	  //transmisja przez Bluetooth - sprawdzam czy działa zapalając diodę (DZIALA)
	  //wszystko działa - problem półsłowa
	  if(HAL_GPIO_ReadPin(GPIOB, EMG_1_Pin)==1) //jeśli zapalona, czyli można przesłać dane
 8000550:	4b8d      	ldr	r3, [pc, #564]	; (8000788 <main+0x35c>)
 8000552:	2108      	movs	r1, #8
 8000554:	0018      	movs	r0, r3
 8000556:	f001 feef 	bl	8002338 <HAL_GPIO_ReadPin>
 800055a:	0003      	movs	r3, r0
 800055c:	2b01      	cmp	r3, #1
 800055e:	d000      	beq.n	8000562 <main+0x136>
 8000560:	e0f3      	b.n	800074a <main+0x31e>
	  {
		  //przesyła pół słowa
		  for(int i=0; i<3; i++)
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	e00c      	b.n	8000582 <main+0x156>
		  {
			  txData[i]=emg[i];
 8000568:	4b83      	ldr	r3, [pc, #524]	; (8000778 <main+0x34c>)
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	0052      	lsls	r2, r2, #1
 800056e:	5ad3      	ldrh	r3, [r2, r3]
 8000570:	b2d9      	uxtb	r1, r3
 8000572:	4a86      	ldr	r2, [pc, #536]	; (800078c <main+0x360>)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	18d3      	adds	r3, r2, r3
 8000578:	1c0a      	adds	r2, r1, #0
 800057a:	701a      	strb	r2, [r3, #0]
		  for(int i=0; i<3; i++)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	3301      	adds	r3, #1
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2b02      	cmp	r3, #2
 8000586:	ddef      	ble.n	8000568 <main+0x13c>
		  }
		  HAL_UART_Transmit_IT(&huart1,&txData[0],1);
 8000588:	4980      	ldr	r1, [pc, #512]	; (800078c <main+0x360>)
 800058a:	4b73      	ldr	r3, [pc, #460]	; (8000758 <main+0x32c>)
 800058c:	2201      	movs	r2, #1
 800058e:	0018      	movs	r0, r3
 8000590:	f003 fa16 	bl	80039c0 <HAL_UART_Transmit_IT>
		  printf("BT_TX_HW EMG_1 mV: %d\r\n",txData[0]);
 8000594:	4b7d      	ldr	r3, [pc, #500]	; (800078c <main+0x360>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	001a      	movs	r2, r3
 800059a:	4b7d      	ldr	r3, [pc, #500]	; (8000790 <main+0x364>)
 800059c:	0011      	movs	r1, r2
 800059e:	0018      	movs	r0, r3
 80005a0:	f004 fc92 	bl	8004ec8 <iprintf>
		  HAL_Delay(1000);
 80005a4:	23fa      	movs	r3, #250	; 0xfa
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f000 fe5d 	bl	8001268 <HAL_Delay>
		  HAL_UART_Transmit_IT(&huart1,&txData[1],1);
 80005ae:	4979      	ldr	r1, [pc, #484]	; (8000794 <main+0x368>)
 80005b0:	4b69      	ldr	r3, [pc, #420]	; (8000758 <main+0x32c>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	0018      	movs	r0, r3
 80005b6:	f003 fa03 	bl	80039c0 <HAL_UART_Transmit_IT>
		  printf("BT_TX_HW EMG_2 mV: %d\r\n",txData[1]);
 80005ba:	4b74      	ldr	r3, [pc, #464]	; (800078c <main+0x360>)
 80005bc:	785b      	ldrb	r3, [r3, #1]
 80005be:	001a      	movs	r2, r3
 80005c0:	4b75      	ldr	r3, [pc, #468]	; (8000798 <main+0x36c>)
 80005c2:	0011      	movs	r1, r2
 80005c4:	0018      	movs	r0, r3
 80005c6:	f004 fc7f 	bl	8004ec8 <iprintf>
		  HAL_Delay(1000);
 80005ca:	23fa      	movs	r3, #250	; 0xfa
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 fe4a 	bl	8001268 <HAL_Delay>
		  HAL_UART_Transmit_IT(&huart1,&txData[2],1);
 80005d4:	4971      	ldr	r1, [pc, #452]	; (800079c <main+0x370>)
 80005d6:	4b60      	ldr	r3, [pc, #384]	; (8000758 <main+0x32c>)
 80005d8:	2201      	movs	r2, #1
 80005da:	0018      	movs	r0, r3
 80005dc:	f003 f9f0 	bl	80039c0 <HAL_UART_Transmit_IT>
		  printf("BT_TX_HW EMG_3 mV: %d\r\n",txData[2]);
 80005e0:	4b6a      	ldr	r3, [pc, #424]	; (800078c <main+0x360>)
 80005e2:	789b      	ldrb	r3, [r3, #2]
 80005e4:	001a      	movs	r2, r3
 80005e6:	4b6e      	ldr	r3, [pc, #440]	; (80007a0 <main+0x374>)
 80005e8:	0011      	movs	r1, r2
 80005ea:	0018      	movs	r0, r3
 80005ec:	f004 fc6c 	bl	8004ec8 <iprintf>
		  HAL_Delay(1000);
 80005f0:	23fa      	movs	r3, #250	; 0xfa
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 fe37 	bl	8001268 <HAL_Delay>
		  //przesyła całe słowo
		  //dzielenie danych emg 16bit na dwie liczby 8bit
		  int j=0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
		  for(int i=0; i<3; i++)
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	e01a      	b.n	800063a <main+0x20e>
		  {
			  //pierwsze półsłowo (LOW)
			  emg_halfword[j]=emg[i]&0xff;
 8000604:	4b5c      	ldr	r3, [pc, #368]	; (8000778 <main+0x34c>)
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	0052      	lsls	r2, r2, #1
 800060a:	5ad3      	ldrh	r3, [r2, r3]
 800060c:	b2d9      	uxtb	r1, r3
 800060e:	4a65      	ldr	r2, [pc, #404]	; (80007a4 <main+0x378>)
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	18d3      	adds	r3, r2, r3
 8000614:	1c0a      	adds	r2, r1, #0
 8000616:	701a      	strb	r2, [r3, #0]
			  //drugie półsłowo (HIGH)
			  emg_halfword[j+1]=emg[i]>>8;
 8000618:	4b57      	ldr	r3, [pc, #348]	; (8000778 <main+0x34c>)
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	0052      	lsls	r2, r2, #1
 800061e:	5ad3      	ldrh	r3, [r2, r3]
 8000620:	0a1b      	lsrs	r3, r3, #8
 8000622:	b29a      	uxth	r2, r3
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	3301      	adds	r3, #1
 8000628:	b2d1      	uxtb	r1, r2
 800062a:	4a5e      	ldr	r2, [pc, #376]	; (80007a4 <main+0x378>)
 800062c:	54d1      	strb	r1, [r2, r3]
			  //inkrementacja zmiennej j
			  j=j+2;
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	3302      	adds	r3, #2
 8000632:	60bb      	str	r3, [r7, #8]
		  for(int i=0; i<3; i++)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3301      	adds	r3, #1
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b02      	cmp	r3, #2
 800063e:	dde1      	ble.n	8000604 <main+0x1d8>
		  }
		  for(int i=0; i<6; i++)
 8000640:	2300      	movs	r3, #0
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	e00b      	b.n	800065e <main+0x232>
		  		  {
		  			  txDatanew[i]=emg_halfword[i];
 8000646:	4a57      	ldr	r2, [pc, #348]	; (80007a4 <main+0x378>)
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	18d3      	adds	r3, r2, r3
 800064c:	7819      	ldrb	r1, [r3, #0]
 800064e:	4a56      	ldr	r2, [pc, #344]	; (80007a8 <main+0x37c>)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	18d3      	adds	r3, r2, r3
 8000654:	1c0a      	adds	r2, r1, #0
 8000656:	701a      	strb	r2, [r3, #0]
		  for(int i=0; i<6; i++)
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	3301      	adds	r3, #1
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	2b05      	cmp	r3, #5
 8000662:	ddf0      	ble.n	8000646 <main+0x21a>
		  		  }
		  		  HAL_UART_Transmit_IT(&huart1,&txDatanew[0],1);
 8000664:	4950      	ldr	r1, [pc, #320]	; (80007a8 <main+0x37c>)
 8000666:	4b3c      	ldr	r3, [pc, #240]	; (8000758 <main+0x32c>)
 8000668:	2201      	movs	r2, #1
 800066a:	0018      	movs	r0, r3
 800066c:	f003 f9a8 	bl	80039c0 <HAL_UART_Transmit_IT>
		  		  printf("BT_TX_HW_LOW EMG_1 mV: %d\r\n",txDatanew[0]);
 8000670:	4b4d      	ldr	r3, [pc, #308]	; (80007a8 <main+0x37c>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	001a      	movs	r2, r3
 8000676:	4b4d      	ldr	r3, [pc, #308]	; (80007ac <main+0x380>)
 8000678:	0011      	movs	r1, r2
 800067a:	0018      	movs	r0, r3
 800067c:	f004 fc24 	bl	8004ec8 <iprintf>
		  		  HAL_Delay(1000);
 8000680:	23fa      	movs	r3, #250	; 0xfa
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	0018      	movs	r0, r3
 8000686:	f000 fdef 	bl	8001268 <HAL_Delay>
		  		  HAL_UART_Transmit_IT(&huart1,&txDatanew[1],1);
 800068a:	4949      	ldr	r1, [pc, #292]	; (80007b0 <main+0x384>)
 800068c:	4b32      	ldr	r3, [pc, #200]	; (8000758 <main+0x32c>)
 800068e:	2201      	movs	r2, #1
 8000690:	0018      	movs	r0, r3
 8000692:	f003 f995 	bl	80039c0 <HAL_UART_Transmit_IT>
		  		  printf("BT_TX_HW_HIGH EMG_2 mV: %d\r\n",txDatanew[1]);
 8000696:	4b44      	ldr	r3, [pc, #272]	; (80007a8 <main+0x37c>)
 8000698:	785b      	ldrb	r3, [r3, #1]
 800069a:	001a      	movs	r2, r3
 800069c:	4b45      	ldr	r3, [pc, #276]	; (80007b4 <main+0x388>)
 800069e:	0011      	movs	r1, r2
 80006a0:	0018      	movs	r0, r3
 80006a2:	f004 fc11 	bl	8004ec8 <iprintf>
		  		  HAL_Delay(1000);
 80006a6:	23fa      	movs	r3, #250	; 0xfa
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 fddc 	bl	8001268 <HAL_Delay>
		  		  HAL_UART_Transmit_IT(&huart1,&txDatanew[2],1);
 80006b0:	4941      	ldr	r1, [pc, #260]	; (80007b8 <main+0x38c>)
 80006b2:	4b29      	ldr	r3, [pc, #164]	; (8000758 <main+0x32c>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	0018      	movs	r0, r3
 80006b8:	f003 f982 	bl	80039c0 <HAL_UART_Transmit_IT>
		  		  printf("BT_TX_HW_LOW EMG_3 mV: %d\r\n",txDatanew[2]);
 80006bc:	4b3a      	ldr	r3, [pc, #232]	; (80007a8 <main+0x37c>)
 80006be:	789b      	ldrb	r3, [r3, #2]
 80006c0:	001a      	movs	r2, r3
 80006c2:	4b3e      	ldr	r3, [pc, #248]	; (80007bc <main+0x390>)
 80006c4:	0011      	movs	r1, r2
 80006c6:	0018      	movs	r0, r3
 80006c8:	f004 fbfe 	bl	8004ec8 <iprintf>
		  		  HAL_Delay(1000);
 80006cc:	23fa      	movs	r3, #250	; 0xfa
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	0018      	movs	r0, r3
 80006d2:	f000 fdc9 	bl	8001268 <HAL_Delay>
		  		  HAL_UART_Transmit_IT(&huart1,&txDatanew[3],1);
 80006d6:	493a      	ldr	r1, [pc, #232]	; (80007c0 <main+0x394>)
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <main+0x32c>)
 80006da:	2201      	movs	r2, #1
 80006dc:	0018      	movs	r0, r3
 80006de:	f003 f96f 	bl	80039c0 <HAL_UART_Transmit_IT>
		  		  printf("BT_TX_HW_HIGH EMG_3 mV: %d\r\n",txDatanew[3]);
 80006e2:	4b31      	ldr	r3, [pc, #196]	; (80007a8 <main+0x37c>)
 80006e4:	78db      	ldrb	r3, [r3, #3]
 80006e6:	001a      	movs	r2, r3
 80006e8:	4b36      	ldr	r3, [pc, #216]	; (80007c4 <main+0x398>)
 80006ea:	0011      	movs	r1, r2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f004 fbeb 	bl	8004ec8 <iprintf>
		  		  HAL_Delay(1000);
 80006f2:	23fa      	movs	r3, #250	; 0xfa
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	0018      	movs	r0, r3
 80006f8:	f000 fdb6 	bl	8001268 <HAL_Delay>
		  		  HAL_UART_Transmit_IT(&huart1,&txDatanew[4],1);
 80006fc:	4932      	ldr	r1, [pc, #200]	; (80007c8 <main+0x39c>)
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <main+0x32c>)
 8000700:	2201      	movs	r2, #1
 8000702:	0018      	movs	r0, r3
 8000704:	f003 f95c 	bl	80039c0 <HAL_UART_Transmit_IT>
		  		  printf("BT_TX_HW_LOW EMG_3 mV: %d\r\n",txDatanew[4]);
 8000708:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <main+0x37c>)
 800070a:	791b      	ldrb	r3, [r3, #4]
 800070c:	001a      	movs	r2, r3
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <main+0x390>)
 8000710:	0011      	movs	r1, r2
 8000712:	0018      	movs	r0, r3
 8000714:	f004 fbd8 	bl	8004ec8 <iprintf>
		  		  HAL_Delay(1000);
 8000718:	23fa      	movs	r3, #250	; 0xfa
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	0018      	movs	r0, r3
 800071e:	f000 fda3 	bl	8001268 <HAL_Delay>
		  		  HAL_UART_Transmit_IT(&huart1,&txDatanew[5],1);
 8000722:	492a      	ldr	r1, [pc, #168]	; (80007cc <main+0x3a0>)
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <main+0x32c>)
 8000726:	2201      	movs	r2, #1
 8000728:	0018      	movs	r0, r3
 800072a:	f003 f949 	bl	80039c0 <HAL_UART_Transmit_IT>
		  		  printf("BT_TX_HW_HIGH EMG_3 mV: %d\r\n",txDatanew[5]);
 800072e:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <main+0x37c>)
 8000730:	795b      	ldrb	r3, [r3, #5]
 8000732:	001a      	movs	r2, r3
 8000734:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <main+0x398>)
 8000736:	0011      	movs	r1, r2
 8000738:	0018      	movs	r0, r3
 800073a:	f004 fbc5 	bl	8004ec8 <iprintf>
		  		  HAL_Delay(1000);
 800073e:	23fa      	movs	r3, #250	; 0xfa
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	0018      	movs	r0, r3
 8000744:	f000 fd90 	bl	8001268 <HAL_Delay>
 8000748:	e68d      	b.n	8000466 <main+0x3a>
	  }
	  else
	  {
		  printf("NO BT TRANSMISSION\r\n");
 800074a:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <main+0x3a4>)
 800074c:	0018      	movs	r0, r3
 800074e:	f004 fc47 	bl	8004fe0 <puts>
	  printf("Ch1: %d\r\n",raw[0]);
 8000752:	e688      	b.n	8000466 <main+0x3a>
 8000754:	20000276 	.word	0x20000276
 8000758:	20000158 	.word	0x20000158
 800075c:	20000110 	.word	0x20000110
 8000760:	20000260 	.word	0x20000260
 8000764:	08005f88 	.word	0x08005f88
 8000768:	08005f94 	.word	0x08005f94
 800076c:	08005fa0 	.word	0x08005fa0
 8000770:	00000ce4 	.word	0x00000ce4
 8000774:	00000fff 	.word	0x00000fff
 8000778:	20000268 	.word	0x20000268
 800077c:	08005fac 	.word	0x08005fac
 8000780:	08005fbc 	.word	0x08005fbc
 8000784:	08005fcc 	.word	0x08005fcc
 8000788:	48000400 	.word	0x48000400
 800078c:	20000278 	.word	0x20000278
 8000790:	08005fdc 	.word	0x08005fdc
 8000794:	20000279 	.word	0x20000279
 8000798:	08005ff4 	.word	0x08005ff4
 800079c:	2000027a 	.word	0x2000027a
 80007a0:	0800600c 	.word	0x0800600c
 80007a4:	20000270 	.word	0x20000270
 80007a8:	2000027c 	.word	0x2000027c
 80007ac:	08006024 	.word	0x08006024
 80007b0:	2000027d 	.word	0x2000027d
 80007b4:	08006040 	.word	0x08006040
 80007b8:	2000027e 	.word	0x2000027e
 80007bc:	08006060 	.word	0x08006060
 80007c0:	2000027f 	.word	0x2000027f
 80007c4:	0800607c 	.word	0x0800607c
 80007c8:	20000280 	.word	0x20000280
 80007cc:	20000281 	.word	0x20000281
 80007d0:	0800609c 	.word	0x0800609c

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b099      	sub	sp, #100	; 0x64
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	242c      	movs	r4, #44	; 0x2c
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	0018      	movs	r0, r3
 80007e0:	2334      	movs	r3, #52	; 0x34
 80007e2:	001a      	movs	r2, r3
 80007e4:	2100      	movs	r1, #0
 80007e6:	f004 fb67 	bl	8004eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ea:	231c      	movs	r3, #28
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	0018      	movs	r0, r3
 80007f0:	2310      	movs	r3, #16
 80007f2:	001a      	movs	r2, r3
 80007f4:	2100      	movs	r1, #0
 80007f6:	f004 fb5f 	bl	8004eb8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	0018      	movs	r0, r3
 80007fe:	2318      	movs	r3, #24
 8000800:	001a      	movs	r2, r3
 8000802:	2100      	movs	r1, #0
 8000804:	f004 fb58 	bl	8004eb8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000808:	0021      	movs	r1, r4
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2212      	movs	r2, #18
 800080e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2201      	movs	r2, #1
 8000814:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2201      	movs	r2, #1
 800081a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2210      	movs	r2, #16
 8000820:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2210      	movs	r2, #16
 8000826:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2202      	movs	r2, #2
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	0212      	lsls	r2, r2, #8
 8000834:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2200      	movs	r2, #0
 8000840:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000842:	187b      	adds	r3, r7, r1
 8000844:	0018      	movs	r0, r3
 8000846:	f001 fdb1 	bl	80023ac <HAL_RCC_OscConfig>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800084e:	f000 fa33 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000852:	211c      	movs	r1, #28
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2207      	movs	r2, #7
 8000858:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2202      	movs	r2, #2
 800085e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2100      	movs	r1, #0
 8000870:	0018      	movs	r0, r3
 8000872:	f002 f921 	bl	8002ab8 <HAL_RCC_ClockConfig>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800087a:	f000 fa1d 	bl	8000cb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2201      	movs	r2, #1
 8000882:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	0018      	movs	r0, r3
 800088e:	f002 fa8d 	bl	8002dac <HAL_RCCEx_PeriphCLKConfig>
 8000892:	1e03      	subs	r3, r0, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000896:	f000 fa0f 	bl	8000cb8 <Error_Handler>
  }
}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	b019      	add	sp, #100	; 0x64
 80008a0:	bd90      	pop	{r4, r7, pc}
	...

080008a4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	0018      	movs	r0, r3
 80008ae:	230c      	movs	r3, #12
 80008b0:	001a      	movs	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f004 fb00 	bl	8004eb8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80008b8:	4b33      	ldr	r3, [pc, #204]	; (8000988 <MX_ADC_Init+0xe4>)
 80008ba:	4a34      	ldr	r2, [pc, #208]	; (800098c <MX_ADC_Init+0xe8>)
 80008bc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008be:	4b32      	ldr	r3, [pc, #200]	; (8000988 <MX_ADC_Init+0xe4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80008c4:	4b30      	ldr	r3, [pc, #192]	; (8000988 <MX_ADC_Init+0xe4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ca:	4b2f      	ldr	r3, [pc, #188]	; (8000988 <MX_ADC_Init+0xe4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80008d0:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <MX_ADC_Init+0xe4>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d6:	4b2c      	ldr	r3, [pc, #176]	; (8000988 <MX_ADC_Init+0xe4>)
 80008d8:	2204      	movs	r2, #4
 80008da:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80008dc:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <MX_ADC_Init+0xe4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80008e2:	4b29      	ldr	r3, [pc, #164]	; (8000988 <MX_ADC_Init+0xe4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80008e8:	4b27      	ldr	r3, [pc, #156]	; (8000988 <MX_ADC_Init+0xe4>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80008ee:	4b26      	ldr	r3, [pc, #152]	; (8000988 <MX_ADC_Init+0xe4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f4:	4b24      	ldr	r3, [pc, #144]	; (8000988 <MX_ADC_Init+0xe4>)
 80008f6:	22c2      	movs	r2, #194	; 0xc2
 80008f8:	32ff      	adds	r2, #255	; 0xff
 80008fa:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fc:	4b22      	ldr	r3, [pc, #136]	; (8000988 <MX_ADC_Init+0xe4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <MX_ADC_Init+0xe4>)
 8000904:	2224      	movs	r2, #36	; 0x24
 8000906:	2100      	movs	r1, #0
 8000908:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800090a:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <MX_ADC_Init+0xe4>)
 800090c:	2201      	movs	r2, #1
 800090e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000910:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <MX_ADC_Init+0xe4>)
 8000912:	0018      	movs	r0, r3
 8000914:	f000 fccc 	bl	80012b0 <HAL_ADC_Init>
 8000918:	1e03      	subs	r3, r0, #0
 800091a:	d001      	beq.n	8000920 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800091c:	f000 f9cc 	bl	8000cb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2204      	movs	r2, #4
 8000924:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	0152      	lsls	r2, r2, #5
 800092c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2280      	movs	r2, #128	; 0x80
 8000932:	0552      	lsls	r2, r2, #21
 8000934:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000936:	1d3a      	adds	r2, r7, #4
 8000938:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_ADC_Init+0xe4>)
 800093a:	0011      	movs	r1, r2
 800093c:	0018      	movs	r0, r3
 800093e:	f000 fe89 	bl	8001654 <HAL_ADC_ConfigChannel>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d001      	beq.n	800094a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000946:	f000 f9b7 	bl	8000cb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2205      	movs	r2, #5
 800094e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000950:	1d3a      	adds	r2, r7, #4
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <MX_ADC_Init+0xe4>)
 8000954:	0011      	movs	r1, r2
 8000956:	0018      	movs	r0, r3
 8000958:	f000 fe7c 	bl	8001654 <HAL_ADC_ConfigChannel>
 800095c:	1e03      	subs	r3, r0, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000960:	f000 f9aa 	bl	8000cb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2206      	movs	r2, #6
 8000968:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800096a:	1d3a      	adds	r2, r7, #4
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_ADC_Init+0xe4>)
 800096e:	0011      	movs	r1, r2
 8000970:	0018      	movs	r0, r3
 8000972:	f000 fe6f 	bl	8001654 <HAL_ADC_ConfigChannel>
 8000976:	1e03      	subs	r3, r0, #0
 8000978:	d001      	beq.n	800097e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800097a:	f000 f99d 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b004      	add	sp, #16
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	2000008c 	.word	0x2000008c
 800098c:	40012400 	.word	0x40012400

08000990 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000996:	2308      	movs	r3, #8
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	0018      	movs	r0, r3
 800099c:	2310      	movs	r3, #16
 800099e:	001a      	movs	r2, r3
 80009a0:	2100      	movs	r1, #0
 80009a2:	f004 fa89 	bl	8004eb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a6:	003b      	movs	r3, r7
 80009a8:	0018      	movs	r0, r3
 80009aa:	2308      	movs	r3, #8
 80009ac:	001a      	movs	r2, r3
 80009ae:	2100      	movs	r1, #0
 80009b0:	f004 fa82 	bl	8004eb8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_TIM1_Init+0xa4>)
 80009b6:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <MX_TIM1_Init+0xa8>)
 80009b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009ba:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <MX_TIM1_Init+0xa4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c0:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_TIM1_Init+0xa4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16000-1;
 80009c6:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_TIM1_Init+0xa4>)
 80009c8:	4a1c      	ldr	r2, [pc, #112]	; (8000a3c <MX_TIM1_Init+0xac>)
 80009ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_TIM1_Init+0xa4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_TIM1_Init+0xa4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_TIM1_Init+0xa4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_TIM1_Init+0xa4>)
 80009e0:	0018      	movs	r0, r3
 80009e2:	f002 fad1 	bl	8002f88 <HAL_TIM_Base_Init>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80009ea:	f000 f965 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ee:	2108      	movs	r1, #8
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	0152      	lsls	r2, r2, #5
 80009f6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009f8:	187a      	adds	r2, r7, r1
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_TIM1_Init+0xa4>)
 80009fc:	0011      	movs	r1, r2
 80009fe:	0018      	movs	r0, r3
 8000a00:	f002 fc74 	bl	80032ec <HAL_TIM_ConfigClockSource>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a08:	f000 f956 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0c:	003b      	movs	r3, r7
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a12:	003b      	movs	r3, r7
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a18:	003a      	movs	r2, r7
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_TIM1_Init+0xa4>)
 8000a1c:	0011      	movs	r1, r2
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f002 fe68 	bl	80036f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000a28:	f000 f946 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b006      	add	sp, #24
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000110 	.word	0x20000110
 8000a38:	40012c00 	.word	0x40012c00
 8000a3c:	00003e7f 	.word	0x00003e7f

08000a40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a46:	4a15      	ldr	r2, [pc, #84]	; (8000a9c <MX_USART1_UART_Init+0x5c>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a4c:	2296      	movs	r2, #150	; 0x96
 8000a4e:	0192      	lsls	r2, r2, #6
 8000a50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a84:	0018      	movs	r0, r3
 8000a86:	f002 fe9d 	bl	80037c4 <HAL_UART_Init>
 8000a8a:	1e03      	subs	r3, r0, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a8e:	f000 f913 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000158 	.word	0x20000158
 8000a9c:	40013800 	.word	0x40013800

08000aa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_USART2_UART_Init+0x58>)
 8000aa6:	4a15      	ldr	r2, [pc, #84]	; (8000afc <MX_USART2_UART_Init+0x5c>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <MX_USART2_UART_Init+0x58>)
 8000aac:	2296      	movs	r2, #150	; 0x96
 8000aae:	0212      	lsls	r2, r2, #8
 8000ab0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_USART2_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_USART2_UART_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_USART2_UART_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_USART2_UART_Init+0x58>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_USART2_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_USART2_UART_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <MX_USART2_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_USART2_UART_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <MX_USART2_UART_Init+0x58>)
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f002 fe6d 	bl	80037c4 <HAL_UART_Init>
 8000aea:	1e03      	subs	r3, r0, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aee:	f000 f8e3 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200001dc 	.word	0x200001dc
 8000afc:	40004400 	.word	0x40004400

08000b00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_DMA_Init+0x38>)
 8000b08:	695a      	ldr	r2, [r3, #20]
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_DMA_Init+0x38>)
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	615a      	str	r2, [r3, #20]
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_DMA_Init+0x38>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	2201      	movs	r2, #1
 8000b18:	4013      	ands	r3, r2
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	2009      	movs	r0, #9
 8000b24:	f001 f858 	bl	8001bd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b28:	2009      	movs	r0, #9
 8000b2a:	f001 f86a 	bl	8001c02 <HAL_NVIC_EnableIRQ>

}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b002      	add	sp, #8
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	40021000 	.word	0x40021000

08000b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	240c      	movs	r4, #12
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	0018      	movs	r0, r3
 8000b48:	2314      	movs	r3, #20
 8000b4a:	001a      	movs	r2, r3
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	f004 f9b3 	bl	8004eb8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <MX_GPIO_Init+0xc0>)
 8000b54:	695a      	ldr	r2, [r3, #20]
 8000b56:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <MX_GPIO_Init+0xc0>)
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	0289      	lsls	r1, r1, #10
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	615a      	str	r2, [r3, #20]
 8000b60:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <MX_GPIO_Init+0xc0>)
 8000b62:	695a      	ldr	r2, [r3, #20]
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	029b      	lsls	r3, r3, #10
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <MX_GPIO_Init+0xc0>)
 8000b70:	695a      	ldr	r2, [r3, #20]
 8000b72:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <MX_GPIO_Init+0xc0>)
 8000b74:	2180      	movs	r1, #128	; 0x80
 8000b76:	02c9      	lsls	r1, r1, #11
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	615a      	str	r2, [r3, #20]
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_GPIO_Init+0xc0>)
 8000b7e:	695a      	ldr	r2, [r3, #20]
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	02db      	lsls	r3, r3, #11
 8000b84:	4013      	ands	r3, r2
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EMG_3_GPIO_Port, EMG_3_Pin, GPIO_PIN_RESET);
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	0059      	lsls	r1, r3, #1
 8000b8e:	2390      	movs	r3, #144	; 0x90
 8000b90:	05db      	lsls	r3, r3, #23
 8000b92:	2200      	movs	r2, #0
 8000b94:	0018      	movs	r0, r3
 8000b96:	f001 fbec 	bl	8002372 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMG_1_Pin|EMG_2_Pin, GPIO_PIN_RESET);
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_GPIO_Init+0xc4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2118      	movs	r1, #24
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f001 fbe6 	bl	8002372 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EMG_3_Pin */
  GPIO_InitStruct.Pin = EMG_3_Pin;
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	2280      	movs	r2, #128	; 0x80
 8000baa:	0052      	lsls	r2, r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	193b      	adds	r3, r7, r4
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	193b      	adds	r3, r7, r4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EMG_3_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	193a      	adds	r2, r7, r4
 8000bc2:	2390      	movs	r3, #144	; 0x90
 8000bc4:	05db      	lsls	r3, r3, #23
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f001 fa4d 	bl	8002068 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMG_1_Pin EMG_2_Pin */
  GPIO_InitStruct.Pin = EMG_1_Pin|EMG_2_Pin;
 8000bce:	0021      	movs	r1, r4
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2218      	movs	r2, #24
 8000bd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2201      	movs	r2, #1
 8000bda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <MX_GPIO_Init+0xc4>)
 8000bec:	0019      	movs	r1, r3
 8000bee:	0010      	movs	r0, r2
 8000bf0:	f001 fa3a 	bl	8002068 <HAL_GPIO_Init>

}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b009      	add	sp, #36	; 0x24
 8000bfa:	bd90      	pop	{r4, r7, pc}
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	48000400 	.word	0x48000400

08000c04 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//funkcje callback do obsługi ADC
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim1)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	//zaświecenie diodą jako potwierdzenie odczytu danych
  HAL_GPIO_WritePin(GPIOA, EMG_3_Pin, GPIO_PIN_SET);
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	0059      	lsls	r1, r3, #1
 8000c10:	2390      	movs	r3, #144	; 0x90
 8000c12:	05db      	lsls	r3, r3, #23
 8000c14:	2201      	movs	r2, #1
 8000c16:	0018      	movs	r0, r3
 8000c18:	f001 fbab 	bl	8002372 <HAL_GPIO_WritePin>
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)raw,3);
 8000c1c:	4904      	ldr	r1, [pc, #16]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000c20:	2203      	movs	r2, #3
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 fc84 	bl	8001530 <HAL_ADC_Start_DMA>
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b002      	add	sp, #8
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000260 	.word	0x20000260
 8000c34:	2000008c 	.word	0x2000008c

08000c38 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	UNUSED(hadc);
	HAL_GPIO_WritePin(GPIOA, EMG_3_Pin, GPIO_PIN_RESET);
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	0059      	lsls	r1, r3, #1
 8000c44:	2390      	movs	r3, #144	; 0x90
 8000c46:	05db      	lsls	r3, r3, #23
 8000c48:	2200      	movs	r2, #0
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f001 fb91 	bl	8002372 <HAL_GPIO_WritePin>
	}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b002      	add	sp, #8
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HAL_UART_RxCpltCallback>:

//funkcja callback RX do obsługi Bluetooth
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a10      	ldr	r2, [pc, #64]	; (8000ca8 <HAL_UART_RxCpltCallback+0x50>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d11a      	bne.n	8000ca0 <HAL_UART_RxCpltCallback+0x48>
  {
    if(rxEN==78) // Ascii value of 'N' is 78 (N for NO)
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <HAL_UART_RxCpltCallback+0x54>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b4e      	cmp	r3, #78	; 0x4e
 8000c70:	d106      	bne.n	8000c80 <HAL_UART_RxCpltCallback+0x28>
    {
    	HAL_GPIO_WritePin(GPIOB, EMG_1_Pin, 0);
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_UART_RxCpltCallback+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	2108      	movs	r1, #8
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f001 fb7a 	bl	8002372 <HAL_GPIO_WritePin>
 8000c7e:	e009      	b.n	8000c94 <HAL_UART_RxCpltCallback+0x3c>
    }
    else if (rxEN==89) // Ascii value of 'Y' is 89 (Y for YES)
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <HAL_UART_RxCpltCallback+0x54>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b59      	cmp	r3, #89	; 0x59
 8000c86:	d105      	bne.n	8000c94 <HAL_UART_RxCpltCallback+0x3c>
    {
    	HAL_GPIO_WritePin(GPIOB, EMG_1_Pin, 1);
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_UART_RxCpltCallback+0x58>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2108      	movs	r1, #8
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f001 fb6f 	bl	8002372 <HAL_GPIO_WritePin>
    }
    HAL_UART_Receive_IT(&huart1,&rxEN,1); // Enabling interrupt receive again
 8000c94:	4905      	ldr	r1, [pc, #20]	; (8000cac <HAL_UART_RxCpltCallback+0x54>)
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <HAL_UART_RxCpltCallback+0x5c>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f002 ff10 	bl	8003ac0 <HAL_UART_Receive_IT>
  }
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b002      	add	sp, #8
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40013800 	.word	0x40013800
 8000cac:	20000276 	.word	0x20000276
 8000cb0:	48000400 	.word	0x48000400
 8000cb4:	20000158 	.word	0x20000158

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <Error_Handler+0x8>
	...

08000cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_MspInit+0x44>)
 8000ccc:	699a      	ldr	r2, [r3, #24]
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_MspInit+0x44>)
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	619a      	str	r2, [r3, #24]
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_MspInit+0x44>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4013      	ands	r3, r2
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_MspInit+0x44>)
 8000ce4:	69da      	ldr	r2, [r3, #28]
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_MspInit+0x44>)
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	0549      	lsls	r1, r1, #21
 8000cec:	430a      	orrs	r2, r1
 8000cee:	61da      	str	r2, [r3, #28]
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_MspInit+0x44>)
 8000cf2:	69da      	ldr	r2, [r3, #28]
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	055b      	lsls	r3, r3, #21
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	40021000 	.word	0x40021000

08000d0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b08b      	sub	sp, #44	; 0x2c
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	2414      	movs	r4, #20
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	0018      	movs	r0, r3
 8000d1a:	2314      	movs	r3, #20
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	2100      	movs	r1, #0
 8000d20:	f004 f8ca 	bl	8004eb8 <memset>
  if(hadc->Instance==ADC1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a2d      	ldr	r2, [pc, #180]	; (8000de0 <HAL_ADC_MspInit+0xd4>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d153      	bne.n	8000dd6 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <HAL_ADC_MspInit+0xd8>)
 8000d30:	699a      	ldr	r2, [r3, #24]
 8000d32:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <HAL_ADC_MspInit+0xd8>)
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	0089      	lsls	r1, r1, #2
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	619a      	str	r2, [r3, #24]
 8000d3c:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <HAL_ADC_MspInit+0xd8>)
 8000d3e:	699a      	ldr	r2, [r3, #24]
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <HAL_ADC_MspInit+0xd8>)
 8000d4c:	695a      	ldr	r2, [r3, #20]
 8000d4e:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <HAL_ADC_MspInit+0xd8>)
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	0289      	lsls	r1, r1, #10
 8000d54:	430a      	orrs	r2, r1
 8000d56:	615a      	str	r2, [r3, #20]
 8000d58:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <HAL_ADC_MspInit+0xd8>)
 8000d5a:	695a      	ldr	r2, [r3, #20]
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	029b      	lsls	r3, r3, #10
 8000d60:	4013      	ands	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = CH_3_Pin|CH_2_Pin|CH_1_Pin;
 8000d66:	193b      	adds	r3, r7, r4
 8000d68:	2270      	movs	r2, #112	; 0x70
 8000d6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6c:	193b      	adds	r3, r7, r4
 8000d6e:	2203      	movs	r2, #3
 8000d70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	193b      	adds	r3, r7, r4
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	193a      	adds	r2, r7, r4
 8000d7a:	2390      	movs	r3, #144	; 0x90
 8000d7c:	05db      	lsls	r3, r3, #23
 8000d7e:	0011      	movs	r1, r2
 8000d80:	0018      	movs	r0, r3
 8000d82:	f001 f971 	bl	8002068 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <HAL_ADC_MspInit+0xdc>)
 8000d88:	4a18      	ldr	r2, [pc, #96]	; (8000dec <HAL_ADC_MspInit+0xe0>)
 8000d8a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d8c:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <HAL_ADC_MspInit+0xdc>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_ADC_MspInit+0xdc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <HAL_ADC_MspInit+0xdc>)
 8000d9a:	2280      	movs	r2, #128	; 0x80
 8000d9c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_ADC_MspInit+0xdc>)
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	0052      	lsls	r2, r2, #1
 8000da4:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <HAL_ADC_MspInit+0xdc>)
 8000da8:	2280      	movs	r2, #128	; 0x80
 8000daa:	00d2      	lsls	r2, r2, #3
 8000dac:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_ADC_MspInit+0xdc>)
 8000db0:	2220      	movs	r2, #32
 8000db2:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <HAL_ADC_MspInit+0xdc>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_ADC_MspInit+0xdc>)
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f000 ff3d 	bl	8001c3c <HAL_DMA_Init>
 8000dc2:	1e03      	subs	r3, r0, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000dc6:	f7ff ff77 	bl	8000cb8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <HAL_ADC_MspInit+0xdc>)
 8000dce:	631a      	str	r2, [r3, #48]	; 0x30
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <HAL_ADC_MspInit+0xdc>)
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b00b      	add	sp, #44	; 0x2c
 8000ddc:	bd90      	pop	{r4, r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	40012400 	.word	0x40012400
 8000de4:	40021000 	.word	0x40021000
 8000de8:	200000cc 	.word	0x200000cc
 8000dec:	40020008 	.word	0x40020008

08000df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <HAL_TIM_Base_MspInit+0x48>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d115      	bne.n	8000e2e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_TIM_Base_MspInit+0x4c>)
 8000e04:	699a      	ldr	r2, [r3, #24]
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <HAL_TIM_Base_MspInit+0x4c>)
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	0109      	lsls	r1, r1, #4
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	619a      	str	r2, [r3, #24]
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_TIM_Base_MspInit+0x4c>)
 8000e12:	699a      	ldr	r2, [r3, #24]
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	011b      	lsls	r3, r3, #4
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	200d      	movs	r0, #13
 8000e24:	f000 fed8 	bl	8001bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000e28:	200d      	movs	r0, #13
 8000e2a:	f000 feea 	bl	8001c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b004      	add	sp, #16
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	40012c00 	.word	0x40012c00
 8000e3c:	40021000 	.word	0x40021000

08000e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b08d      	sub	sp, #52	; 0x34
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	241c      	movs	r4, #28
 8000e4a:	193b      	adds	r3, r7, r4
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	2314      	movs	r3, #20
 8000e50:	001a      	movs	r2, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	f004 f830 	bl	8004eb8 <memset>
  if(huart->Instance==USART1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a3d      	ldr	r2, [pc, #244]	; (8000f54 <HAL_UART_MspInit+0x114>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d13c      	bne.n	8000edc <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e62:	4b3d      	ldr	r3, [pc, #244]	; (8000f58 <HAL_UART_MspInit+0x118>)
 8000e64:	699a      	ldr	r2, [r3, #24]
 8000e66:	4b3c      	ldr	r3, [pc, #240]	; (8000f58 <HAL_UART_MspInit+0x118>)
 8000e68:	2180      	movs	r1, #128	; 0x80
 8000e6a:	01c9      	lsls	r1, r1, #7
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	619a      	str	r2, [r3, #24]
 8000e70:	4b39      	ldr	r3, [pc, #228]	; (8000f58 <HAL_UART_MspInit+0x118>)
 8000e72:	699a      	ldr	r2, [r3, #24]
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	01db      	lsls	r3, r3, #7
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
 8000e7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b36      	ldr	r3, [pc, #216]	; (8000f58 <HAL_UART_MspInit+0x118>)
 8000e80:	695a      	ldr	r2, [r3, #20]
 8000e82:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <HAL_UART_MspInit+0x118>)
 8000e84:	2180      	movs	r1, #128	; 0x80
 8000e86:	0289      	lsls	r1, r1, #10
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	615a      	str	r2, [r3, #20]
 8000e8c:	4b32      	ldr	r3, [pc, #200]	; (8000f58 <HAL_UART_MspInit+0x118>)
 8000e8e:	695a      	ldr	r2, [r3, #20]
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	029b      	lsls	r3, r3, #10
 8000e94:	4013      	ands	r3, r2
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	22c0      	movs	r2, #192	; 0xc0
 8000e9e:	00d2      	lsls	r2, r2, #3
 8000ea0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	0021      	movs	r1, r4
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	187a      	adds	r2, r7, r1
 8000ebe:	2390      	movs	r3, #144	; 0x90
 8000ec0:	05db      	lsls	r3, r3, #23
 8000ec2:	0011      	movs	r1, r2
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f001 f8cf 	bl	8002068 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	201b      	movs	r0, #27
 8000ed0:	f000 fe82 	bl	8001bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ed4:	201b      	movs	r0, #27
 8000ed6:	f000 fe94 	bl	8001c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eda:	e037      	b.n	8000f4c <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a1e      	ldr	r2, [pc, #120]	; (8000f5c <HAL_UART_MspInit+0x11c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d132      	bne.n	8000f4c <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <HAL_UART_MspInit+0x118>)
 8000ee8:	69da      	ldr	r2, [r3, #28]
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_UART_MspInit+0x118>)
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	0289      	lsls	r1, r1, #10
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	61da      	str	r2, [r3, #28]
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <HAL_UART_MspInit+0x118>)
 8000ef6:	69da      	ldr	r2, [r3, #28]
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	029b      	lsls	r3, r3, #10
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_UART_MspInit+0x118>)
 8000f04:	695a      	ldr	r2, [r3, #20]
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <HAL_UART_MspInit+0x118>)
 8000f08:	2180      	movs	r1, #128	; 0x80
 8000f0a:	0289      	lsls	r1, r1, #10
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	615a      	str	r2, [r3, #20]
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_UART_MspInit+0x118>)
 8000f12:	695a      	ldr	r2, [r3, #20]
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	029b      	lsls	r3, r3, #10
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f1e:	211c      	movs	r1, #28
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	220c      	movs	r2, #12
 8000f24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2202      	movs	r2, #2
 8000f2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2203      	movs	r2, #3
 8000f36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	187a      	adds	r2, r7, r1
 8000f40:	2390      	movs	r3, #144	; 0x90
 8000f42:	05db      	lsls	r3, r3, #23
 8000f44:	0011      	movs	r1, r2
 8000f46:	0018      	movs	r0, r3
 8000f48:	f001 f88e 	bl	8002068 <HAL_GPIO_Init>
}
 8000f4c:	46c0      	nop			; (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b00d      	add	sp, #52	; 0x34
 8000f52:	bd90      	pop	{r4, r7, pc}
 8000f54:	40013800 	.word	0x40013800
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40004400 	.word	0x40004400

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <NMI_Handler+0x4>

08000f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <HardFault_Handler+0x4>

08000f6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f84:	f000 f954 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <DMA1_Channel1_IRQHandler+0x14>)
 8000f96:	0018      	movs	r0, r3
 8000f98:	f000 ff7b 	bl	8001e92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	200000cc 	.word	0x200000cc

08000fa8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f002 f886 	bl	80030c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	20000110 	.word	0x20000110

08000fc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <USART1_IRQHandler+0x14>)
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f002 fddc 	bl	8003b84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	20000158 	.word	0x20000158

08000fd8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	e00a      	b.n	8001000 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fea:	e000      	b.n	8000fee <_read+0x16>
 8000fec:	bf00      	nop
 8000fee:	0001      	movs	r1, r0
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	60ba      	str	r2, [r7, #8]
 8000ff6:	b2ca      	uxtb	r2, r1
 8000ff8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	429a      	cmp	r2, r3
 8001006:	dbf0      	blt.n	8000fea <_read+0x12>
	}

return len;
 8001008:	687b      	ldr	r3, [r7, #4]
}
 800100a:	0018      	movs	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	b006      	add	sp, #24
 8001010:	bd80      	pop	{r7, pc}

08001012 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	e009      	b.n	8001038 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	1c5a      	adds	r2, r3, #1
 8001028:	60ba      	str	r2, [r7, #8]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	0018      	movs	r0, r3
 800102e:	f7ff f9eb 	bl	8000408 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3301      	adds	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	429a      	cmp	r2, r3
 800103e:	dbf1      	blt.n	8001024 <_write+0x12>
	}
	return len;
 8001040:	687b      	ldr	r3, [r7, #4]
}
 8001042:	0018      	movs	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	b006      	add	sp, #24
 8001048:	bd80      	pop	{r7, pc}

0800104a <_close>:

int _close(int file)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
	return -1;
 8001052:	2301      	movs	r3, #1
 8001054:	425b      	negs	r3, r3
}
 8001056:	0018      	movs	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	b002      	add	sp, #8
 800105c:	bd80      	pop	{r7, pc}

0800105e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	0192      	lsls	r2, r2, #6
 800106e:	605a      	str	r2, [r3, #4]
	return 0;
 8001070:	2300      	movs	r3, #0
}
 8001072:	0018      	movs	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	b002      	add	sp, #8
 8001078:	bd80      	pop	{r7, pc}

0800107a <_isatty>:

int _isatty(int file)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
	return 1;
 8001082:	2301      	movs	r3, #1
}
 8001084:	0018      	movs	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	b002      	add	sp, #8
 800108a:	bd80      	pop	{r7, pc}

0800108c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
	return 0;
 8001098:	2300      	movs	r3, #0
}
 800109a:	0018      	movs	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	b004      	add	sp, #16
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ac:	4a14      	ldr	r2, [pc, #80]	; (8001100 <_sbrk+0x5c>)
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <_sbrk+0x60>)
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <_sbrk+0x64>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <_sbrk+0x68>)
 80010c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	18d3      	adds	r3, r2, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d207      	bcs.n	80010e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d4:	f003 fec6 	bl	8004e64 <__errno>
 80010d8:	0003      	movs	r3, r0
 80010da:	220c      	movs	r2, #12
 80010dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010de:	2301      	movs	r3, #1
 80010e0:	425b      	negs	r3, r3
 80010e2:	e009      	b.n	80010f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	18d2      	adds	r2, r2, r3
 80010f2:	4b05      	ldr	r3, [pc, #20]	; (8001108 <_sbrk+0x64>)
 80010f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80010f6:	68fb      	ldr	r3, [r7, #12]
}
 80010f8:	0018      	movs	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b006      	add	sp, #24
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20001800 	.word	0x20001800
 8001104:	00000400 	.word	0x00000400
 8001108:	20000284 	.word	0x20000284
 800110c:	200002a0 	.word	0x200002a0

08001110 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001114:	46c0      	nop			; (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800111c:	4813      	ldr	r0, [pc, #76]	; (800116c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800111e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001120:	4813      	ldr	r0, [pc, #76]	; (8001170 <LoopForever+0x6>)
    LDR R1, [R0]
 8001122:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001124:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001126:	4a13      	ldr	r2, [pc, #76]	; (8001174 <LoopForever+0xa>)
    CMP R1, R2
 8001128:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800112a:	d105      	bne.n	8001138 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800112c:	4812      	ldr	r0, [pc, #72]	; (8001178 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800112e:	4913      	ldr	r1, [pc, #76]	; (800117c <LoopForever+0x12>)
    STR R1, [R0]
 8001130:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001132:	4813      	ldr	r0, [pc, #76]	; (8001180 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001134:	4913      	ldr	r1, [pc, #76]	; (8001184 <LoopForever+0x1a>)
    STR R1, [R0]
 8001136:	6001      	str	r1, [r0, #0]

08001138 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001138:	4813      	ldr	r0, [pc, #76]	; (8001188 <LoopForever+0x1e>)
  ldr r1, =_edata
 800113a:	4914      	ldr	r1, [pc, #80]	; (800118c <LoopForever+0x22>)
  ldr r2, =_sidata
 800113c:	4a14      	ldr	r2, [pc, #80]	; (8001190 <LoopForever+0x26>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a11      	ldr	r2, [pc, #68]	; (8001194 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001150:	4c11      	ldr	r4, [pc, #68]	; (8001198 <LoopForever+0x2e>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800115e:	f7ff ffd7 	bl	8001110 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001162:	f003 fe85 	bl	8004e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001166:	f7ff f961 	bl	800042c <main>

0800116a <LoopForever>:

LoopForever:
    b LoopForever
 800116a:	e7fe      	b.n	800116a <LoopForever>
  ldr   r0, =_estack
 800116c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001170:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001174:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001178:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800117c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001180:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001184:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800118c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001190:	08006188 	.word	0x08006188
  ldr r2, =_sbss
 8001194:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001198:	2000029c 	.word	0x2000029c

0800119c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC1_IRQHandler>
	...

080011a0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <HAL_Init+0x24>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_Init+0x24>)
 80011aa:	2110      	movs	r1, #16
 80011ac:	430a      	orrs	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011b0:	2003      	movs	r0, #3
 80011b2:	f000 f809 	bl	80011c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b6:	f7ff fd85 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	0018      	movs	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	40022000 	.word	0x40022000

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_InitTick+0x5c>)
 80011d2:	681c      	ldr	r4, [r3, #0]
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <HAL_InitTick+0x60>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	0019      	movs	r1, r3
 80011da:	23fa      	movs	r3, #250	; 0xfa
 80011dc:	0098      	lsls	r0, r3, #2
 80011de:	f7fe ff9d 	bl	800011c <__udivsi3>
 80011e2:	0003      	movs	r3, r0
 80011e4:	0019      	movs	r1, r3
 80011e6:	0020      	movs	r0, r4
 80011e8:	f7fe ff98 	bl	800011c <__udivsi3>
 80011ec:	0003      	movs	r3, r0
 80011ee:	0018      	movs	r0, r3
 80011f0:	f000 fd17 	bl	8001c22 <HAL_SYSTICK_Config>
 80011f4:	1e03      	subs	r3, r0, #0
 80011f6:	d001      	beq.n	80011fc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e00f      	b.n	800121c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d80b      	bhi.n	800121a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	2301      	movs	r3, #1
 8001206:	425b      	negs	r3, r3
 8001208:	2200      	movs	r2, #0
 800120a:	0018      	movs	r0, r3
 800120c:	f000 fce4 	bl	8001bd8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_InitTick+0x64>)
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e000      	b.n	800121c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
}
 800121c:	0018      	movs	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	b003      	add	sp, #12
 8001222:	bd90      	pop	{r4, r7, pc}
 8001224:	20000000 	.word	0x20000000
 8001228:	20000008 	.word	0x20000008
 800122c:	20000004 	.word	0x20000004

08001230 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_IncTick+0x1c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	001a      	movs	r2, r3
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_IncTick+0x20>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	18d2      	adds	r2, r2, r3
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <HAL_IncTick+0x20>)
 8001242:	601a      	str	r2, [r3, #0]
}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	20000008 	.word	0x20000008
 8001250:	20000288 	.word	0x20000288

08001254 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b02      	ldr	r3, [pc, #8]	; (8001264 <HAL_GetTick+0x10>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	0018      	movs	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	20000288 	.word	0x20000288

08001268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff fff0 	bl	8001254 <HAL_GetTick>
 8001274:	0003      	movs	r3, r0
 8001276:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3301      	adds	r3, #1
 8001280:	d005      	beq.n	800128e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_Delay+0x44>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	001a      	movs	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	189b      	adds	r3, r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	f7ff ffe0 	bl	8001254 <HAL_GetTick>
 8001294:	0002      	movs	r2, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8f7      	bhi.n	8001290 <HAL_Delay+0x28>
  {
  }
}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b004      	add	sp, #16
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	20000008 	.word	0x20000008

080012b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b8:	230f      	movs	r3, #15
 80012ba:	18fb      	adds	r3, r7, r3
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e125      	b.n	800151a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10a      	bne.n	80012ec <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2234      	movs	r2, #52	; 0x34
 80012e0:	2100      	movs	r1, #0
 80012e2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	0018      	movs	r0, r3
 80012e8:	f7ff fd10 	bl	8000d0c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f0:	2210      	movs	r2, #16
 80012f2:	4013      	ands	r3, r2
 80012f4:	d000      	beq.n	80012f8 <HAL_ADC_Init+0x48>
 80012f6:	e103      	b.n	8001500 <HAL_ADC_Init+0x250>
 80012f8:	230f      	movs	r3, #15
 80012fa:	18fb      	adds	r3, r7, r3
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d000      	beq.n	8001304 <HAL_ADC_Init+0x54>
 8001302:	e0fd      	b.n	8001500 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	2204      	movs	r2, #4
 800130c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800130e:	d000      	beq.n	8001312 <HAL_ADC_Init+0x62>
 8001310:	e0f6      	b.n	8001500 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001316:	4a83      	ldr	r2, [pc, #524]	; (8001524 <HAL_ADC_Init+0x274>)
 8001318:	4013      	ands	r3, r2
 800131a:	2202      	movs	r2, #2
 800131c:	431a      	orrs	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2203      	movs	r2, #3
 800132a:	4013      	ands	r3, r2
 800132c:	2b01      	cmp	r3, #1
 800132e:	d112      	bne.n	8001356 <HAL_ADC_Init+0xa6>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2201      	movs	r2, #1
 8001338:	4013      	ands	r3, r2
 800133a:	2b01      	cmp	r3, #1
 800133c:	d009      	beq.n	8001352 <HAL_ADC_Init+0xa2>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	401a      	ands	r2, r3
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	429a      	cmp	r2, r3
 8001350:	d101      	bne.n	8001356 <HAL_ADC_Init+0xa6>
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <HAL_ADC_Init+0xa8>
 8001356:	2300      	movs	r3, #0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d116      	bne.n	800138a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2218      	movs	r2, #24
 8001364:	4393      	bics	r3, r2
 8001366:	0019      	movs	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	0899      	lsrs	r1, r3, #2
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4964      	ldr	r1, [pc, #400]	; (8001528 <HAL_ADC_Init+0x278>)
 8001396:	400a      	ands	r2, r1
 8001398:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	7e1b      	ldrb	r3, [r3, #24]
 800139e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7e5b      	ldrb	r3, [r3, #25]
 80013a4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013a6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7e9b      	ldrb	r3, [r3, #26]
 80013ac:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80013ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d002      	beq.n	80013be <HAL_ADC_Init+0x10e>
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	015b      	lsls	r3, r3, #5
 80013bc:	e000      	b.n	80013c0 <HAL_ADC_Init+0x110>
 80013be:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80013c0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80013c6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d101      	bne.n	80013d4 <HAL_ADC_Init+0x124>
 80013d0:	2304      	movs	r3, #4
 80013d2:	e000      	b.n	80013d6 <HAL_ADC_Init+0x126>
 80013d4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80013d6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2124      	movs	r1, #36	; 0x24
 80013dc:	5c5b      	ldrb	r3, [r3, r1]
 80013de:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80013e0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7edb      	ldrb	r3, [r3, #27]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d115      	bne.n	800141c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7e9b      	ldrb	r3, [r3, #26]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d105      	bne.n	8001404 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	0252      	lsls	r2, r2, #9
 80013fe:	4313      	orrs	r3, r2
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	e00b      	b.n	800141c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001408:	2220      	movs	r2, #32
 800140a:	431a      	orrs	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001414:	2201      	movs	r2, #1
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69da      	ldr	r2, [r3, #28]
 8001420:	23c2      	movs	r3, #194	; 0xc2
 8001422:	33ff      	adds	r3, #255	; 0xff
 8001424:	429a      	cmp	r2, r3
 8001426:	d007      	beq.n	8001438 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001430:	4313      	orrs	r3, r2
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	4313      	orrs	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68d9      	ldr	r1, [r3, #12]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	430a      	orrs	r2, r1
 8001446:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	055b      	lsls	r3, r3, #21
 8001450:	429a      	cmp	r2, r3
 8001452:	d01b      	beq.n	800148c <HAL_ADC_Init+0x1dc>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	2b01      	cmp	r3, #1
 800145a:	d017      	beq.n	800148c <HAL_ADC_Init+0x1dc>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	2b02      	cmp	r3, #2
 8001462:	d013      	beq.n	800148c <HAL_ADC_Init+0x1dc>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	2b03      	cmp	r3, #3
 800146a:	d00f      	beq.n	800148c <HAL_ADC_Init+0x1dc>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	2b04      	cmp	r3, #4
 8001472:	d00b      	beq.n	800148c <HAL_ADC_Init+0x1dc>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	2b05      	cmp	r3, #5
 800147a:	d007      	beq.n	800148c <HAL_ADC_Init+0x1dc>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001480:	2b06      	cmp	r3, #6
 8001482:	d003      	beq.n	800148c <HAL_ADC_Init+0x1dc>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	2b07      	cmp	r3, #7
 800148a:	d112      	bne.n	80014b2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	695a      	ldr	r2, [r3, #20]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2107      	movs	r1, #7
 8001498:	438a      	bics	r2, r1
 800149a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6959      	ldr	r1, [r3, #20]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a6:	2207      	movs	r2, #7
 80014a8:	401a      	ands	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	4a1c      	ldr	r2, [pc, #112]	; (800152c <HAL_ADC_Init+0x27c>)
 80014ba:	4013      	ands	r3, r2
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d10b      	bne.n	80014da <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014cc:	2203      	movs	r2, #3
 80014ce:	4393      	bics	r3, r2
 80014d0:	2201      	movs	r2, #1
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80014d8:	e01c      	b.n	8001514 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014de:	2212      	movs	r2, #18
 80014e0:	4393      	bics	r3, r2
 80014e2:	2210      	movs	r2, #16
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ee:	2201      	movs	r2, #1
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80014f6:	230f      	movs	r3, #15
 80014f8:	18fb      	adds	r3, r7, r3
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80014fe:	e009      	b.n	8001514 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001504:	2210      	movs	r2, #16
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800150c:	230f      	movs	r3, #15
 800150e:	18fb      	adds	r3, r7, r3
 8001510:	2201      	movs	r2, #1
 8001512:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001514:	230f      	movs	r3, #15
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	781b      	ldrb	r3, [r3, #0]
}
 800151a:	0018      	movs	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	b004      	add	sp, #16
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	fffffefd 	.word	0xfffffefd
 8001528:	fffe0219 	.word	0xfffe0219
 800152c:	833fffe7 	.word	0x833fffe7

08001530 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800153c:	2317      	movs	r3, #23
 800153e:	18fb      	adds	r3, r7, r3
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2204      	movs	r2, #4
 800154c:	4013      	ands	r3, r2
 800154e:	d15e      	bne.n	800160e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2234      	movs	r2, #52	; 0x34
 8001554:	5c9b      	ldrb	r3, [r3, r2]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d101      	bne.n	800155e <HAL_ADC_Start_DMA+0x2e>
 800155a:	2302      	movs	r3, #2
 800155c:	e05e      	b.n	800161c <HAL_ADC_Start_DMA+0xec>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2234      	movs	r2, #52	; 0x34
 8001562:	2101      	movs	r1, #1
 8001564:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	7e5b      	ldrb	r3, [r3, #25]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d007      	beq.n	800157e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800156e:	2317      	movs	r3, #23
 8001570:	18fc      	adds	r4, r7, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	0018      	movs	r0, r3
 8001576:	f000 f97b 	bl	8001870 <ADC_Enable>
 800157a:	0003      	movs	r3, r0
 800157c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800157e:	2317      	movs	r3, #23
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d146      	bne.n	8001616 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158c:	4a25      	ldr	r2, [pc, #148]	; (8001624 <HAL_ADC_Start_DMA+0xf4>)
 800158e:	4013      	ands	r3, r2
 8001590:	2280      	movs	r2, #128	; 0x80
 8001592:	0052      	lsls	r2, r2, #1
 8001594:	431a      	orrs	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2234      	movs	r2, #52	; 0x34
 80015a4:	2100      	movs	r1, #0
 80015a6:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ac:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <HAL_ADC_Start_DMA+0xf8>)
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b4:	4a1d      	ldr	r2, [pc, #116]	; (800162c <HAL_ADC_Start_DMA+0xfc>)
 80015b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015bc:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <HAL_ADC_Start_DMA+0x100>)
 80015be:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	221c      	movs	r2, #28
 80015c6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2110      	movs	r1, #16
 80015d4:	430a      	orrs	r2, r1
 80015d6:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68da      	ldr	r2, [r3, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2101      	movs	r1, #1
 80015e4:	430a      	orrs	r2, r1
 80015e6:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3340      	adds	r3, #64	; 0x40
 80015f2:	0019      	movs	r1, r3
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f000 fb68 	bl	8001ccc <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2104      	movs	r1, #4
 8001608:	430a      	orrs	r2, r1
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	e003      	b.n	8001616 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800160e:	2317      	movs	r3, #23
 8001610:	18fb      	adds	r3, r7, r3
 8001612:	2202      	movs	r2, #2
 8001614:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001616:	2317      	movs	r3, #23
 8001618:	18fb      	adds	r3, r7, r3
 800161a:	781b      	ldrb	r3, [r3, #0]
}
 800161c:	0018      	movs	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	b007      	add	sp, #28
 8001622:	bd90      	pop	{r4, r7, pc}
 8001624:	fffff0fe 	.word	0xfffff0fe
 8001628:	08001979 	.word	0x08001979
 800162c:	08001a2d 	.word	0x08001a2d
 8001630:	08001a4b 	.word	0x08001a4b

08001634 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800163c:	46c0      	nop			; (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	b002      	add	sp, #8
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800164c:	46c0      	nop			; (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b002      	add	sp, #8
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800165e:	230f      	movs	r3, #15
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	055b      	lsls	r3, r3, #21
 8001672:	429a      	cmp	r2, r3
 8001674:	d011      	beq.n	800169a <HAL_ADC_ConfigChannel+0x46>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167a:	2b01      	cmp	r3, #1
 800167c:	d00d      	beq.n	800169a <HAL_ADC_ConfigChannel+0x46>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001682:	2b02      	cmp	r3, #2
 8001684:	d009      	beq.n	800169a <HAL_ADC_ConfigChannel+0x46>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168a:	2b03      	cmp	r3, #3
 800168c:	d005      	beq.n	800169a <HAL_ADC_ConfigChannel+0x46>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001692:	2b04      	cmp	r3, #4
 8001694:	d001      	beq.n	800169a <HAL_ADC_ConfigChannel+0x46>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2234      	movs	r2, #52	; 0x34
 800169e:	5c9b      	ldrb	r3, [r3, r2]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x54>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e0d0      	b.n	800184a <HAL_ADC_ConfigChannel+0x1f6>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2234      	movs	r2, #52	; 0x34
 80016ac:	2101      	movs	r1, #1
 80016ae:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2204      	movs	r2, #4
 80016b8:	4013      	ands	r3, r2
 80016ba:	d000      	beq.n	80016be <HAL_ADC_ConfigChannel+0x6a>
 80016bc:	e0b4      	b.n	8001828 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4a64      	ldr	r2, [pc, #400]	; (8001854 <HAL_ADC_ConfigChannel+0x200>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d100      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x76>
 80016c8:	e082      	b.n	80017d0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2201      	movs	r2, #1
 80016d6:	409a      	lsls	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	055b      	lsls	r3, r3, #21
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d037      	beq.n	800175c <HAL_ADC_ConfigChannel+0x108>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d033      	beq.n	800175c <HAL_ADC_ConfigChannel+0x108>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d02f      	beq.n	800175c <HAL_ADC_ConfigChannel+0x108>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	2b03      	cmp	r3, #3
 8001702:	d02b      	beq.n	800175c <HAL_ADC_ConfigChannel+0x108>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	2b04      	cmp	r3, #4
 800170a:	d027      	beq.n	800175c <HAL_ADC_ConfigChannel+0x108>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	2b05      	cmp	r3, #5
 8001712:	d023      	beq.n	800175c <HAL_ADC_ConfigChannel+0x108>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	2b06      	cmp	r3, #6
 800171a:	d01f      	beq.n	800175c <HAL_ADC_ConfigChannel+0x108>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	2b07      	cmp	r3, #7
 8001722:	d01b      	beq.n	800175c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	2107      	movs	r1, #7
 8001730:	400b      	ands	r3, r1
 8001732:	429a      	cmp	r2, r3
 8001734:	d012      	beq.n	800175c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	695a      	ldr	r2, [r3, #20]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2107      	movs	r1, #7
 8001742:	438a      	bics	r2, r1
 8001744:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6959      	ldr	r1, [r3, #20]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2207      	movs	r2, #7
 8001752:	401a      	ands	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b10      	cmp	r3, #16
 8001762:	d007      	beq.n	8001774 <HAL_ADC_ConfigChannel+0x120>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b11      	cmp	r3, #17
 800176a:	d003      	beq.n	8001774 <HAL_ADC_ConfigChannel+0x120>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b12      	cmp	r3, #18
 8001772:	d163      	bne.n	800183c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001774:	4b38      	ldr	r3, [pc, #224]	; (8001858 <HAL_ADC_ConfigChannel+0x204>)
 8001776:	6819      	ldr	r1, [r3, #0]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b10      	cmp	r3, #16
 800177e:	d009      	beq.n	8001794 <HAL_ADC_ConfigChannel+0x140>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b11      	cmp	r3, #17
 8001786:	d102      	bne.n	800178e <HAL_ADC_ConfigChannel+0x13a>
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	03db      	lsls	r3, r3, #15
 800178c:	e004      	b.n	8001798 <HAL_ADC_ConfigChannel+0x144>
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	045b      	lsls	r3, r3, #17
 8001792:	e001      	b.n	8001798 <HAL_ADC_ConfigChannel+0x144>
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	041b      	lsls	r3, r3, #16
 8001798:	4a2f      	ldr	r2, [pc, #188]	; (8001858 <HAL_ADC_ConfigChannel+0x204>)
 800179a:	430b      	orrs	r3, r1
 800179c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b10      	cmp	r3, #16
 80017a4:	d14a      	bne.n	800183c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017a6:	4b2d      	ldr	r3, [pc, #180]	; (800185c <HAL_ADC_ConfigChannel+0x208>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	492d      	ldr	r1, [pc, #180]	; (8001860 <HAL_ADC_ConfigChannel+0x20c>)
 80017ac:	0018      	movs	r0, r3
 80017ae:	f7fe fcb5 	bl	800011c <__udivsi3>
 80017b2:	0003      	movs	r3, r0
 80017b4:	001a      	movs	r2, r3
 80017b6:	0013      	movs	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	189b      	adds	r3, r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017c0:	e002      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f9      	bne.n	80017c2 <HAL_ADC_ConfigChannel+0x16e>
 80017ce:	e035      	b.n	800183c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2101      	movs	r1, #1
 80017dc:	4099      	lsls	r1, r3
 80017de:	000b      	movs	r3, r1
 80017e0:	43d9      	mvns	r1, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	400a      	ands	r2, r1
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b10      	cmp	r3, #16
 80017f0:	d007      	beq.n	8001802 <HAL_ADC_ConfigChannel+0x1ae>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b11      	cmp	r3, #17
 80017f8:	d003      	beq.n	8001802 <HAL_ADC_ConfigChannel+0x1ae>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b12      	cmp	r3, #18
 8001800:	d11c      	bne.n	800183c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_ADC_ConfigChannel+0x204>)
 8001804:	6819      	ldr	r1, [r3, #0]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b10      	cmp	r3, #16
 800180c:	d007      	beq.n	800181e <HAL_ADC_ConfigChannel+0x1ca>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b11      	cmp	r3, #17
 8001814:	d101      	bne.n	800181a <HAL_ADC_ConfigChannel+0x1c6>
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <HAL_ADC_ConfigChannel+0x210>)
 8001818:	e002      	b.n	8001820 <HAL_ADC_ConfigChannel+0x1cc>
 800181a:	4b13      	ldr	r3, [pc, #76]	; (8001868 <HAL_ADC_ConfigChannel+0x214>)
 800181c:	e000      	b.n	8001820 <HAL_ADC_ConfigChannel+0x1cc>
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_ADC_ConfigChannel+0x218>)
 8001820:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <HAL_ADC_ConfigChannel+0x204>)
 8001822:	400b      	ands	r3, r1
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e009      	b.n	800183c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182c:	2220      	movs	r2, #32
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001834:	230f      	movs	r3, #15
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2234      	movs	r2, #52	; 0x34
 8001840:	2100      	movs	r1, #0
 8001842:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001844:	230f      	movs	r3, #15
 8001846:	18fb      	adds	r3, r7, r3
 8001848:	781b      	ldrb	r3, [r3, #0]
}
 800184a:	0018      	movs	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	b004      	add	sp, #16
 8001850:	bd80      	pop	{r7, pc}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	00001001 	.word	0x00001001
 8001858:	40012708 	.word	0x40012708
 800185c:	20000000 	.word	0x20000000
 8001860:	000f4240 	.word	0x000f4240
 8001864:	ffbfffff 	.word	0xffbfffff
 8001868:	feffffff 	.word	0xfeffffff
 800186c:	ff7fffff 	.word	0xff7fffff

08001870 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2203      	movs	r2, #3
 8001888:	4013      	ands	r3, r2
 800188a:	2b01      	cmp	r3, #1
 800188c:	d112      	bne.n	80018b4 <ADC_Enable+0x44>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2201      	movs	r2, #1
 8001896:	4013      	ands	r3, r2
 8001898:	2b01      	cmp	r3, #1
 800189a:	d009      	beq.n	80018b0 <ADC_Enable+0x40>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	401a      	ands	r2, r3
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d101      	bne.n	80018b4 <ADC_Enable+0x44>
 80018b0:	2301      	movs	r3, #1
 80018b2:	e000      	b.n	80018b6 <ADC_Enable+0x46>
 80018b4:	2300      	movs	r3, #0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d152      	bne.n	8001960 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	4a2a      	ldr	r2, [pc, #168]	; (800196c <ADC_Enable+0xfc>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	d00d      	beq.n	80018e2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ca:	2210      	movs	r2, #16
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d6:	2201      	movs	r2, #1
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e03f      	b.n	8001962 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2101      	movs	r1, #1
 80018ee:	430a      	orrs	r2, r1
 80018f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018f2:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <ADC_Enable+0x100>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	491f      	ldr	r1, [pc, #124]	; (8001974 <ADC_Enable+0x104>)
 80018f8:	0018      	movs	r0, r3
 80018fa:	f7fe fc0f 	bl	800011c <__udivsi3>
 80018fe:	0003      	movs	r3, r0
 8001900:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001902:	e002      	b.n	800190a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	3b01      	subs	r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f9      	bne.n	8001904 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001910:	f7ff fca0 	bl	8001254 <HAL_GetTick>
 8001914:	0003      	movs	r3, r0
 8001916:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001918:	e01b      	b.n	8001952 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800191a:	f7ff fc9b 	bl	8001254 <HAL_GetTick>
 800191e:	0002      	movs	r2, r0
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d914      	bls.n	8001952 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2201      	movs	r2, #1
 8001930:	4013      	ands	r3, r2
 8001932:	2b01      	cmp	r3, #1
 8001934:	d00d      	beq.n	8001952 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193a:	2210      	movs	r2, #16
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001946:	2201      	movs	r2, #1
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e007      	b.n	8001962 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2201      	movs	r2, #1
 800195a:	4013      	ands	r3, r2
 800195c:	2b01      	cmp	r3, #1
 800195e:	d1dc      	bne.n	800191a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	0018      	movs	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	b004      	add	sp, #16
 8001968:	bd80      	pop	{r7, pc}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	80000017 	.word	0x80000017
 8001970:	20000000 	.word	0x20000000
 8001974:	000f4240 	.word	0x000f4240

08001978 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198a:	2250      	movs	r2, #80	; 0x50
 800198c:	4013      	ands	r3, r2
 800198e:	d140      	bne.n	8001a12 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	0092      	lsls	r2, r2, #2
 8001998:	431a      	orrs	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	23c0      	movs	r3, #192	; 0xc0
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	4013      	ands	r3, r2
 80019aa:	d12d      	bne.n	8001a08 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d129      	bne.n	8001a08 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2208      	movs	r2, #8
 80019bc:	4013      	ands	r3, r2
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d122      	bne.n	8001a08 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2204      	movs	r2, #4
 80019ca:	4013      	ands	r3, r2
 80019cc:	d110      	bne.n	80019f0 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	210c      	movs	r1, #12
 80019da:	438a      	bics	r2, r1
 80019dc:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e2:	4a11      	ldr	r2, [pc, #68]	; (8001a28 <ADC_DMAConvCplt+0xb0>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	2201      	movs	r2, #1
 80019e8:	431a      	orrs	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	639a      	str	r2, [r3, #56]	; 0x38
 80019ee:	e00b      	b.n	8001a08 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f4:	2220      	movs	r2, #32
 80019f6:	431a      	orrs	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a00:	2201      	movs	r2, #1
 8001a02:	431a      	orrs	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f7ff f914 	bl	8000c38 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001a10:	e005      	b.n	8001a1e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	0010      	movs	r0, r2
 8001a1c:	4798      	blx	r3
}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b004      	add	sp, #16
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	fffffefe 	.word	0xfffffefe

08001a2c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7ff fdf9 	bl	8001634 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b004      	add	sp, #16
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b084      	sub	sp, #16
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5c:	2240      	movs	r2, #64	; 0x40
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a68:	2204      	movs	r2, #4
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	0018      	movs	r0, r3
 8001a74:	f7ff fde6 	bl	8001644 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b004      	add	sp, #16
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	0002      	movs	r2, r0
 8001a88:	1dfb      	adds	r3, r7, #7
 8001a8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	1dfb      	adds	r3, r7, #7
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b7f      	cmp	r3, #127	; 0x7f
 8001a92:	d809      	bhi.n	8001aa8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a94:	1dfb      	adds	r3, r7, #7
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	001a      	movs	r2, r3
 8001a9a:	231f      	movs	r3, #31
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <__NVIC_EnableIRQ+0x30>)
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	4091      	lsls	r1, r2
 8001aa4:	000a      	movs	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]
  }
}
 8001aa8:	46c0      	nop			; (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b002      	add	sp, #8
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	e000e100 	.word	0xe000e100

08001ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	0002      	movs	r2, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	1dfb      	adds	r3, r7, #7
 8001ac0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ac2:	1dfb      	adds	r3, r7, #7
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ac8:	d828      	bhi.n	8001b1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aca:	4a2f      	ldr	r2, [pc, #188]	; (8001b88 <__NVIC_SetPriority+0xd4>)
 8001acc:	1dfb      	adds	r3, r7, #7
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	b25b      	sxtb	r3, r3
 8001ad2:	089b      	lsrs	r3, r3, #2
 8001ad4:	33c0      	adds	r3, #192	; 0xc0
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	589b      	ldr	r3, [r3, r2]
 8001ada:	1dfa      	adds	r2, r7, #7
 8001adc:	7812      	ldrb	r2, [r2, #0]
 8001ade:	0011      	movs	r1, r2
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	400a      	ands	r2, r1
 8001ae4:	00d2      	lsls	r2, r2, #3
 8001ae6:	21ff      	movs	r1, #255	; 0xff
 8001ae8:	4091      	lsls	r1, r2
 8001aea:	000a      	movs	r2, r1
 8001aec:	43d2      	mvns	r2, r2
 8001aee:	401a      	ands	r2, r3
 8001af0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	019b      	lsls	r3, r3, #6
 8001af6:	22ff      	movs	r2, #255	; 0xff
 8001af8:	401a      	ands	r2, r3
 8001afa:	1dfb      	adds	r3, r7, #7
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	0018      	movs	r0, r3
 8001b00:	2303      	movs	r3, #3
 8001b02:	4003      	ands	r3, r0
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b08:	481f      	ldr	r0, [pc, #124]	; (8001b88 <__NVIC_SetPriority+0xd4>)
 8001b0a:	1dfb      	adds	r3, r7, #7
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	b25b      	sxtb	r3, r3
 8001b10:	089b      	lsrs	r3, r3, #2
 8001b12:	430a      	orrs	r2, r1
 8001b14:	33c0      	adds	r3, #192	; 0xc0
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b1a:	e031      	b.n	8001b80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b1c:	4a1b      	ldr	r2, [pc, #108]	; (8001b8c <__NVIC_SetPriority+0xd8>)
 8001b1e:	1dfb      	adds	r3, r7, #7
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	0019      	movs	r1, r3
 8001b24:	230f      	movs	r3, #15
 8001b26:	400b      	ands	r3, r1
 8001b28:	3b08      	subs	r3, #8
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3306      	adds	r3, #6
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	18d3      	adds	r3, r2, r3
 8001b32:	3304      	adds	r3, #4
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	1dfa      	adds	r2, r7, #7
 8001b38:	7812      	ldrb	r2, [r2, #0]
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	400a      	ands	r2, r1
 8001b40:	00d2      	lsls	r2, r2, #3
 8001b42:	21ff      	movs	r1, #255	; 0xff
 8001b44:	4091      	lsls	r1, r2
 8001b46:	000a      	movs	r2, r1
 8001b48:	43d2      	mvns	r2, r2
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	019b      	lsls	r3, r3, #6
 8001b52:	22ff      	movs	r2, #255	; 0xff
 8001b54:	401a      	ands	r2, r3
 8001b56:	1dfb      	adds	r3, r7, #7
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	4003      	ands	r3, r0
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b64:	4809      	ldr	r0, [pc, #36]	; (8001b8c <__NVIC_SetPriority+0xd8>)
 8001b66:	1dfb      	adds	r3, r7, #7
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	001c      	movs	r4, r3
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	4023      	ands	r3, r4
 8001b70:	3b08      	subs	r3, #8
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	430a      	orrs	r2, r1
 8001b76:	3306      	adds	r3, #6
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	18c3      	adds	r3, r0, r3
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	601a      	str	r2, [r3, #0]
}
 8001b80:	46c0      	nop			; (mov r8, r8)
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b003      	add	sp, #12
 8001b86:	bd90      	pop	{r4, r7, pc}
 8001b88:	e000e100 	.word	0xe000e100
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	1e5a      	subs	r2, r3, #1
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	045b      	lsls	r3, r3, #17
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d301      	bcc.n	8001ba8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e010      	b.n	8001bca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <SysTick_Config+0x44>)
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	3a01      	subs	r2, #1
 8001bae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	425b      	negs	r3, r3
 8001bb4:	2103      	movs	r1, #3
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f7ff ff7c 	bl	8001ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <SysTick_Config+0x44>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc2:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <SysTick_Config+0x44>)
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	0018      	movs	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b002      	add	sp, #8
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	e000e010 	.word	0xe000e010

08001bd8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	210f      	movs	r1, #15
 8001be4:	187b      	adds	r3, r7, r1
 8001be6:	1c02      	adds	r2, r0, #0
 8001be8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	187b      	adds	r3, r7, r1
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	0011      	movs	r1, r2
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f7ff ff5d 	bl	8001ab4 <__NVIC_SetPriority>
}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b004      	add	sp, #16
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	0002      	movs	r2, r0
 8001c0a:	1dfb      	adds	r3, r7, #7
 8001c0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c0e:	1dfb      	adds	r3, r7, #7
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b25b      	sxtb	r3, r3
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7ff ff33 	bl	8001a80 <__NVIC_EnableIRQ>
}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b002      	add	sp, #8
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f7ff ffaf 	bl	8001b90 <SysTick_Config>
 8001c32:	0003      	movs	r3, r0
}
 8001c34:	0018      	movs	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b002      	add	sp, #8
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e036      	b.n	8001cc0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2221      	movs	r2, #33	; 0x21
 8001c56:	2102      	movs	r1, #2
 8001c58:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4a18      	ldr	r2, [pc, #96]	; (8001cc8 <HAL_DMA_Init+0x8c>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f000 f9c4 	bl	8002030 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2221      	movs	r2, #33	; 0x21
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	2100      	movs	r1, #0
 8001cbc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}  
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b004      	add	sp, #16
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	ffffc00f 	.word	0xffffc00f

08001ccc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001cda:	2317      	movs	r3, #23
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	5c9b      	ldrb	r3, [r3, r2]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_DMA_Start_IT+0x24>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e04f      	b.n	8001d90 <HAL_DMA_Start_IT+0xc4>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2221      	movs	r2, #33	; 0x21
 8001cfc:	5c9b      	ldrb	r3, [r3, r2]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d13a      	bne.n	8001d7a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2221      	movs	r2, #33	; 0x21
 8001d08:	2102      	movs	r1, #2
 8001d0a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	438a      	bics	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	68b9      	ldr	r1, [r7, #8]
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 f954 	bl	8001fd6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d008      	beq.n	8001d48 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	210e      	movs	r1, #14
 8001d42:	430a      	orrs	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	e00f      	b.n	8001d68 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	210a      	movs	r1, #10
 8001d54:	430a      	orrs	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2104      	movs	r1, #4
 8001d64:	438a      	bics	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2101      	movs	r1, #1
 8001d74:	430a      	orrs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	e007      	b.n	8001d8a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	2100      	movs	r1, #0
 8001d80:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001d82:	2317      	movs	r3, #23
 8001d84:	18fb      	adds	r3, r7, r3
 8001d86:	2202      	movs	r2, #2
 8001d88:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8001d8a:	2317      	movs	r3, #23
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	781b      	ldrb	r3, [r3, #0]
} 
 8001d90:	0018      	movs	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b006      	add	sp, #24
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2221      	movs	r2, #33	; 0x21
 8001da4:	5c9b      	ldrb	r3, [r3, r2]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d008      	beq.n	8001dbe <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2204      	movs	r2, #4
 8001db0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2220      	movs	r2, #32
 8001db6:	2100      	movs	r1, #0
 8001db8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e020      	b.n	8001e00 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	210e      	movs	r1, #14
 8001dca:	438a      	bics	r2, r1
 8001dcc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2101      	movs	r1, #1
 8001dda:	438a      	bics	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de6:	2101      	movs	r1, #1
 8001de8:	4091      	lsls	r1, r2
 8001dea:	000a      	movs	r2, r1
 8001dec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2221      	movs	r2, #33	; 0x21
 8001df2:	2101      	movs	r1, #1
 8001df4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2220      	movs	r2, #32
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	0018      	movs	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	b002      	add	sp, #8
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e10:	210f      	movs	r1, #15
 8001e12:	187b      	adds	r3, r7, r1
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2221      	movs	r2, #33	; 0x21
 8001e1c:	5c9b      	ldrb	r3, [r3, r2]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d006      	beq.n	8001e32 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2204      	movs	r2, #4
 8001e28:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e2a:	187b      	adds	r3, r7, r1
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
 8001e30:	e028      	b.n	8001e84 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	210e      	movs	r1, #14
 8001e3e:	438a      	bics	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	438a      	bics	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	4091      	lsls	r1, r2
 8001e5e:	000a      	movs	r2, r1
 8001e60:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2221      	movs	r2, #33	; 0x21
 8001e66:	2101      	movs	r1, #1
 8001e68:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	2100      	movs	r1, #0
 8001e70:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d004      	beq.n	8001e84 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	0010      	movs	r0, r2
 8001e82:	4798      	blx	r3
    } 
  }
  return status;
 8001e84:	230f      	movs	r3, #15
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	781b      	ldrb	r3, [r3, #0]
}
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b004      	add	sp, #16
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b084      	sub	sp, #16
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	2204      	movs	r2, #4
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	0013      	movs	r3, r2
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d024      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x72>
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d020      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d107      	bne.n	8001ede <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2104      	movs	r1, #4
 8001eda:	438a      	bics	r2, r1
 8001edc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee6:	2104      	movs	r1, #4
 8001ee8:	4091      	lsls	r1, r2
 8001eea:	000a      	movs	r2, r1
 8001eec:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d100      	bne.n	8001ef8 <HAL_DMA_IRQHandler+0x66>
 8001ef6:	e06a      	b.n	8001fce <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	0010      	movs	r0, r2
 8001f00:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001f02:	e064      	b.n	8001fce <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	2202      	movs	r2, #2
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	0013      	movs	r3, r2
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4013      	ands	r3, r2
 8001f12:	d02b      	beq.n	8001f6c <HAL_DMA_IRQHandler+0xda>
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2202      	movs	r2, #2
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d027      	beq.n	8001f6c <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2220      	movs	r2, #32
 8001f24:	4013      	ands	r3, r2
 8001f26:	d10b      	bne.n	8001f40 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	210a      	movs	r1, #10
 8001f34:	438a      	bics	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2221      	movs	r2, #33	; 0x21
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f48:	2102      	movs	r1, #2
 8001f4a:	4091      	lsls	r1, r2
 8001f4c:	000a      	movs	r2, r1
 8001f4e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2220      	movs	r2, #32
 8001f54:	2100      	movs	r1, #0
 8001f56:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d036      	beq.n	8001fce <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	0010      	movs	r0, r2
 8001f68:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001f6a:	e030      	b.n	8001fce <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	2208      	movs	r2, #8
 8001f72:	409a      	lsls	r2, r3
 8001f74:	0013      	movs	r3, r2
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d028      	beq.n	8001fce <HAL_DMA_IRQHandler+0x13c>
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2208      	movs	r2, #8
 8001f80:	4013      	ands	r3, r2
 8001f82:	d024      	beq.n	8001fce <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	210e      	movs	r1, #14
 8001f90:	438a      	bics	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	4091      	lsls	r1, r2
 8001fa0:	000a      	movs	r2, r1
 8001fa2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2221      	movs	r2, #33	; 0x21
 8001fae:	2101      	movs	r1, #1
 8001fb0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	0010      	movs	r0, r2
 8001fca:	4798      	blx	r3
    }
   }
}  
 8001fcc:	e7ff      	b.n	8001fce <HAL_DMA_IRQHandler+0x13c>
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b004      	add	sp, #16
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b084      	sub	sp, #16
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fec:	2101      	movs	r1, #1
 8001fee:	4091      	lsls	r1, r2
 8001ff0:	000a      	movs	r2, r1
 8001ff2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b10      	cmp	r3, #16
 8002002:	d108      	bne.n	8002016 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002014:	e007      	b.n	8002026 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	60da      	str	r2, [r3, #12]
}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	b004      	add	sp, #16
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a08      	ldr	r2, [pc, #32]	; (8002060 <DMA_CalcBaseAndBitshift+0x30>)
 800203e:	4694      	mov	ip, r2
 8002040:	4463      	add	r3, ip
 8002042:	2114      	movs	r1, #20
 8002044:	0018      	movs	r0, r3
 8002046:	f7fe f869 	bl	800011c <__udivsi3>
 800204a:	0003      	movs	r3, r0
 800204c:	009a      	lsls	r2, r3, #2
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a03      	ldr	r2, [pc, #12]	; (8002064 <DMA_CalcBaseAndBitshift+0x34>)
 8002056:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002058:	46c0      	nop			; (mov r8, r8)
 800205a:	46bd      	mov	sp, r7
 800205c:	b002      	add	sp, #8
 800205e:	bd80      	pop	{r7, pc}
 8002060:	bffdfff8 	.word	0xbffdfff8
 8002064:	40020000 	.word	0x40020000

08002068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002076:	e149      	b.n	800230c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2101      	movs	r1, #1
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	4091      	lsls	r1, r2
 8002082:	000a      	movs	r2, r1
 8002084:	4013      	ands	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d100      	bne.n	8002090 <HAL_GPIO_Init+0x28>
 800208e:	e13a      	b.n	8002306 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2203      	movs	r2, #3
 8002096:	4013      	ands	r3, r2
 8002098:	2b01      	cmp	r3, #1
 800209a:	d005      	beq.n	80020a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2203      	movs	r2, #3
 80020a2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d130      	bne.n	800210a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	2203      	movs	r2, #3
 80020b4:	409a      	lsls	r2, r3
 80020b6:	0013      	movs	r3, r2
 80020b8:	43da      	mvns	r2, r3
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	409a      	lsls	r2, r3
 80020ca:	0013      	movs	r3, r2
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020de:	2201      	movs	r2, #1
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	409a      	lsls	r2, r3
 80020e4:	0013      	movs	r3, r2
 80020e6:	43da      	mvns	r2, r3
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	091b      	lsrs	r3, r3, #4
 80020f4:	2201      	movs	r2, #1
 80020f6:	401a      	ands	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	409a      	lsls	r2, r3
 80020fc:	0013      	movs	r3, r2
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2203      	movs	r2, #3
 8002110:	4013      	ands	r3, r2
 8002112:	2b03      	cmp	r3, #3
 8002114:	d017      	beq.n	8002146 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	2203      	movs	r2, #3
 8002122:	409a      	lsls	r2, r3
 8002124:	0013      	movs	r3, r2
 8002126:	43da      	mvns	r2, r3
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	409a      	lsls	r2, r3
 8002138:	0013      	movs	r3, r2
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2203      	movs	r2, #3
 800214c:	4013      	ands	r3, r2
 800214e:	2b02      	cmp	r3, #2
 8002150:	d123      	bne.n	800219a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	08da      	lsrs	r2, r3, #3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3208      	adds	r2, #8
 800215a:	0092      	lsls	r2, r2, #2
 800215c:	58d3      	ldr	r3, [r2, r3]
 800215e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2207      	movs	r2, #7
 8002164:	4013      	ands	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	220f      	movs	r2, #15
 800216a:	409a      	lsls	r2, r3
 800216c:	0013      	movs	r3, r2
 800216e:	43da      	mvns	r2, r3
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4013      	ands	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	2107      	movs	r1, #7
 800217e:	400b      	ands	r3, r1
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	409a      	lsls	r2, r3
 8002184:	0013      	movs	r3, r2
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	08da      	lsrs	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3208      	adds	r2, #8
 8002194:	0092      	lsls	r2, r2, #2
 8002196:	6939      	ldr	r1, [r7, #16]
 8002198:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	2203      	movs	r2, #3
 80021a6:	409a      	lsls	r2, r3
 80021a8:	0013      	movs	r3, r2
 80021aa:	43da      	mvns	r2, r3
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4013      	ands	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2203      	movs	r2, #3
 80021b8:	401a      	ands	r2, r3
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	409a      	lsls	r2, r3
 80021c0:	0013      	movs	r3, r2
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	23c0      	movs	r3, #192	; 0xc0
 80021d4:	029b      	lsls	r3, r3, #10
 80021d6:	4013      	ands	r3, r2
 80021d8:	d100      	bne.n	80021dc <HAL_GPIO_Init+0x174>
 80021da:	e094      	b.n	8002306 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021dc:	4b51      	ldr	r3, [pc, #324]	; (8002324 <HAL_GPIO_Init+0x2bc>)
 80021de:	699a      	ldr	r2, [r3, #24]
 80021e0:	4b50      	ldr	r3, [pc, #320]	; (8002324 <HAL_GPIO_Init+0x2bc>)
 80021e2:	2101      	movs	r1, #1
 80021e4:	430a      	orrs	r2, r1
 80021e6:	619a      	str	r2, [r3, #24]
 80021e8:	4b4e      	ldr	r3, [pc, #312]	; (8002324 <HAL_GPIO_Init+0x2bc>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2201      	movs	r2, #1
 80021ee:	4013      	ands	r3, r2
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021f4:	4a4c      	ldr	r2, [pc, #304]	; (8002328 <HAL_GPIO_Init+0x2c0>)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	089b      	lsrs	r3, r3, #2
 80021fa:	3302      	adds	r3, #2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	589b      	ldr	r3, [r3, r2]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2203      	movs	r2, #3
 8002206:	4013      	ands	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	220f      	movs	r2, #15
 800220c:	409a      	lsls	r2, r3
 800220e:	0013      	movs	r3, r2
 8002210:	43da      	mvns	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	2390      	movs	r3, #144	; 0x90
 800221c:	05db      	lsls	r3, r3, #23
 800221e:	429a      	cmp	r2, r3
 8002220:	d00d      	beq.n	800223e <HAL_GPIO_Init+0x1d6>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a41      	ldr	r2, [pc, #260]	; (800232c <HAL_GPIO_Init+0x2c4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d007      	beq.n	800223a <HAL_GPIO_Init+0x1d2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a40      	ldr	r2, [pc, #256]	; (8002330 <HAL_GPIO_Init+0x2c8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d101      	bne.n	8002236 <HAL_GPIO_Init+0x1ce>
 8002232:	2302      	movs	r3, #2
 8002234:	e004      	b.n	8002240 <HAL_GPIO_Init+0x1d8>
 8002236:	2305      	movs	r3, #5
 8002238:	e002      	b.n	8002240 <HAL_GPIO_Init+0x1d8>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_GPIO_Init+0x1d8>
 800223e:	2300      	movs	r3, #0
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	2103      	movs	r1, #3
 8002244:	400a      	ands	r2, r1
 8002246:	0092      	lsls	r2, r2, #2
 8002248:	4093      	lsls	r3, r2
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002250:	4935      	ldr	r1, [pc, #212]	; (8002328 <HAL_GPIO_Init+0x2c0>)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	3302      	adds	r3, #2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800225e:	4b35      	ldr	r3, [pc, #212]	; (8002334 <HAL_GPIO_Init+0x2cc>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	43da      	mvns	r2, r3
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	025b      	lsls	r3, r3, #9
 8002276:	4013      	ands	r3, r2
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002282:	4b2c      	ldr	r3, [pc, #176]	; (8002334 <HAL_GPIO_Init+0x2cc>)
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002288:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <HAL_GPIO_Init+0x2cc>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	43da      	mvns	r2, r3
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	029b      	lsls	r3, r3, #10
 80022a0:	4013      	ands	r3, r2
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022ac:	4b21      	ldr	r3, [pc, #132]	; (8002334 <HAL_GPIO_Init+0x2cc>)
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022b2:	4b20      	ldr	r3, [pc, #128]	; (8002334 <HAL_GPIO_Init+0x2cc>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	43da      	mvns	r2, r3
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4013      	ands	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	035b      	lsls	r3, r3, #13
 80022ca:	4013      	ands	r3, r2
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022d6:	4b17      	ldr	r3, [pc, #92]	; (8002334 <HAL_GPIO_Init+0x2cc>)
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80022dc:	4b15      	ldr	r3, [pc, #84]	; (8002334 <HAL_GPIO_Init+0x2cc>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	43da      	mvns	r2, r3
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	039b      	lsls	r3, r3, #14
 80022f4:	4013      	ands	r3, r2
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <HAL_GPIO_Init+0x2cc>)
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	3301      	adds	r3, #1
 800230a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	40da      	lsrs	r2, r3
 8002314:	1e13      	subs	r3, r2, #0
 8002316:	d000      	beq.n	800231a <HAL_GPIO_Init+0x2b2>
 8002318:	e6ae      	b.n	8002078 <HAL_GPIO_Init+0x10>
  } 
}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	46c0      	nop			; (mov r8, r8)
 800231e:	46bd      	mov	sp, r7
 8002320:	b006      	add	sp, #24
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000
 8002328:	40010000 	.word	0x40010000
 800232c:	48000400 	.word	0x48000400
 8002330:	48000800 	.word	0x48000800
 8002334:	40010400 	.word	0x40010400

08002338 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	000a      	movs	r2, r1
 8002342:	1cbb      	adds	r3, r7, #2
 8002344:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	1cba      	adds	r2, r7, #2
 800234c:	8812      	ldrh	r2, [r2, #0]
 800234e:	4013      	ands	r3, r2
 8002350:	d004      	beq.n	800235c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002352:	230f      	movs	r3, #15
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
 800235a:	e003      	b.n	8002364 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800235c:	230f      	movs	r3, #15
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002364:	230f      	movs	r3, #15
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	781b      	ldrb	r3, [r3, #0]
  }
 800236a:	0018      	movs	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	b004      	add	sp, #16
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	0008      	movs	r0, r1
 800237c:	0011      	movs	r1, r2
 800237e:	1cbb      	adds	r3, r7, #2
 8002380:	1c02      	adds	r2, r0, #0
 8002382:	801a      	strh	r2, [r3, #0]
 8002384:	1c7b      	adds	r3, r7, #1
 8002386:	1c0a      	adds	r2, r1, #0
 8002388:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800238a:	1c7b      	adds	r3, r7, #1
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d004      	beq.n	800239c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002392:	1cbb      	adds	r3, r7, #2
 8002394:	881a      	ldrh	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800239a:	e003      	b.n	80023a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800239c:	1cbb      	adds	r3, r7, #2
 800239e:	881a      	ldrh	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b002      	add	sp, #8
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d102      	bne.n	80023c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	f000 fb76 	bl	8002aac <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2201      	movs	r2, #1
 80023c6:	4013      	ands	r3, r2
 80023c8:	d100      	bne.n	80023cc <HAL_RCC_OscConfig+0x20>
 80023ca:	e08e      	b.n	80024ea <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023cc:	4bc5      	ldr	r3, [pc, #788]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	220c      	movs	r2, #12
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d00e      	beq.n	80023f6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023d8:	4bc2      	ldr	r3, [pc, #776]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	220c      	movs	r2, #12
 80023de:	4013      	ands	r3, r2
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d117      	bne.n	8002414 <HAL_RCC_OscConfig+0x68>
 80023e4:	4bbf      	ldr	r3, [pc, #764]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	23c0      	movs	r3, #192	; 0xc0
 80023ea:	025b      	lsls	r3, r3, #9
 80023ec:	401a      	ands	r2, r3
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	025b      	lsls	r3, r3, #9
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d10e      	bne.n	8002414 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f6:	4bbb      	ldr	r3, [pc, #748]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	029b      	lsls	r3, r3, #10
 80023fe:	4013      	ands	r3, r2
 8002400:	d100      	bne.n	8002404 <HAL_RCC_OscConfig+0x58>
 8002402:	e071      	b.n	80024e8 <HAL_RCC_OscConfig+0x13c>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d000      	beq.n	800240e <HAL_RCC_OscConfig+0x62>
 800240c:	e06c      	b.n	80024e8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	f000 fb4c 	bl	8002aac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d107      	bne.n	800242c <HAL_RCC_OscConfig+0x80>
 800241c:	4bb1      	ldr	r3, [pc, #708]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4bb0      	ldr	r3, [pc, #704]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 8002422:	2180      	movs	r1, #128	; 0x80
 8002424:	0249      	lsls	r1, r1, #9
 8002426:	430a      	orrs	r2, r1
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	e02f      	b.n	800248c <HAL_RCC_OscConfig+0xe0>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10c      	bne.n	800244e <HAL_RCC_OscConfig+0xa2>
 8002434:	4bab      	ldr	r3, [pc, #684]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4baa      	ldr	r3, [pc, #680]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 800243a:	49ab      	ldr	r1, [pc, #684]	; (80026e8 <HAL_RCC_OscConfig+0x33c>)
 800243c:	400a      	ands	r2, r1
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	4ba8      	ldr	r3, [pc, #672]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4ba7      	ldr	r3, [pc, #668]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 8002446:	49a9      	ldr	r1, [pc, #676]	; (80026ec <HAL_RCC_OscConfig+0x340>)
 8002448:	400a      	ands	r2, r1
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	e01e      	b.n	800248c <HAL_RCC_OscConfig+0xe0>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b05      	cmp	r3, #5
 8002454:	d10e      	bne.n	8002474 <HAL_RCC_OscConfig+0xc8>
 8002456:	4ba3      	ldr	r3, [pc, #652]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4ba2      	ldr	r3, [pc, #648]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 800245c:	2180      	movs	r1, #128	; 0x80
 800245e:	02c9      	lsls	r1, r1, #11
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	4b9f      	ldr	r3, [pc, #636]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b9e      	ldr	r3, [pc, #632]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 800246a:	2180      	movs	r1, #128	; 0x80
 800246c:	0249      	lsls	r1, r1, #9
 800246e:	430a      	orrs	r2, r1
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e00b      	b.n	800248c <HAL_RCC_OscConfig+0xe0>
 8002474:	4b9b      	ldr	r3, [pc, #620]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b9a      	ldr	r3, [pc, #616]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 800247a:	499b      	ldr	r1, [pc, #620]	; (80026e8 <HAL_RCC_OscConfig+0x33c>)
 800247c:	400a      	ands	r2, r1
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	4b98      	ldr	r3, [pc, #608]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b97      	ldr	r3, [pc, #604]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 8002486:	4999      	ldr	r1, [pc, #612]	; (80026ec <HAL_RCC_OscConfig+0x340>)
 8002488:	400a      	ands	r2, r1
 800248a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d014      	beq.n	80024be <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7fe fede 	bl	8001254 <HAL_GetTick>
 8002498:	0003      	movs	r3, r0
 800249a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800249e:	f7fe fed9 	bl	8001254 <HAL_GetTick>
 80024a2:	0002      	movs	r2, r0
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b64      	cmp	r3, #100	; 0x64
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e2fd      	b.n	8002aac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b0:	4b8c      	ldr	r3, [pc, #560]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	029b      	lsls	r3, r3, #10
 80024b8:	4013      	ands	r3, r2
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0xf2>
 80024bc:	e015      	b.n	80024ea <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024be:	f7fe fec9 	bl	8001254 <HAL_GetTick>
 80024c2:	0003      	movs	r3, r0
 80024c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c8:	f7fe fec4 	bl	8001254 <HAL_GetTick>
 80024cc:	0002      	movs	r2, r0
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e2e8      	b.n	8002aac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024da:	4b82      	ldr	r3, [pc, #520]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	029b      	lsls	r3, r3, #10
 80024e2:	4013      	ands	r3, r2
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x11c>
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2202      	movs	r2, #2
 80024f0:	4013      	ands	r3, r2
 80024f2:	d100      	bne.n	80024f6 <HAL_RCC_OscConfig+0x14a>
 80024f4:	e06c      	b.n	80025d0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024f6:	4b7b      	ldr	r3, [pc, #492]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	220c      	movs	r2, #12
 80024fc:	4013      	ands	r3, r2
 80024fe:	d00e      	beq.n	800251e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002500:	4b78      	ldr	r3, [pc, #480]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	220c      	movs	r2, #12
 8002506:	4013      	ands	r3, r2
 8002508:	2b08      	cmp	r3, #8
 800250a:	d11f      	bne.n	800254c <HAL_RCC_OscConfig+0x1a0>
 800250c:	4b75      	ldr	r3, [pc, #468]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	23c0      	movs	r3, #192	; 0xc0
 8002512:	025b      	lsls	r3, r3, #9
 8002514:	401a      	ands	r2, r3
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	429a      	cmp	r2, r3
 800251c:	d116      	bne.n	800254c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251e:	4b71      	ldr	r3, [pc, #452]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2202      	movs	r2, #2
 8002524:	4013      	ands	r3, r2
 8002526:	d005      	beq.n	8002534 <HAL_RCC_OscConfig+0x188>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d001      	beq.n	8002534 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e2bb      	b.n	8002aac <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002534:	4b6b      	ldr	r3, [pc, #428]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	22f8      	movs	r2, #248	; 0xf8
 800253a:	4393      	bics	r3, r2
 800253c:	0019      	movs	r1, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	00da      	lsls	r2, r3, #3
 8002544:	4b67      	ldr	r3, [pc, #412]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 8002546:	430a      	orrs	r2, r1
 8002548:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254a:	e041      	b.n	80025d0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d024      	beq.n	800259e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002554:	4b63      	ldr	r3, [pc, #396]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b62      	ldr	r3, [pc, #392]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 800255a:	2101      	movs	r1, #1
 800255c:	430a      	orrs	r2, r1
 800255e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe fe78 	bl	8001254 <HAL_GetTick>
 8002564:	0003      	movs	r3, r0
 8002566:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800256a:	f7fe fe73 	bl	8001254 <HAL_GetTick>
 800256e:	0002      	movs	r2, r0
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e297      	b.n	8002aac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257c:	4b59      	ldr	r3, [pc, #356]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2202      	movs	r2, #2
 8002582:	4013      	ands	r3, r2
 8002584:	d0f1      	beq.n	800256a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4b57      	ldr	r3, [pc, #348]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	22f8      	movs	r2, #248	; 0xf8
 800258c:	4393      	bics	r3, r2
 800258e:	0019      	movs	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	00da      	lsls	r2, r3, #3
 8002596:	4b53      	ldr	r3, [pc, #332]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 8002598:	430a      	orrs	r2, r1
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e018      	b.n	80025d0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259e:	4b51      	ldr	r3, [pc, #324]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4b50      	ldr	r3, [pc, #320]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 80025a4:	2101      	movs	r1, #1
 80025a6:	438a      	bics	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7fe fe53 	bl	8001254 <HAL_GetTick>
 80025ae:	0003      	movs	r3, r0
 80025b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b4:	f7fe fe4e 	bl	8001254 <HAL_GetTick>
 80025b8:	0002      	movs	r2, r0
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e272      	b.n	8002aac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c6:	4b47      	ldr	r3, [pc, #284]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2202      	movs	r2, #2
 80025cc:	4013      	ands	r3, r2
 80025ce:	d1f1      	bne.n	80025b4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2208      	movs	r2, #8
 80025d6:	4013      	ands	r3, r2
 80025d8:	d036      	beq.n	8002648 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d019      	beq.n	8002616 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e2:	4b40      	ldr	r3, [pc, #256]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 80025e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025e6:	4b3f      	ldr	r3, [pc, #252]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 80025e8:	2101      	movs	r1, #1
 80025ea:	430a      	orrs	r2, r1
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ee:	f7fe fe31 	bl	8001254 <HAL_GetTick>
 80025f2:	0003      	movs	r3, r0
 80025f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f8:	f7fe fe2c 	bl	8001254 <HAL_GetTick>
 80025fc:	0002      	movs	r2, r0
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e250      	b.n	8002aac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260a:	4b36      	ldr	r3, [pc, #216]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	2202      	movs	r2, #2
 8002610:	4013      	ands	r3, r2
 8002612:	d0f1      	beq.n	80025f8 <HAL_RCC_OscConfig+0x24c>
 8002614:	e018      	b.n	8002648 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002616:	4b33      	ldr	r3, [pc, #204]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 8002618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800261a:	4b32      	ldr	r3, [pc, #200]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 800261c:	2101      	movs	r1, #1
 800261e:	438a      	bics	r2, r1
 8002620:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002622:	f7fe fe17 	bl	8001254 <HAL_GetTick>
 8002626:	0003      	movs	r3, r0
 8002628:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800262c:	f7fe fe12 	bl	8001254 <HAL_GetTick>
 8002630:	0002      	movs	r2, r0
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e236      	b.n	8002aac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263e:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	2202      	movs	r2, #2
 8002644:	4013      	ands	r3, r2
 8002646:	d1f1      	bne.n	800262c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2204      	movs	r2, #4
 800264e:	4013      	ands	r3, r2
 8002650:	d100      	bne.n	8002654 <HAL_RCC_OscConfig+0x2a8>
 8002652:	e0b5      	b.n	80027c0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002654:	201f      	movs	r0, #31
 8002656:	183b      	adds	r3, r7, r0
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265c:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 800265e:	69da      	ldr	r2, [r3, #28]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	055b      	lsls	r3, r3, #21
 8002664:	4013      	ands	r3, r2
 8002666:	d110      	bne.n	800268a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002668:	4b1e      	ldr	r3, [pc, #120]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 800266a:	69da      	ldr	r2, [r3, #28]
 800266c:	4b1d      	ldr	r3, [pc, #116]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 800266e:	2180      	movs	r1, #128	; 0x80
 8002670:	0549      	lsls	r1, r1, #21
 8002672:	430a      	orrs	r2, r1
 8002674:	61da      	str	r2, [r3, #28]
 8002676:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 8002678:	69da      	ldr	r2, [r3, #28]
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	055b      	lsls	r3, r3, #21
 800267e:	4013      	ands	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002684:	183b      	adds	r3, r7, r0
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268a:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <HAL_RCC_OscConfig+0x344>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	2380      	movs	r3, #128	; 0x80
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4013      	ands	r3, r2
 8002694:	d11a      	bne.n	80026cc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002696:	4b16      	ldr	r3, [pc, #88]	; (80026f0 <HAL_RCC_OscConfig+0x344>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <HAL_RCC_OscConfig+0x344>)
 800269c:	2180      	movs	r1, #128	; 0x80
 800269e:	0049      	lsls	r1, r1, #1
 80026a0:	430a      	orrs	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a4:	f7fe fdd6 	bl	8001254 <HAL_GetTick>
 80026a8:	0003      	movs	r3, r0
 80026aa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ae:	f7fe fdd1 	bl	8001254 <HAL_GetTick>
 80026b2:	0002      	movs	r2, r0
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b64      	cmp	r3, #100	; 0x64
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e1f5      	b.n	8002aac <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_OscConfig+0x344>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	4013      	ands	r3, r2
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d10f      	bne.n	80026f4 <HAL_RCC_OscConfig+0x348>
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 80026d6:	6a1a      	ldr	r2, [r3, #32]
 80026d8:	4b02      	ldr	r3, [pc, #8]	; (80026e4 <HAL_RCC_OscConfig+0x338>)
 80026da:	2101      	movs	r1, #1
 80026dc:	430a      	orrs	r2, r1
 80026de:	621a      	str	r2, [r3, #32]
 80026e0:	e036      	b.n	8002750 <HAL_RCC_OscConfig+0x3a4>
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	40021000 	.word	0x40021000
 80026e8:	fffeffff 	.word	0xfffeffff
 80026ec:	fffbffff 	.word	0xfffbffff
 80026f0:	40007000 	.word	0x40007000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10c      	bne.n	8002716 <HAL_RCC_OscConfig+0x36a>
 80026fc:	4bca      	ldr	r3, [pc, #808]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 80026fe:	6a1a      	ldr	r2, [r3, #32]
 8002700:	4bc9      	ldr	r3, [pc, #804]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002702:	2101      	movs	r1, #1
 8002704:	438a      	bics	r2, r1
 8002706:	621a      	str	r2, [r3, #32]
 8002708:	4bc7      	ldr	r3, [pc, #796]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 800270a:	6a1a      	ldr	r2, [r3, #32]
 800270c:	4bc6      	ldr	r3, [pc, #792]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 800270e:	2104      	movs	r1, #4
 8002710:	438a      	bics	r2, r1
 8002712:	621a      	str	r2, [r3, #32]
 8002714:	e01c      	b.n	8002750 <HAL_RCC_OscConfig+0x3a4>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b05      	cmp	r3, #5
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0x38c>
 800271e:	4bc2      	ldr	r3, [pc, #776]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002720:	6a1a      	ldr	r2, [r3, #32]
 8002722:	4bc1      	ldr	r3, [pc, #772]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002724:	2104      	movs	r1, #4
 8002726:	430a      	orrs	r2, r1
 8002728:	621a      	str	r2, [r3, #32]
 800272a:	4bbf      	ldr	r3, [pc, #764]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 800272c:	6a1a      	ldr	r2, [r3, #32]
 800272e:	4bbe      	ldr	r3, [pc, #760]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002730:	2101      	movs	r1, #1
 8002732:	430a      	orrs	r2, r1
 8002734:	621a      	str	r2, [r3, #32]
 8002736:	e00b      	b.n	8002750 <HAL_RCC_OscConfig+0x3a4>
 8002738:	4bbb      	ldr	r3, [pc, #748]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 800273a:	6a1a      	ldr	r2, [r3, #32]
 800273c:	4bba      	ldr	r3, [pc, #744]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 800273e:	2101      	movs	r1, #1
 8002740:	438a      	bics	r2, r1
 8002742:	621a      	str	r2, [r3, #32]
 8002744:	4bb8      	ldr	r3, [pc, #736]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002746:	6a1a      	ldr	r2, [r3, #32]
 8002748:	4bb7      	ldr	r3, [pc, #732]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 800274a:	2104      	movs	r1, #4
 800274c:	438a      	bics	r2, r1
 800274e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d014      	beq.n	8002782 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002758:	f7fe fd7c 	bl	8001254 <HAL_GetTick>
 800275c:	0003      	movs	r3, r0
 800275e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002760:	e009      	b.n	8002776 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7fe fd77 	bl	8001254 <HAL_GetTick>
 8002766:	0002      	movs	r2, r0
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	4aaf      	ldr	r2, [pc, #700]	; (8002a2c <HAL_RCC_OscConfig+0x680>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e19a      	b.n	8002aac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002776:	4bac      	ldr	r3, [pc, #688]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	2202      	movs	r2, #2
 800277c:	4013      	ands	r3, r2
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x3b6>
 8002780:	e013      	b.n	80027aa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002782:	f7fe fd67 	bl	8001254 <HAL_GetTick>
 8002786:	0003      	movs	r3, r0
 8002788:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278a:	e009      	b.n	80027a0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800278c:	f7fe fd62 	bl	8001254 <HAL_GetTick>
 8002790:	0002      	movs	r2, r0
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	4aa5      	ldr	r2, [pc, #660]	; (8002a2c <HAL_RCC_OscConfig+0x680>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e185      	b.n	8002aac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a0:	4ba1      	ldr	r3, [pc, #644]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	2202      	movs	r2, #2
 80027a6:	4013      	ands	r3, r2
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027aa:	231f      	movs	r3, #31
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d105      	bne.n	80027c0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b4:	4b9c      	ldr	r3, [pc, #624]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 80027b6:	69da      	ldr	r2, [r3, #28]
 80027b8:	4b9b      	ldr	r3, [pc, #620]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 80027ba:	499d      	ldr	r1, [pc, #628]	; (8002a30 <HAL_RCC_OscConfig+0x684>)
 80027bc:	400a      	ands	r2, r1
 80027be:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2210      	movs	r2, #16
 80027c6:	4013      	ands	r3, r2
 80027c8:	d063      	beq.n	8002892 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d12a      	bne.n	8002828 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80027d2:	4b95      	ldr	r3, [pc, #596]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 80027d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027d6:	4b94      	ldr	r3, [pc, #592]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 80027d8:	2104      	movs	r1, #4
 80027da:	430a      	orrs	r2, r1
 80027dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80027de:	4b92      	ldr	r3, [pc, #584]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 80027e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027e2:	4b91      	ldr	r3, [pc, #580]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 80027e4:	2101      	movs	r1, #1
 80027e6:	430a      	orrs	r2, r1
 80027e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ea:	f7fe fd33 	bl	8001254 <HAL_GetTick>
 80027ee:	0003      	movs	r3, r0
 80027f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80027f4:	f7fe fd2e 	bl	8001254 <HAL_GetTick>
 80027f8:	0002      	movs	r2, r0
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e152      	b.n	8002aac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002806:	4b88      	ldr	r3, [pc, #544]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280a:	2202      	movs	r2, #2
 800280c:	4013      	ands	r3, r2
 800280e:	d0f1      	beq.n	80027f4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002810:	4b85      	ldr	r3, [pc, #532]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002814:	22f8      	movs	r2, #248	; 0xf8
 8002816:	4393      	bics	r3, r2
 8002818:	0019      	movs	r1, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	00da      	lsls	r2, r3, #3
 8002820:	4b81      	ldr	r3, [pc, #516]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002822:	430a      	orrs	r2, r1
 8002824:	635a      	str	r2, [r3, #52]	; 0x34
 8002826:	e034      	b.n	8002892 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	3305      	adds	r3, #5
 800282e:	d111      	bne.n	8002854 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002830:	4b7d      	ldr	r3, [pc, #500]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002834:	4b7c      	ldr	r3, [pc, #496]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002836:	2104      	movs	r1, #4
 8002838:	438a      	bics	r2, r1
 800283a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800283c:	4b7a      	ldr	r3, [pc, #488]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 800283e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002840:	22f8      	movs	r2, #248	; 0xf8
 8002842:	4393      	bics	r3, r2
 8002844:	0019      	movs	r1, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	00da      	lsls	r2, r3, #3
 800284c:	4b76      	ldr	r3, [pc, #472]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 800284e:	430a      	orrs	r2, r1
 8002850:	635a      	str	r2, [r3, #52]	; 0x34
 8002852:	e01e      	b.n	8002892 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002854:	4b74      	ldr	r3, [pc, #464]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002858:	4b73      	ldr	r3, [pc, #460]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 800285a:	2104      	movs	r1, #4
 800285c:	430a      	orrs	r2, r1
 800285e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002860:	4b71      	ldr	r3, [pc, #452]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002864:	4b70      	ldr	r3, [pc, #448]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002866:	2101      	movs	r1, #1
 8002868:	438a      	bics	r2, r1
 800286a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286c:	f7fe fcf2 	bl	8001254 <HAL_GetTick>
 8002870:	0003      	movs	r3, r0
 8002872:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002876:	f7fe fced 	bl	8001254 <HAL_GetTick>
 800287a:	0002      	movs	r2, r0
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e111      	b.n	8002aac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002888:	4b67      	ldr	r3, [pc, #412]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 800288a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288c:	2202      	movs	r2, #2
 800288e:	4013      	ands	r3, r2
 8002890:	d1f1      	bne.n	8002876 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2220      	movs	r2, #32
 8002898:	4013      	ands	r3, r2
 800289a:	d05c      	beq.n	8002956 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800289c:	4b62      	ldr	r3, [pc, #392]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	220c      	movs	r2, #12
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b0c      	cmp	r3, #12
 80028a6:	d00e      	beq.n	80028c6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80028a8:	4b5f      	ldr	r3, [pc, #380]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	220c      	movs	r2, #12
 80028ae:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d114      	bne.n	80028de <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80028b4:	4b5c      	ldr	r3, [pc, #368]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	23c0      	movs	r3, #192	; 0xc0
 80028ba:	025b      	lsls	r3, r3, #9
 80028bc:	401a      	ands	r2, r3
 80028be:	23c0      	movs	r3, #192	; 0xc0
 80028c0:	025b      	lsls	r3, r3, #9
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d10b      	bne.n	80028de <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80028c6:	4b58      	ldr	r3, [pc, #352]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 80028c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ca:	2380      	movs	r3, #128	; 0x80
 80028cc:	025b      	lsls	r3, r3, #9
 80028ce:	4013      	ands	r3, r2
 80028d0:	d040      	beq.n	8002954 <HAL_RCC_OscConfig+0x5a8>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d03c      	beq.n	8002954 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e0e6      	b.n	8002aac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d01b      	beq.n	800291e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80028e6:	4b50      	ldr	r3, [pc, #320]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 80028e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ea:	4b4f      	ldr	r3, [pc, #316]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 80028ec:	2180      	movs	r1, #128	; 0x80
 80028ee:	0249      	lsls	r1, r1, #9
 80028f0:	430a      	orrs	r2, r1
 80028f2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe fcae 	bl	8001254 <HAL_GetTick>
 80028f8:	0003      	movs	r3, r0
 80028fa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028fe:	f7fe fca9 	bl	8001254 <HAL_GetTick>
 8002902:	0002      	movs	r2, r0
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e0cd      	b.n	8002aac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002910:	4b45      	ldr	r3, [pc, #276]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	025b      	lsls	r3, r3, #9
 8002918:	4013      	ands	r3, r2
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x552>
 800291c:	e01b      	b.n	8002956 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800291e:	4b42      	ldr	r3, [pc, #264]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002922:	4b41      	ldr	r3, [pc, #260]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002924:	4943      	ldr	r1, [pc, #268]	; (8002a34 <HAL_RCC_OscConfig+0x688>)
 8002926:	400a      	ands	r2, r1
 8002928:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292a:	f7fe fc93 	bl	8001254 <HAL_GetTick>
 800292e:	0003      	movs	r3, r0
 8002930:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002934:	f7fe fc8e 	bl	8001254 <HAL_GetTick>
 8002938:	0002      	movs	r2, r0
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e0b2      	b.n	8002aac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002946:	4b38      	ldr	r3, [pc, #224]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	025b      	lsls	r3, r3, #9
 800294e:	4013      	ands	r3, r2
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x588>
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002954:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	2b00      	cmp	r3, #0
 800295c:	d100      	bne.n	8002960 <HAL_RCC_OscConfig+0x5b4>
 800295e:	e0a4      	b.n	8002aaa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002960:	4b31      	ldr	r3, [pc, #196]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	220c      	movs	r2, #12
 8002966:	4013      	ands	r3, r2
 8002968:	2b08      	cmp	r3, #8
 800296a:	d100      	bne.n	800296e <HAL_RCC_OscConfig+0x5c2>
 800296c:	e078      	b.n	8002a60 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	2b02      	cmp	r3, #2
 8002974:	d14c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002976:	4b2c      	ldr	r3, [pc, #176]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 800297c:	492e      	ldr	r1, [pc, #184]	; (8002a38 <HAL_RCC_OscConfig+0x68c>)
 800297e:	400a      	ands	r2, r1
 8002980:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7fe fc67 	bl	8001254 <HAL_GetTick>
 8002986:	0003      	movs	r3, r0
 8002988:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800298c:	f7fe fc62 	bl	8001254 <HAL_GetTick>
 8002990:	0002      	movs	r2, r0
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e086      	b.n	8002aac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299e:	4b22      	ldr	r3, [pc, #136]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	049b      	lsls	r3, r3, #18
 80029a6:	4013      	ands	r3, r2
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029aa:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	220f      	movs	r2, #15
 80029b0:	4393      	bics	r3, r2
 80029b2:	0019      	movs	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029b8:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 80029ba:	430a      	orrs	r2, r1
 80029bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80029be:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4a1e      	ldr	r2, [pc, #120]	; (8002a3c <HAL_RCC_OscConfig+0x690>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	0019      	movs	r1, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	431a      	orrs	r2, r3
 80029d2:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 80029d4:	430a      	orrs	r2, r1
 80029d6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d8:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 80029de:	2180      	movs	r1, #128	; 0x80
 80029e0:	0449      	lsls	r1, r1, #17
 80029e2:	430a      	orrs	r2, r1
 80029e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e6:	f7fe fc35 	bl	8001254 <HAL_GetTick>
 80029ea:	0003      	movs	r3, r0
 80029ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe fc30 	bl	8001254 <HAL_GetTick>
 80029f4:	0002      	movs	r2, r0
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e054      	b.n	8002aac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	049b      	lsls	r3, r3, #18
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x644>
 8002a0e:	e04c      	b.n	8002aaa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <HAL_RCC_OscConfig+0x67c>)
 8002a16:	4908      	ldr	r1, [pc, #32]	; (8002a38 <HAL_RCC_OscConfig+0x68c>)
 8002a18:	400a      	ands	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fc1a 	bl	8001254 <HAL_GetTick>
 8002a20:	0003      	movs	r3, r0
 8002a22:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a24:	e015      	b.n	8002a52 <HAL_RCC_OscConfig+0x6a6>
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	00001388 	.word	0x00001388
 8002a30:	efffffff 	.word	0xefffffff
 8002a34:	fffeffff 	.word	0xfffeffff
 8002a38:	feffffff 	.word	0xfeffffff
 8002a3c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe fc08 	bl	8001254 <HAL_GetTick>
 8002a44:	0002      	movs	r2, r0
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e02c      	b.n	8002aac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a52:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <HAL_RCC_OscConfig+0x708>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	049b      	lsls	r3, r3, #18
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x694>
 8002a5e:	e024      	b.n	8002aaa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e01f      	b.n	8002aac <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002a6c:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <HAL_RCC_OscConfig+0x708>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <HAL_RCC_OscConfig+0x708>)
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	23c0      	movs	r3, #192	; 0xc0
 8002a7c:	025b      	lsls	r3, r3, #9
 8002a7e:	401a      	ands	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d10e      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	220f      	movs	r2, #15
 8002a8c:	401a      	ands	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	23f0      	movs	r3, #240	; 0xf0
 8002a9a:	039b      	lsls	r3, r3, #14
 8002a9c:	401a      	ands	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d001      	beq.n	8002aaa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	0018      	movs	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b008      	add	sp, #32
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40021000 	.word	0x40021000

08002ab8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0bf      	b.n	8002c4c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002acc:	4b61      	ldr	r3, [pc, #388]	; (8002c54 <HAL_RCC_ClockConfig+0x19c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d911      	bls.n	8002afe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	4b5e      	ldr	r3, [pc, #376]	; (8002c54 <HAL_RCC_ClockConfig+0x19c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	4393      	bics	r3, r2
 8002ae2:	0019      	movs	r1, r3
 8002ae4:	4b5b      	ldr	r3, [pc, #364]	; (8002c54 <HAL_RCC_ClockConfig+0x19c>)
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aec:	4b59      	ldr	r3, [pc, #356]	; (8002c54 <HAL_RCC_ClockConfig+0x19c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2201      	movs	r2, #1
 8002af2:	4013      	ands	r3, r2
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d001      	beq.n	8002afe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e0a6      	b.n	8002c4c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2202      	movs	r2, #2
 8002b04:	4013      	ands	r3, r2
 8002b06:	d015      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d006      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b12:	4b51      	ldr	r3, [pc, #324]	; (8002c58 <HAL_RCC_ClockConfig+0x1a0>)
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	4b50      	ldr	r3, [pc, #320]	; (8002c58 <HAL_RCC_ClockConfig+0x1a0>)
 8002b18:	21e0      	movs	r1, #224	; 0xe0
 8002b1a:	00c9      	lsls	r1, r1, #3
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b20:	4b4d      	ldr	r3, [pc, #308]	; (8002c58 <HAL_RCC_ClockConfig+0x1a0>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	22f0      	movs	r2, #240	; 0xf0
 8002b26:	4393      	bics	r3, r2
 8002b28:	0019      	movs	r1, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	4b4a      	ldr	r3, [pc, #296]	; (8002c58 <HAL_RCC_ClockConfig+0x1a0>)
 8002b30:	430a      	orrs	r2, r1
 8002b32:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d04c      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b46:	4b44      	ldr	r3, [pc, #272]	; (8002c58 <HAL_RCC_ClockConfig+0x1a0>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	029b      	lsls	r3, r3, #10
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d120      	bne.n	8002b94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e07a      	b.n	8002c4c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d107      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5e:	4b3e      	ldr	r3, [pc, #248]	; (8002c58 <HAL_RCC_ClockConfig+0x1a0>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	2380      	movs	r3, #128	; 0x80
 8002b64:	049b      	lsls	r3, r3, #18
 8002b66:	4013      	ands	r3, r2
 8002b68:	d114      	bne.n	8002b94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e06e      	b.n	8002c4c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d107      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b76:	4b38      	ldr	r3, [pc, #224]	; (8002c58 <HAL_RCC_ClockConfig+0x1a0>)
 8002b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b7a:	2380      	movs	r3, #128	; 0x80
 8002b7c:	025b      	lsls	r3, r3, #9
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d108      	bne.n	8002b94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e062      	b.n	8002c4c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b86:	4b34      	ldr	r3, [pc, #208]	; (8002c58 <HAL_RCC_ClockConfig+0x1a0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d101      	bne.n	8002b94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e05b      	b.n	8002c4c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b94:	4b30      	ldr	r3, [pc, #192]	; (8002c58 <HAL_RCC_ClockConfig+0x1a0>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2203      	movs	r2, #3
 8002b9a:	4393      	bics	r3, r2
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	4b2d      	ldr	r3, [pc, #180]	; (8002c58 <HAL_RCC_ClockConfig+0x1a0>)
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba8:	f7fe fb54 	bl	8001254 <HAL_GetTick>
 8002bac:	0003      	movs	r3, r0
 8002bae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb0:	e009      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb2:	f7fe fb4f 	bl	8001254 <HAL_GetTick>
 8002bb6:	0002      	movs	r2, r0
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	4a27      	ldr	r2, [pc, #156]	; (8002c5c <HAL_RCC_ClockConfig+0x1a4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e042      	b.n	8002c4c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <HAL_RCC_ClockConfig+0x1a0>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	220c      	movs	r2, #12
 8002bcc:	401a      	ands	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d1ec      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b1e      	ldr	r3, [pc, #120]	; (8002c54 <HAL_RCC_ClockConfig+0x19c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	4013      	ands	r3, r2
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d211      	bcs.n	8002c0a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <HAL_RCC_ClockConfig+0x19c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2201      	movs	r2, #1
 8002bec:	4393      	bics	r3, r2
 8002bee:	0019      	movs	r1, r3
 8002bf0:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <HAL_RCC_ClockConfig+0x19c>)
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf8:	4b16      	ldr	r3, [pc, #88]	; (8002c54 <HAL_RCC_ClockConfig+0x19c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	4013      	ands	r3, r2
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d001      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e020      	b.n	8002c4c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2204      	movs	r2, #4
 8002c10:	4013      	ands	r3, r2
 8002c12:	d009      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <HAL_RCC_ClockConfig+0x1a0>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4a11      	ldr	r2, [pc, #68]	; (8002c60 <HAL_RCC_ClockConfig+0x1a8>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	0019      	movs	r1, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <HAL_RCC_ClockConfig+0x1a0>)
 8002c24:	430a      	orrs	r2, r1
 8002c26:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c28:	f000 f820 	bl	8002c6c <HAL_RCC_GetSysClockFreq>
 8002c2c:	0001      	movs	r1, r0
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <HAL_RCC_ClockConfig+0x1a0>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	091b      	lsrs	r3, r3, #4
 8002c34:	220f      	movs	r2, #15
 8002c36:	4013      	ands	r3, r2
 8002c38:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <HAL_RCC_ClockConfig+0x1ac>)
 8002c3a:	5cd3      	ldrb	r3, [r2, r3]
 8002c3c:	000a      	movs	r2, r1
 8002c3e:	40da      	lsrs	r2, r3
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_RCC_ClockConfig+0x1b0>)
 8002c42:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c44:	2003      	movs	r0, #3
 8002c46:	f7fe fabf 	bl	80011c8 <HAL_InitTick>
  
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b004      	add	sp, #16
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40022000 	.word	0x40022000
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	00001388 	.word	0x00001388
 8002c60:	fffff8ff 	.word	0xfffff8ff
 8002c64:	080060d0 	.word	0x080060d0
 8002c68:	20000000 	.word	0x20000000

08002c6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c6c:	b590      	push	{r4, r7, lr}
 8002c6e:	b08f      	sub	sp, #60	; 0x3c
 8002c70:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002c72:	2314      	movs	r3, #20
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	4a38      	ldr	r2, [pc, #224]	; (8002d58 <HAL_RCC_GetSysClockFreq+0xec>)
 8002c78:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c7a:	c313      	stmia	r3!, {r0, r1, r4}
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002c80:	1d3b      	adds	r3, r7, #4
 8002c82:	4a36      	ldr	r2, [pc, #216]	; (8002d5c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002c84:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c86:	c313      	stmia	r3!, {r0, r1, r4}
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c90:	2300      	movs	r3, #0
 8002c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c94:	2300      	movs	r3, #0
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
 8002c98:	2300      	movs	r3, #0
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002ca0:	4b2f      	ldr	r3, [pc, #188]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca8:	220c      	movs	r2, #12
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b0c      	cmp	r3, #12
 8002cae:	d047      	beq.n	8002d40 <HAL_RCC_GetSysClockFreq+0xd4>
 8002cb0:	d849      	bhi.n	8002d46 <HAL_RCC_GetSysClockFreq+0xda>
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d002      	beq.n	8002cbc <HAL_RCC_GetSysClockFreq+0x50>
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x56>
 8002cba:	e044      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cbc:	4b29      	ldr	r3, [pc, #164]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cbe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cc0:	e044      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc4:	0c9b      	lsrs	r3, r3, #18
 8002cc6:	220f      	movs	r2, #15
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2214      	movs	r2, #20
 8002ccc:	18ba      	adds	r2, r7, r2
 8002cce:	5cd3      	ldrb	r3, [r2, r3]
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002cd2:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	220f      	movs	r2, #15
 8002cd8:	4013      	ands	r3, r2
 8002cda:	1d3a      	adds	r2, r7, #4
 8002cdc:	5cd3      	ldrb	r3, [r2, r3]
 8002cde:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ce2:	23c0      	movs	r3, #192	; 0xc0
 8002ce4:	025b      	lsls	r3, r3, #9
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	2380      	movs	r3, #128	; 0x80
 8002cea:	025b      	lsls	r3, r3, #9
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d109      	bne.n	8002d04 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cf2:	481c      	ldr	r0, [pc, #112]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cf4:	f7fd fa12 	bl	800011c <__udivsi3>
 8002cf8:	0003      	movs	r3, r0
 8002cfa:	001a      	movs	r2, r3
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	4353      	muls	r3, r2
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
 8002d02:	e01a      	b.n	8002d3a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d06:	23c0      	movs	r3, #192	; 0xc0
 8002d08:	025b      	lsls	r3, r3, #9
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	23c0      	movs	r3, #192	; 0xc0
 8002d0e:	025b      	lsls	r3, r3, #9
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d109      	bne.n	8002d28 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d16:	4814      	ldr	r0, [pc, #80]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d18:	f7fd fa00 	bl	800011c <__udivsi3>
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	001a      	movs	r2, r3
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	4353      	muls	r3, r2
 8002d24:	637b      	str	r3, [r7, #52]	; 0x34
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d2a:	480e      	ldr	r0, [pc, #56]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d2c:	f7fd f9f6 	bl	800011c <__udivsi3>
 8002d30:	0003      	movs	r3, r0
 8002d32:	001a      	movs	r2, r3
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	4353      	muls	r3, r2
 8002d38:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d3e:	e005      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002d40:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d44:	e002      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d4a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002d4e:	0018      	movs	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b00f      	add	sp, #60	; 0x3c
 8002d54:	bd90      	pop	{r4, r7, pc}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	080060b0 	.word	0x080060b0
 8002d5c:	080060c0 	.word	0x080060c0
 8002d60:	40021000 	.word	0x40021000
 8002d64:	007a1200 	.word	0x007a1200
 8002d68:	02dc6c00 	.word	0x02dc6c00

08002d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d70:	4b02      	ldr	r3, [pc, #8]	; (8002d7c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d72:	681b      	ldr	r3, [r3, #0]
}
 8002d74:	0018      	movs	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	20000000 	.word	0x20000000

08002d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002d84:	f7ff fff2 	bl	8002d6c <HAL_RCC_GetHCLKFreq>
 8002d88:	0001      	movs	r1, r0
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	2207      	movs	r2, #7
 8002d92:	4013      	ands	r3, r2
 8002d94:	4a04      	ldr	r2, [pc, #16]	; (8002da8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d96:	5cd3      	ldrb	r3, [r2, r3]
 8002d98:	40d9      	lsrs	r1, r3
 8002d9a:	000b      	movs	r3, r1
}    
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	40021000 	.word	0x40021000
 8002da8:	080060e0 	.word	0x080060e0

08002dac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	2380      	movs	r3, #128	; 0x80
 8002dc2:	025b      	lsls	r3, r3, #9
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d100      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002dc8:	e08e      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002dca:	2017      	movs	r0, #23
 8002dcc:	183b      	adds	r3, r7, r0
 8002dce:	2200      	movs	r2, #0
 8002dd0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dd2:	4b67      	ldr	r3, [pc, #412]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dd4:	69da      	ldr	r2, [r3, #28]
 8002dd6:	2380      	movs	r3, #128	; 0x80
 8002dd8:	055b      	lsls	r3, r3, #21
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d110      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dde:	4b64      	ldr	r3, [pc, #400]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002de0:	69da      	ldr	r2, [r3, #28]
 8002de2:	4b63      	ldr	r3, [pc, #396]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002de4:	2180      	movs	r1, #128	; 0x80
 8002de6:	0549      	lsls	r1, r1, #21
 8002de8:	430a      	orrs	r2, r1
 8002dea:	61da      	str	r2, [r3, #28]
 8002dec:	4b60      	ldr	r3, [pc, #384]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dee:	69da      	ldr	r2, [r3, #28]
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	055b      	lsls	r3, r3, #21
 8002df4:	4013      	ands	r3, r2
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dfa:	183b      	adds	r3, r7, r0
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e00:	4b5c      	ldr	r3, [pc, #368]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d11a      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e0c:	4b59      	ldr	r3, [pc, #356]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4b58      	ldr	r3, [pc, #352]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e12:	2180      	movs	r1, #128	; 0x80
 8002e14:	0049      	lsls	r1, r1, #1
 8002e16:	430a      	orrs	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e1a:	f7fe fa1b 	bl	8001254 <HAL_GetTick>
 8002e1e:	0003      	movs	r3, r0
 8002e20:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e22:	e008      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e24:	f7fe fa16 	bl	8001254 <HAL_GetTick>
 8002e28:	0002      	movs	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	; 0x64
 8002e30:	d901      	bls.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e097      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e36:	4b4f      	ldr	r3, [pc, #316]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	2380      	movs	r3, #128	; 0x80
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e42:	4b4b      	ldr	r3, [pc, #300]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e44:	6a1a      	ldr	r2, [r3, #32]
 8002e46:	23c0      	movs	r3, #192	; 0xc0
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d034      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	23c0      	movs	r3, #192	; 0xc0
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d02c      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e64:	4b42      	ldr	r3, [pc, #264]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	4a43      	ldr	r2, [pc, #268]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e6e:	4b40      	ldr	r3, [pc, #256]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e70:	6a1a      	ldr	r2, [r3, #32]
 8002e72:	4b3f      	ldr	r3, [pc, #252]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e74:	2180      	movs	r1, #128	; 0x80
 8002e76:	0249      	lsls	r1, r1, #9
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e7c:	4b3c      	ldr	r3, [pc, #240]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e7e:	6a1a      	ldr	r2, [r3, #32]
 8002e80:	4b3b      	ldr	r3, [pc, #236]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e82:	493e      	ldr	r1, [pc, #248]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e84:	400a      	ands	r2, r1
 8002e86:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e88:	4b39      	ldr	r3, [pc, #228]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	4013      	ands	r3, r2
 8002e94:	d013      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e96:	f7fe f9dd 	bl	8001254 <HAL_GetTick>
 8002e9a:	0003      	movs	r3, r0
 8002e9c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9e:	e009      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea0:	f7fe f9d8 	bl	8001254 <HAL_GetTick>
 8002ea4:	0002      	movs	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	4a35      	ldr	r2, [pc, #212]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e058      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb4:	4b2e      	ldr	r3, [pc, #184]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ebe:	4b2c      	ldr	r3, [pc, #176]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4a2d      	ldr	r2, [pc, #180]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	4b28      	ldr	r3, [pc, #160]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ed2:	2317      	movs	r3, #23
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d105      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002edc:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ede:	69da      	ldr	r2, [r3, #28]
 8002ee0:	4b23      	ldr	r3, [pc, #140]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ee2:	4928      	ldr	r1, [pc, #160]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ee4:	400a      	ands	r2, r1
 8002ee6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2201      	movs	r2, #1
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d009      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ef2:	4b1f      	ldr	r3, [pc, #124]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	4393      	bics	r3, r2
 8002efa:	0019      	movs	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f02:	430a      	orrs	r2, r1
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d009      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f10:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	2210      	movs	r2, #16
 8002f16:	4393      	bics	r3, r2
 8002f18:	0019      	movs	r1, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f20:	430a      	orrs	r2, r1
 8002f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	2380      	movs	r3, #128	; 0x80
 8002f2a:	029b      	lsls	r3, r3, #10
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d009      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	2280      	movs	r2, #128	; 0x80
 8002f36:	4393      	bics	r3, r2
 8002f38:	0019      	movs	r1, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f40:	430a      	orrs	r2, r1
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d009      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f50:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	2240      	movs	r2, #64	; 0x40
 8002f56:	4393      	bics	r3, r2
 8002f58:	0019      	movs	r1, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691a      	ldr	r2, [r3, #16]
 8002f5e:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f60:	430a      	orrs	r2, r1
 8002f62:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	0018      	movs	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b006      	add	sp, #24
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40007000 	.word	0x40007000
 8002f78:	fffffcff 	.word	0xfffffcff
 8002f7c:	fffeffff 	.word	0xfffeffff
 8002f80:	00001388 	.word	0x00001388
 8002f84:	efffffff 	.word	0xefffffff

08002f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e042      	b.n	8003020 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	223d      	movs	r2, #61	; 0x3d
 8002f9e:	5c9b      	ldrb	r3, [r3, r2]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d107      	bne.n	8002fb6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	223c      	movs	r2, #60	; 0x3c
 8002faa:	2100      	movs	r1, #0
 8002fac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7fd ff1d 	bl	8000df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	223d      	movs	r2, #61	; 0x3d
 8002fba:	2102      	movs	r1, #2
 8002fbc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	0010      	movs	r0, r2
 8002fca:	f000 fa83 	bl	80034d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2246      	movs	r2, #70	; 0x46
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	223e      	movs	r2, #62	; 0x3e
 8002fda:	2101      	movs	r1, #1
 8002fdc:	5499      	strb	r1, [r3, r2]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	223f      	movs	r2, #63	; 0x3f
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	5499      	strb	r1, [r3, r2]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2240      	movs	r2, #64	; 0x40
 8002fea:	2101      	movs	r1, #1
 8002fec:	5499      	strb	r1, [r3, r2]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2241      	movs	r2, #65	; 0x41
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2242      	movs	r2, #66	; 0x42
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	5499      	strb	r1, [r3, r2]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2243      	movs	r2, #67	; 0x43
 8003002:	2101      	movs	r1, #1
 8003004:	5499      	strb	r1, [r3, r2]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2244      	movs	r2, #68	; 0x44
 800300a:	2101      	movs	r1, #1
 800300c:	5499      	strb	r1, [r3, r2]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2245      	movs	r2, #69	; 0x45
 8003012:	2101      	movs	r1, #1
 8003014:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	223d      	movs	r2, #61	; 0x3d
 800301a:	2101      	movs	r1, #1
 800301c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	0018      	movs	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	b002      	add	sp, #8
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	223d      	movs	r2, #61	; 0x3d
 8003034:	5c9b      	ldrb	r3, [r3, r2]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b01      	cmp	r3, #1
 800303a:	d001      	beq.n	8003040 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e036      	b.n	80030ae <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	223d      	movs	r2, #61	; 0x3d
 8003044:	2102      	movs	r1, #2
 8003046:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2101      	movs	r1, #1
 8003054:	430a      	orrs	r2, r1
 8003056:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a16      	ldr	r2, [pc, #88]	; (80030b8 <HAL_TIM_Base_Start_IT+0x90>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00a      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x50>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	05db      	lsls	r3, r3, #23
 800306a:	429a      	cmp	r2, r3
 800306c:	d004      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x50>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a12      	ldr	r2, [pc, #72]	; (80030bc <HAL_TIM_Base_Start_IT+0x94>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d111      	bne.n	800309c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2207      	movs	r2, #7
 8003080:	4013      	ands	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b06      	cmp	r3, #6
 8003088:	d010      	beq.n	80030ac <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2101      	movs	r1, #1
 8003096:	430a      	orrs	r2, r1
 8003098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309a:	e007      	b.n	80030ac <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2101      	movs	r1, #1
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	0018      	movs	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b004      	add	sp, #16
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40000400 	.word	0x40000400

080030c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2202      	movs	r2, #2
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d124      	bne.n	8003120 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	2202      	movs	r2, #2
 80030de:	4013      	ands	r3, r2
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d11d      	bne.n	8003120 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2203      	movs	r2, #3
 80030ea:	4252      	negs	r2, r2
 80030ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	2203      	movs	r2, #3
 80030fc:	4013      	ands	r3, r2
 80030fe:	d004      	beq.n	800310a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	0018      	movs	r0, r3
 8003104:	f000 f9ce 	bl	80034a4 <HAL_TIM_IC_CaptureCallback>
 8003108:	e007      	b.n	800311a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	0018      	movs	r0, r3
 800310e:	f000 f9c1 	bl	8003494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	0018      	movs	r0, r3
 8003116:	f000 f9cd 	bl	80034b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	2204      	movs	r2, #4
 8003128:	4013      	ands	r3, r2
 800312a:	2b04      	cmp	r3, #4
 800312c:	d125      	bne.n	800317a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	2204      	movs	r2, #4
 8003136:	4013      	ands	r3, r2
 8003138:	2b04      	cmp	r3, #4
 800313a:	d11e      	bne.n	800317a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2205      	movs	r2, #5
 8003142:	4252      	negs	r2, r2
 8003144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2202      	movs	r2, #2
 800314a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699a      	ldr	r2, [r3, #24]
 8003152:	23c0      	movs	r3, #192	; 0xc0
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4013      	ands	r3, r2
 8003158:	d004      	beq.n	8003164 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	0018      	movs	r0, r3
 800315e:	f000 f9a1 	bl	80034a4 <HAL_TIM_IC_CaptureCallback>
 8003162:	e007      	b.n	8003174 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	0018      	movs	r0, r3
 8003168:	f000 f994 	bl	8003494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	0018      	movs	r0, r3
 8003170:	f000 f9a0 	bl	80034b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	2208      	movs	r2, #8
 8003182:	4013      	ands	r3, r2
 8003184:	2b08      	cmp	r3, #8
 8003186:	d124      	bne.n	80031d2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	2208      	movs	r2, #8
 8003190:	4013      	ands	r3, r2
 8003192:	2b08      	cmp	r3, #8
 8003194:	d11d      	bne.n	80031d2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2209      	movs	r2, #9
 800319c:	4252      	negs	r2, r2
 800319e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2204      	movs	r2, #4
 80031a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	2203      	movs	r2, #3
 80031ae:	4013      	ands	r3, r2
 80031b0:	d004      	beq.n	80031bc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	0018      	movs	r0, r3
 80031b6:	f000 f975 	bl	80034a4 <HAL_TIM_IC_CaptureCallback>
 80031ba:	e007      	b.n	80031cc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	0018      	movs	r0, r3
 80031c0:	f000 f968 	bl	8003494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	0018      	movs	r0, r3
 80031c8:	f000 f974 	bl	80034b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	2210      	movs	r2, #16
 80031da:	4013      	ands	r3, r2
 80031dc:	2b10      	cmp	r3, #16
 80031de:	d125      	bne.n	800322c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2210      	movs	r2, #16
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b10      	cmp	r3, #16
 80031ec:	d11e      	bne.n	800322c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2211      	movs	r2, #17
 80031f4:	4252      	negs	r2, r2
 80031f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2208      	movs	r2, #8
 80031fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	23c0      	movs	r3, #192	; 0xc0
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4013      	ands	r3, r2
 800320a:	d004      	beq.n	8003216 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	0018      	movs	r0, r3
 8003210:	f000 f948 	bl	80034a4 <HAL_TIM_IC_CaptureCallback>
 8003214:	e007      	b.n	8003226 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	0018      	movs	r0, r3
 800321a:	f000 f93b 	bl	8003494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	0018      	movs	r0, r3
 8003222:	f000 f947 	bl	80034b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2201      	movs	r2, #1
 8003234:	4013      	ands	r3, r2
 8003236:	2b01      	cmp	r3, #1
 8003238:	d10f      	bne.n	800325a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	4013      	ands	r3, r2
 8003244:	2b01      	cmp	r3, #1
 8003246:	d108      	bne.n	800325a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2202      	movs	r2, #2
 800324e:	4252      	negs	r2, r2
 8003250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	0018      	movs	r0, r3
 8003256:	f7fd fcd5 	bl	8000c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	2280      	movs	r2, #128	; 0x80
 8003262:	4013      	ands	r3, r2
 8003264:	2b80      	cmp	r3, #128	; 0x80
 8003266:	d10f      	bne.n	8003288 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2280      	movs	r2, #128	; 0x80
 8003270:	4013      	ands	r3, r2
 8003272:	2b80      	cmp	r3, #128	; 0x80
 8003274:	d108      	bne.n	8003288 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2281      	movs	r2, #129	; 0x81
 800327c:	4252      	negs	r2, r2
 800327e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	0018      	movs	r0, r3
 8003284:	f000 fa96 	bl	80037b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2240      	movs	r2, #64	; 0x40
 8003290:	4013      	ands	r3, r2
 8003292:	2b40      	cmp	r3, #64	; 0x40
 8003294:	d10f      	bne.n	80032b6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2240      	movs	r2, #64	; 0x40
 800329e:	4013      	ands	r3, r2
 80032a0:	2b40      	cmp	r3, #64	; 0x40
 80032a2:	d108      	bne.n	80032b6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2241      	movs	r2, #65	; 0x41
 80032aa:	4252      	negs	r2, r2
 80032ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	0018      	movs	r0, r3
 80032b2:	f000 f907 	bl	80034c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	2220      	movs	r2, #32
 80032be:	4013      	ands	r3, r2
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	d10f      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	d108      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2221      	movs	r2, #33	; 0x21
 80032d8:	4252      	negs	r2, r2
 80032da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	0018      	movs	r0, r3
 80032e0:	f000 fa60 	bl	80037a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032e4:	46c0      	nop			; (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b002      	add	sp, #8
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032f6:	230f      	movs	r3, #15
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	2200      	movs	r2, #0
 80032fc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	223c      	movs	r2, #60	; 0x3c
 8003302:	5c9b      	ldrb	r3, [r3, r2]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_TIM_ConfigClockSource+0x20>
 8003308:	2302      	movs	r3, #2
 800330a:	e0bc      	b.n	8003486 <HAL_TIM_ConfigClockSource+0x19a>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	223c      	movs	r2, #60	; 0x3c
 8003310:	2101      	movs	r1, #1
 8003312:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	223d      	movs	r2, #61	; 0x3d
 8003318:	2102      	movs	r1, #2
 800331a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2277      	movs	r2, #119	; 0x77
 8003328:	4393      	bics	r3, r2
 800332a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	4a58      	ldr	r2, [pc, #352]	; (8003490 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003330:	4013      	ands	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2280      	movs	r2, #128	; 0x80
 8003342:	0192      	lsls	r2, r2, #6
 8003344:	4293      	cmp	r3, r2
 8003346:	d040      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0xde>
 8003348:	2280      	movs	r2, #128	; 0x80
 800334a:	0192      	lsls	r2, r2, #6
 800334c:	4293      	cmp	r3, r2
 800334e:	d900      	bls.n	8003352 <HAL_TIM_ConfigClockSource+0x66>
 8003350:	e088      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x178>
 8003352:	2280      	movs	r2, #128	; 0x80
 8003354:	0152      	lsls	r2, r2, #5
 8003356:	4293      	cmp	r3, r2
 8003358:	d100      	bne.n	800335c <HAL_TIM_ConfigClockSource+0x70>
 800335a:	e088      	b.n	800346e <HAL_TIM_ConfigClockSource+0x182>
 800335c:	2280      	movs	r2, #128	; 0x80
 800335e:	0152      	lsls	r2, r2, #5
 8003360:	4293      	cmp	r3, r2
 8003362:	d900      	bls.n	8003366 <HAL_TIM_ConfigClockSource+0x7a>
 8003364:	e07e      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x178>
 8003366:	2b70      	cmp	r3, #112	; 0x70
 8003368:	d018      	beq.n	800339c <HAL_TIM_ConfigClockSource+0xb0>
 800336a:	d900      	bls.n	800336e <HAL_TIM_ConfigClockSource+0x82>
 800336c:	e07a      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x178>
 800336e:	2b60      	cmp	r3, #96	; 0x60
 8003370:	d04f      	beq.n	8003412 <HAL_TIM_ConfigClockSource+0x126>
 8003372:	d900      	bls.n	8003376 <HAL_TIM_ConfigClockSource+0x8a>
 8003374:	e076      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x178>
 8003376:	2b50      	cmp	r3, #80	; 0x50
 8003378:	d03b      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0x106>
 800337a:	d900      	bls.n	800337e <HAL_TIM_ConfigClockSource+0x92>
 800337c:	e072      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x178>
 800337e:	2b40      	cmp	r3, #64	; 0x40
 8003380:	d057      	beq.n	8003432 <HAL_TIM_ConfigClockSource+0x146>
 8003382:	d900      	bls.n	8003386 <HAL_TIM_ConfigClockSource+0x9a>
 8003384:	e06e      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x178>
 8003386:	2b30      	cmp	r3, #48	; 0x30
 8003388:	d063      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x166>
 800338a:	d86b      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x178>
 800338c:	2b20      	cmp	r3, #32
 800338e:	d060      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x166>
 8003390:	d868      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x178>
 8003392:	2b00      	cmp	r3, #0
 8003394:	d05d      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x166>
 8003396:	2b10      	cmp	r3, #16
 8003398:	d05b      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x166>
 800339a:	e063      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	6899      	ldr	r1, [r3, #8]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f000 f982 	bl	80036b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2277      	movs	r2, #119	; 0x77
 80033bc:	4313      	orrs	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	609a      	str	r2, [r3, #8]
      break;
 80033c8:	e052      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6899      	ldr	r1, [r3, #8]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f000 f96b 	bl	80036b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2180      	movs	r1, #128	; 0x80
 80033ea:	01c9      	lsls	r1, r1, #7
 80033ec:	430a      	orrs	r2, r1
 80033ee:	609a      	str	r2, [r3, #8]
      break;
 80033f0:	e03e      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6859      	ldr	r1, [r3, #4]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	001a      	movs	r2, r3
 8003400:	f000 f8de 	bl	80035c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2150      	movs	r1, #80	; 0x50
 800340a:	0018      	movs	r0, r3
 800340c:	f000 f938 	bl	8003680 <TIM_ITRx_SetConfig>
      break;
 8003410:	e02e      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	6859      	ldr	r1, [r3, #4]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	001a      	movs	r2, r3
 8003420:	f000 f8fc 	bl	800361c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2160      	movs	r1, #96	; 0x60
 800342a:	0018      	movs	r0, r3
 800342c:	f000 f928 	bl	8003680 <TIM_ITRx_SetConfig>
      break;
 8003430:	e01e      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	6859      	ldr	r1, [r3, #4]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	001a      	movs	r2, r3
 8003440:	f000 f8be 	bl	80035c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2140      	movs	r1, #64	; 0x40
 800344a:	0018      	movs	r0, r3
 800344c:	f000 f918 	bl	8003680 <TIM_ITRx_SetConfig>
      break;
 8003450:	e00e      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	0019      	movs	r1, r3
 800345c:	0010      	movs	r0, r2
 800345e:	f000 f90f 	bl	8003680 <TIM_ITRx_SetConfig>
      break;
 8003462:	e005      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003464:	230f      	movs	r3, #15
 8003466:	18fb      	adds	r3, r7, r3
 8003468:	2201      	movs	r2, #1
 800346a:	701a      	strb	r2, [r3, #0]
      break;
 800346c:	e000      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800346e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	223d      	movs	r2, #61	; 0x3d
 8003474:	2101      	movs	r1, #1
 8003476:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	223c      	movs	r2, #60	; 0x3c
 800347c:	2100      	movs	r1, #0
 800347e:	5499      	strb	r1, [r3, r2]

  return status;
 8003480:	230f      	movs	r3, #15
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	781b      	ldrb	r3, [r3, #0]
}
 8003486:	0018      	movs	r0, r3
 8003488:	46bd      	mov	sp, r7
 800348a:	b004      	add	sp, #16
 800348c:	bd80      	pop	{r7, pc}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	ffff00ff 	.word	0xffff00ff

08003494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800349c:	46c0      	nop			; (mov r8, r8)
 800349e:	46bd      	mov	sp, r7
 80034a0:	b002      	add	sp, #8
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b002      	add	sp, #8
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b002      	add	sp, #8
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b002      	add	sp, #8
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a30      	ldr	r2, [pc, #192]	; (80035a8 <TIM_Base_SetConfig+0xd4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d008      	beq.n	80034fe <TIM_Base_SetConfig+0x2a>
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	05db      	lsls	r3, r3, #23
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d003      	beq.n	80034fe <TIM_Base_SetConfig+0x2a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a2c      	ldr	r2, [pc, #176]	; (80035ac <TIM_Base_SetConfig+0xd8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d108      	bne.n	8003510 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2270      	movs	r2, #112	; 0x70
 8003502:	4393      	bics	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4313      	orrs	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a25      	ldr	r2, [pc, #148]	; (80035a8 <TIM_Base_SetConfig+0xd4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d014      	beq.n	8003542 <TIM_Base_SetConfig+0x6e>
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	2380      	movs	r3, #128	; 0x80
 800351c:	05db      	lsls	r3, r3, #23
 800351e:	429a      	cmp	r2, r3
 8003520:	d00f      	beq.n	8003542 <TIM_Base_SetConfig+0x6e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a21      	ldr	r2, [pc, #132]	; (80035ac <TIM_Base_SetConfig+0xd8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00b      	beq.n	8003542 <TIM_Base_SetConfig+0x6e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a20      	ldr	r2, [pc, #128]	; (80035b0 <TIM_Base_SetConfig+0xdc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d007      	beq.n	8003542 <TIM_Base_SetConfig+0x6e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a1f      	ldr	r2, [pc, #124]	; (80035b4 <TIM_Base_SetConfig+0xe0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d003      	beq.n	8003542 <TIM_Base_SetConfig+0x6e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a1e      	ldr	r2, [pc, #120]	; (80035b8 <TIM_Base_SetConfig+0xe4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d108      	bne.n	8003554 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4a1d      	ldr	r2, [pc, #116]	; (80035bc <TIM_Base_SetConfig+0xe8>)
 8003546:	4013      	ands	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4313      	orrs	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2280      	movs	r2, #128	; 0x80
 8003558:	4393      	bics	r3, r2
 800355a:	001a      	movs	r2, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <TIM_Base_SetConfig+0xd4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d007      	beq.n	8003592 <TIM_Base_SetConfig+0xbe>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a0b      	ldr	r2, [pc, #44]	; (80035b4 <TIM_Base_SetConfig+0xe0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d003      	beq.n	8003592 <TIM_Base_SetConfig+0xbe>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <TIM_Base_SetConfig+0xe4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d103      	bne.n	800359a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	615a      	str	r2, [r3, #20]
}
 80035a0:	46c0      	nop			; (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b004      	add	sp, #16
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40012c00 	.word	0x40012c00
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40002000 	.word	0x40002000
 80035b4:	40014400 	.word	0x40014400
 80035b8:	40014800 	.word	0x40014800
 80035bc:	fffffcff 	.word	0xfffffcff

080035c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	2201      	movs	r2, #1
 80035d8:	4393      	bics	r3, r2
 80035da:	001a      	movs	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	22f0      	movs	r2, #240	; 0xf0
 80035ea:	4393      	bics	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	220a      	movs	r2, #10
 80035fc:	4393      	bics	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	621a      	str	r2, [r3, #32]
}
 8003614:	46c0      	nop			; (mov r8, r8)
 8003616:	46bd      	mov	sp, r7
 8003618:	b006      	add	sp, #24
 800361a:	bd80      	pop	{r7, pc}

0800361c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	2210      	movs	r2, #16
 800362e:	4393      	bics	r3, r2
 8003630:	001a      	movs	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	4a0d      	ldr	r2, [pc, #52]	; (800367c <TIM_TI2_ConfigInputStage+0x60>)
 8003646:	4013      	ands	r3, r2
 8003648:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	031b      	lsls	r3, r3, #12
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	22a0      	movs	r2, #160	; 0xa0
 8003658:	4393      	bics	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	621a      	str	r2, [r3, #32]
}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	46bd      	mov	sp, r7
 8003676:	b006      	add	sp, #24
 8003678:	bd80      	pop	{r7, pc}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	ffff0fff 	.word	0xffff0fff

08003680 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2270      	movs	r2, #112	; 0x70
 8003694:	4393      	bics	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	2207      	movs	r2, #7
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	609a      	str	r2, [r3, #8]
}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b004      	add	sp, #16
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <TIM_ETR_SetConfig+0x3c>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	021a      	lsls	r2, r3, #8
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4313      	orrs	r3, r2
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	4313      	orrs	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	609a      	str	r2, [r3, #8]
}
 80036e8:	46c0      	nop			; (mov r8, r8)
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b006      	add	sp, #24
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	ffff00ff 	.word	0xffff00ff

080036f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	223c      	movs	r2, #60	; 0x3c
 8003702:	5c9b      	ldrb	r3, [r3, r2]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003708:	2302      	movs	r3, #2
 800370a:	e042      	b.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	223c      	movs	r2, #60	; 0x3c
 8003710:	2101      	movs	r1, #1
 8003712:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	223d      	movs	r2, #61	; 0x3d
 8003718:	2102      	movs	r1, #2
 800371a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2270      	movs	r2, #112	; 0x70
 8003730:	4393      	bics	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a14      	ldr	r2, [pc, #80]	; (800379c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00a      	beq.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	2380      	movs	r3, #128	; 0x80
 8003756:	05db      	lsls	r3, r3, #23
 8003758:	429a      	cmp	r2, r3
 800375a:	d004      	beq.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0f      	ldr	r2, [pc, #60]	; (80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d10c      	bne.n	8003780 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2280      	movs	r2, #128	; 0x80
 800376a:	4393      	bics	r3, r2
 800376c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	4313      	orrs	r3, r2
 8003776:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	223d      	movs	r2, #61	; 0x3d
 8003784:	2101      	movs	r1, #1
 8003786:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	223c      	movs	r2, #60	; 0x3c
 800378c:	2100      	movs	r1, #0
 800378e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	0018      	movs	r0, r3
 8003794:	46bd      	mov	sp, r7
 8003796:	b004      	add	sp, #16
 8003798:	bd80      	pop	{r7, pc}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	40012c00 	.word	0x40012c00
 80037a0:	40000400 	.word	0x40000400

080037a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037ac:	46c0      	nop			; (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b002      	add	sp, #8
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b002      	add	sp, #8
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e044      	b.n	8003860 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d107      	bne.n	80037ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2274      	movs	r2, #116	; 0x74
 80037e2:	2100      	movs	r1, #0
 80037e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7fd fb29 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2224      	movs	r2, #36	; 0x24
 80037f2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2101      	movs	r1, #1
 8003800:	438a      	bics	r2, r1
 8003802:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	0018      	movs	r0, r3
 8003808:	f000 fcb0 	bl	800416c <UART_SetConfig>
 800380c:	0003      	movs	r3, r0
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e024      	b.n	8003860 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	0018      	movs	r0, r3
 8003822:	f000 fde3 	bl	80043ec <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	490d      	ldr	r1, [pc, #52]	; (8003868 <HAL_UART_Init+0xa4>)
 8003832:	400a      	ands	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	212a      	movs	r1, #42	; 0x2a
 8003842:	438a      	bics	r2, r1
 8003844:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2101      	movs	r1, #1
 8003852:	430a      	orrs	r2, r1
 8003854:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	0018      	movs	r0, r3
 800385a:	f000 fe7b 	bl	8004554 <UART_CheckIdleState>
 800385e:	0003      	movs	r3, r0
}
 8003860:	0018      	movs	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	b002      	add	sp, #8
 8003866:	bd80      	pop	{r7, pc}
 8003868:	ffffb7ff 	.word	0xffffb7ff

0800386c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08a      	sub	sp, #40	; 0x28
 8003870:	af02      	add	r7, sp, #8
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	1dbb      	adds	r3, r7, #6
 800387a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003880:	2b20      	cmp	r3, #32
 8003882:	d000      	beq.n	8003886 <HAL_UART_Transmit+0x1a>
 8003884:	e096      	b.n	80039b4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_UART_Transmit+0x28>
 800388c:	1dbb      	adds	r3, r7, #6
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e08e      	b.n	80039b6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	015b      	lsls	r3, r3, #5
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d109      	bne.n	80038b8 <HAL_UART_Transmit+0x4c>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d105      	bne.n	80038b8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2201      	movs	r2, #1
 80038b0:	4013      	ands	r3, r2
 80038b2:	d001      	beq.n	80038b8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e07e      	b.n	80039b6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2274      	movs	r2, #116	; 0x74
 80038bc:	5c9b      	ldrb	r3, [r3, r2]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_UART_Transmit+0x5a>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e077      	b.n	80039b6 <HAL_UART_Transmit+0x14a>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2274      	movs	r2, #116	; 0x74
 80038ca:	2101      	movs	r1, #1
 80038cc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2280      	movs	r2, #128	; 0x80
 80038d2:	2100      	movs	r1, #0
 80038d4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2221      	movs	r2, #33	; 0x21
 80038da:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038dc:	f7fd fcba 	bl	8001254 <HAL_GetTick>
 80038e0:	0003      	movs	r3, r0
 80038e2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	1dba      	adds	r2, r7, #6
 80038e8:	2150      	movs	r1, #80	; 0x50
 80038ea:	8812      	ldrh	r2, [r2, #0]
 80038ec:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1dba      	adds	r2, r7, #6
 80038f2:	2152      	movs	r1, #82	; 0x52
 80038f4:	8812      	ldrh	r2, [r2, #0]
 80038f6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	2380      	movs	r3, #128	; 0x80
 80038fe:	015b      	lsls	r3, r3, #5
 8003900:	429a      	cmp	r2, r3
 8003902:	d108      	bne.n	8003916 <HAL_UART_Transmit+0xaa>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d104      	bne.n	8003916 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800390c:	2300      	movs	r3, #0
 800390e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	61bb      	str	r3, [r7, #24]
 8003914:	e003      	b.n	800391e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800391a:	2300      	movs	r3, #0
 800391c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2274      	movs	r2, #116	; 0x74
 8003922:	2100      	movs	r1, #0
 8003924:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003926:	e02d      	b.n	8003984 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	0013      	movs	r3, r2
 8003932:	2200      	movs	r2, #0
 8003934:	2180      	movs	r1, #128	; 0x80
 8003936:	f000 fe55 	bl	80045e4 <UART_WaitOnFlagUntilTimeout>
 800393a:	1e03      	subs	r3, r0, #0
 800393c:	d001      	beq.n	8003942 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e039      	b.n	80039b6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10b      	bne.n	8003960 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	881a      	ldrh	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	05d2      	lsls	r2, r2, #23
 8003952:	0dd2      	lsrs	r2, r2, #23
 8003954:	b292      	uxth	r2, r2
 8003956:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	3302      	adds	r3, #2
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	e008      	b.n	8003972 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	781a      	ldrb	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	b292      	uxth	r2, r2
 800396a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	3301      	adds	r3, #1
 8003970:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2252      	movs	r2, #82	; 0x52
 8003976:	5a9b      	ldrh	r3, [r3, r2]
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b299      	uxth	r1, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2252      	movs	r2, #82	; 0x52
 8003982:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2252      	movs	r2, #82	; 0x52
 8003988:	5a9b      	ldrh	r3, [r3, r2]
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1cb      	bne.n	8003928 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	0013      	movs	r3, r2
 800399a:	2200      	movs	r2, #0
 800399c:	2140      	movs	r1, #64	; 0x40
 800399e:	f000 fe21 	bl	80045e4 <UART_WaitOnFlagUntilTimeout>
 80039a2:	1e03      	subs	r3, r0, #0
 80039a4:	d001      	beq.n	80039aa <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e005      	b.n	80039b6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	e000      	b.n	80039b6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80039b4:	2302      	movs	r3, #2
  }
}
 80039b6:	0018      	movs	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b008      	add	sp, #32
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	1dbb      	adds	r3, r7, #6
 80039cc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d000      	beq.n	80039d8 <HAL_UART_Transmit_IT+0x18>
 80039d6:	e06a      	b.n	8003aae <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_UART_Transmit_IT+0x26>
 80039de:	1dbb      	adds	r3, r7, #6
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e062      	b.n	8003ab0 <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	2380      	movs	r3, #128	; 0x80
 80039f0:	015b      	lsls	r3, r3, #5
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d109      	bne.n	8003a0a <HAL_UART_Transmit_IT+0x4a>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d105      	bne.n	8003a0a <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2201      	movs	r2, #1
 8003a02:	4013      	ands	r3, r2
 8003a04:	d001      	beq.n	8003a0a <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e052      	b.n	8003ab0 <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2274      	movs	r2, #116	; 0x74
 8003a0e:	5c9b      	ldrb	r3, [r3, r2]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_UART_Transmit_IT+0x58>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e04b      	b.n	8003ab0 <HAL_UART_Transmit_IT+0xf0>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2274      	movs	r2, #116	; 0x74
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1dba      	adds	r2, r7, #6
 8003a2a:	2150      	movs	r1, #80	; 0x50
 8003a2c:	8812      	ldrh	r2, [r2, #0]
 8003a2e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	1dba      	adds	r2, r7, #6
 8003a34:	2152      	movs	r1, #82	; 0x52
 8003a36:	8812      	ldrh	r2, [r2, #0]
 8003a38:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2280      	movs	r2, #128	; 0x80
 8003a44:	2100      	movs	r1, #0
 8003a46:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2221      	movs	r2, #33	; 0x21
 8003a4c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	2380      	movs	r3, #128	; 0x80
 8003a54:	015b      	lsls	r3, r3, #5
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d107      	bne.n	8003a6a <HAL_UART_Transmit_IT+0xaa>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d103      	bne.n	8003a6a <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4a14      	ldr	r2, [pc, #80]	; (8003ab8 <HAL_UART_Transmit_IT+0xf8>)
 8003a66:	669a      	str	r2, [r3, #104]	; 0x68
 8003a68:	e002      	b.n	8003a70 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4a13      	ldr	r2, [pc, #76]	; (8003abc <HAL_UART_Transmit_IT+0xfc>)
 8003a6e:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2274      	movs	r2, #116	; 0x74
 8003a74:	2100      	movs	r1, #0
 8003a76:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a78:	f3ef 8310 	mrs	r3, PRIMASK
 8003a7c:	613b      	str	r3, [r7, #16]
  return(result);
 8003a7e:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003a80:	61fb      	str	r3, [r7, #28]
 8003a82:	2301      	movs	r3, #1
 8003a84:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f383 8810 	msr	PRIMASK, r3
}
 8003a8c:	46c0      	nop			; (mov r8, r8)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2180      	movs	r1, #128	; 0x80
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	f383 8810 	msr	PRIMASK, r3
}
 8003aa8:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e000      	b.n	8003ab0 <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8003aae:	2302      	movs	r3, #2
  }
}
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b008      	add	sp, #32
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	08004a73 	.word	0x08004a73
 8003abc:	080049bf 	.word	0x080049bf

08003ac0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	1dbb      	adds	r3, r7, #6
 8003acc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ad2:	2b20      	cmp	r3, #32
 8003ad4:	d150      	bne.n	8003b78 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_UART_Receive_IT+0x24>
 8003adc:	1dbb      	adds	r3, r7, #6
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e048      	b.n	8003b7a <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	015b      	lsls	r3, r3, #5
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d109      	bne.n	8003b08 <HAL_UART_Receive_IT+0x48>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d105      	bne.n	8003b08 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2201      	movs	r2, #1
 8003b00:	4013      	ands	r3, r2
 8003b02:	d001      	beq.n	8003b08 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e038      	b.n	8003b7a <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2274      	movs	r2, #116	; 0x74
 8003b0c:	5c9b      	ldrb	r3, [r3, r2]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_UART_Receive_IT+0x56>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e031      	b.n	8003b7a <HAL_UART_Receive_IT+0xba>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2274      	movs	r2, #116	; 0x74
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	2380      	movs	r3, #128	; 0x80
 8003b2c:	041b      	lsls	r3, r3, #16
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d019      	beq.n	8003b66 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b32:	f3ef 8310 	mrs	r3, PRIMASK
 8003b36:	613b      	str	r3, [r7, #16]
  return(result);
 8003b38:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b3a:	61fb      	str	r3, [r7, #28]
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f383 8810 	msr	PRIMASK, r3
}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2180      	movs	r1, #128	; 0x80
 8003b54:	04c9      	lsls	r1, r1, #19
 8003b56:	430a      	orrs	r2, r1
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	f383 8810 	msr	PRIMASK, r3
}
 8003b64:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b66:	1dbb      	adds	r3, r7, #6
 8003b68:	881a      	ldrh	r2, [r3, #0]
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f000 fdfc 	bl	800476c <UART_Start_Receive_IT>
 8003b74:	0003      	movs	r3, r0
 8003b76:	e000      	b.n	8003b7a <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003b78:	2302      	movs	r3, #2
  }
}
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	b008      	add	sp, #32
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b84:	b590      	push	{r4, r7, lr}
 8003b86:	b0ab      	sub	sp, #172	; 0xac
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	22a4      	movs	r2, #164	; 0xa4
 8003b94:	18b9      	adds	r1, r7, r2
 8003b96:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	20a0      	movs	r0, #160	; 0xa0
 8003ba0:	1839      	adds	r1, r7, r0
 8003ba2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	219c      	movs	r1, #156	; 0x9c
 8003bac:	1879      	adds	r1, r7, r1
 8003bae:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bb0:	0011      	movs	r1, r2
 8003bb2:	18bb      	adds	r3, r7, r2
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a99      	ldr	r2, [pc, #612]	; (8003e1c <HAL_UART_IRQHandler+0x298>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2298      	movs	r2, #152	; 0x98
 8003bbc:	18bc      	adds	r4, r7, r2
 8003bbe:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003bc0:	18bb      	adds	r3, r7, r2
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d114      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bc8:	187b      	adds	r3, r7, r1
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d00f      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bd2:	183b      	adds	r3, r7, r0
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d00a      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d100      	bne.n	8003be6 <HAL_UART_IRQHandler+0x62>
 8003be4:	e296      	b.n	8004114 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	0010      	movs	r0, r2
 8003bee:	4798      	blx	r3
      }
      return;
 8003bf0:	e290      	b.n	8004114 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003bf2:	2398      	movs	r3, #152	; 0x98
 8003bf4:	18fb      	adds	r3, r7, r3
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d100      	bne.n	8003bfe <HAL_UART_IRQHandler+0x7a>
 8003bfc:	e114      	b.n	8003e28 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003bfe:	239c      	movs	r3, #156	; 0x9c
 8003c00:	18fb      	adds	r3, r7, r3
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2201      	movs	r2, #1
 8003c06:	4013      	ands	r3, r2
 8003c08:	d106      	bne.n	8003c18 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c0a:	23a0      	movs	r3, #160	; 0xa0
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a83      	ldr	r2, [pc, #524]	; (8003e20 <HAL_UART_IRQHandler+0x29c>)
 8003c12:	4013      	ands	r3, r2
 8003c14:	d100      	bne.n	8003c18 <HAL_UART_IRQHandler+0x94>
 8003c16:	e107      	b.n	8003e28 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c18:	23a4      	movs	r3, #164	; 0xa4
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	4013      	ands	r3, r2
 8003c22:	d012      	beq.n	8003c4a <HAL_UART_IRQHandler+0xc6>
 8003c24:	23a0      	movs	r3, #160	; 0xa0
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	2380      	movs	r3, #128	; 0x80
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d00b      	beq.n	8003c4a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2201      	movs	r2, #1
 8003c38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2280      	movs	r2, #128	; 0x80
 8003c3e:	589b      	ldr	r3, [r3, r2]
 8003c40:	2201      	movs	r2, #1
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2180      	movs	r1, #128	; 0x80
 8003c48:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c4a:	23a4      	movs	r3, #164	; 0xa4
 8003c4c:	18fb      	adds	r3, r7, r3
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2202      	movs	r2, #2
 8003c52:	4013      	ands	r3, r2
 8003c54:	d011      	beq.n	8003c7a <HAL_UART_IRQHandler+0xf6>
 8003c56:	239c      	movs	r3, #156	; 0x9c
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d00b      	beq.n	8003c7a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2202      	movs	r2, #2
 8003c68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2280      	movs	r2, #128	; 0x80
 8003c6e:	589b      	ldr	r3, [r3, r2]
 8003c70:	2204      	movs	r2, #4
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2180      	movs	r1, #128	; 0x80
 8003c78:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c7a:	23a4      	movs	r3, #164	; 0xa4
 8003c7c:	18fb      	adds	r3, r7, r3
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2204      	movs	r2, #4
 8003c82:	4013      	ands	r3, r2
 8003c84:	d011      	beq.n	8003caa <HAL_UART_IRQHandler+0x126>
 8003c86:	239c      	movs	r3, #156	; 0x9c
 8003c88:	18fb      	adds	r3, r7, r3
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d00b      	beq.n	8003caa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2204      	movs	r2, #4
 8003c98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2280      	movs	r2, #128	; 0x80
 8003c9e:	589b      	ldr	r3, [r3, r2]
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2180      	movs	r1, #128	; 0x80
 8003ca8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003caa:	23a4      	movs	r3, #164	; 0xa4
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2208      	movs	r2, #8
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	d017      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cb6:	23a0      	movs	r3, #160	; 0xa0
 8003cb8:	18fb      	adds	r3, r7, r3
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d105      	bne.n	8003cce <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003cc2:	239c      	movs	r3, #156	; 0x9c
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ccc:	d00b      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2280      	movs	r2, #128	; 0x80
 8003cda:	589b      	ldr	r3, [r3, r2]
 8003cdc:	2208      	movs	r2, #8
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2180      	movs	r1, #128	; 0x80
 8003ce4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ce6:	23a4      	movs	r3, #164	; 0xa4
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	2380      	movs	r3, #128	; 0x80
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	d013      	beq.n	8003d1c <HAL_UART_IRQHandler+0x198>
 8003cf4:	23a0      	movs	r3, #160	; 0xa0
 8003cf6:	18fb      	adds	r3, r7, r3
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	2380      	movs	r3, #128	; 0x80
 8003cfc:	04db      	lsls	r3, r3, #19
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d00c      	beq.n	8003d1c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2280      	movs	r2, #128	; 0x80
 8003d08:	0112      	lsls	r2, r2, #4
 8003d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2280      	movs	r2, #128	; 0x80
 8003d10:	589b      	ldr	r3, [r3, r2]
 8003d12:	2220      	movs	r2, #32
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2180      	movs	r1, #128	; 0x80
 8003d1a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2280      	movs	r2, #128	; 0x80
 8003d20:	589b      	ldr	r3, [r3, r2]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d100      	bne.n	8003d28 <HAL_UART_IRQHandler+0x1a4>
 8003d26:	e1f7      	b.n	8004118 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d28:	23a4      	movs	r3, #164	; 0xa4
 8003d2a:	18fb      	adds	r3, r7, r3
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	4013      	ands	r3, r2
 8003d32:	d00e      	beq.n	8003d52 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d34:	23a0      	movs	r3, #160	; 0xa0
 8003d36:	18fb      	adds	r3, r7, r3
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d008      	beq.n	8003d52 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d004      	beq.n	8003d52 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	0010      	movs	r0, r2
 8003d50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2280      	movs	r2, #128	; 0x80
 8003d56:	589b      	ldr	r3, [r3, r2]
 8003d58:	2194      	movs	r1, #148	; 0x94
 8003d5a:	187a      	adds	r2, r7, r1
 8003d5c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2240      	movs	r2, #64	; 0x40
 8003d66:	4013      	ands	r3, r2
 8003d68:	2b40      	cmp	r3, #64	; 0x40
 8003d6a:	d004      	beq.n	8003d76 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d6c:	187b      	adds	r3, r7, r1
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2228      	movs	r2, #40	; 0x28
 8003d72:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d74:	d047      	beq.n	8003e06 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f000 fda7 	bl	80048cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	2240      	movs	r2, #64	; 0x40
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d137      	bne.n	8003dfc <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d90:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003d92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d94:	2090      	movs	r0, #144	; 0x90
 8003d96:	183a      	adds	r2, r7, r0
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003da0:	f383 8810 	msr	PRIMASK, r3
}
 8003da4:	46c0      	nop			; (mov r8, r8)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2140      	movs	r1, #64	; 0x40
 8003db2:	438a      	bics	r2, r1
 8003db4:	609a      	str	r2, [r3, #8]
 8003db6:	183b      	adds	r3, r7, r0
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dbe:	f383 8810 	msr	PRIMASK, r3
}
 8003dc2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d012      	beq.n	8003df2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd0:	4a14      	ldr	r2, [pc, #80]	; (8003e24 <HAL_UART_IRQHandler+0x2a0>)
 8003dd2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f7fe f815 	bl	8001e08 <HAL_DMA_Abort_IT>
 8003dde:	1e03      	subs	r3, r0, #0
 8003de0:	d01a      	beq.n	8003e18 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	0018      	movs	r0, r3
 8003dee:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df0:	e012      	b.n	8003e18 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	0018      	movs	r0, r3
 8003df6:	f000 f9a5 	bl	8004144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dfa:	e00d      	b.n	8003e18 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f000 f9a0 	bl	8004144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e04:	e008      	b.n	8003e18 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f000 f99b 	bl	8004144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2280      	movs	r2, #128	; 0x80
 8003e12:	2100      	movs	r1, #0
 8003e14:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003e16:	e17f      	b.n	8004118 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e18:	46c0      	nop			; (mov r8, r8)
    return;
 8003e1a:	e17d      	b.n	8004118 <HAL_UART_IRQHandler+0x594>
 8003e1c:	0000080f 	.word	0x0000080f
 8003e20:	04000120 	.word	0x04000120
 8003e24:	08004991 	.word	0x08004991

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d000      	beq.n	8003e32 <HAL_UART_IRQHandler+0x2ae>
 8003e30:	e131      	b.n	8004096 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e32:	23a4      	movs	r3, #164	; 0xa4
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2210      	movs	r2, #16
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	d100      	bne.n	8003e40 <HAL_UART_IRQHandler+0x2bc>
 8003e3e:	e12a      	b.n	8004096 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e40:	23a0      	movs	r3, #160	; 0xa0
 8003e42:	18fb      	adds	r3, r7, r3
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2210      	movs	r2, #16
 8003e48:	4013      	ands	r3, r2
 8003e4a:	d100      	bne.n	8003e4e <HAL_UART_IRQHandler+0x2ca>
 8003e4c:	e123      	b.n	8004096 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2210      	movs	r2, #16
 8003e54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	2240      	movs	r2, #64	; 0x40
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b40      	cmp	r3, #64	; 0x40
 8003e62:	d000      	beq.n	8003e66 <HAL_UART_IRQHandler+0x2e2>
 8003e64:	e09b      	b.n	8003f9e <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	217e      	movs	r1, #126	; 0x7e
 8003e70:	187b      	adds	r3, r7, r1
 8003e72:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003e74:	187b      	adds	r3, r7, r1
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d100      	bne.n	8003e7e <HAL_UART_IRQHandler+0x2fa>
 8003e7c:	e14e      	b.n	800411c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2258      	movs	r2, #88	; 0x58
 8003e82:	5a9b      	ldrh	r3, [r3, r2]
 8003e84:	187a      	adds	r2, r7, r1
 8003e86:	8812      	ldrh	r2, [r2, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d300      	bcc.n	8003e8e <HAL_UART_IRQHandler+0x30a>
 8003e8c:	e146      	b.n	800411c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	187a      	adds	r2, r7, r1
 8003e92:	215a      	movs	r1, #90	; 0x5a
 8003e94:	8812      	ldrh	r2, [r2, #0]
 8003e96:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d06e      	beq.n	8003f80 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eaa:	67bb      	str	r3, [r7, #120]	; 0x78
 8003eac:	2301      	movs	r3, #1
 8003eae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb2:	f383 8810 	msr	PRIMASK, r3
}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	499a      	ldr	r1, [pc, #616]	; (800412c <HAL_UART_IRQHandler+0x5a8>)
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ece:	f383 8810 	msr	PRIMASK, r3
}
 8003ed2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003edc:	677b      	str	r3, [r7, #116]	; 0x74
 8003ede:	2301      	movs	r3, #1
 8003ee0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ee4:	f383 8810 	msr	PRIMASK, r3
}
 8003ee8:	46c0      	nop			; (mov r8, r8)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	438a      	bics	r2, r1
 8003ef8:	609a      	str	r2, [r3, #8]
 8003efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003efc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f00:	f383 8810 	msr	PRIMASK, r3
}
 8003f04:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f06:	f3ef 8310 	mrs	r3, PRIMASK
 8003f0a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f0e:	673b      	str	r3, [r7, #112]	; 0x70
 8003f10:	2301      	movs	r3, #1
 8003f12:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f16:	f383 8810 	msr	PRIMASK, r3
}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2140      	movs	r1, #64	; 0x40
 8003f28:	438a      	bics	r2, r1
 8003f2a:	609a      	str	r2, [r3, #8]
 8003f2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f2e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f32:	f383 8810 	msr	PRIMASK, r3
}
 8003f36:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f44:	f3ef 8310 	mrs	r3, PRIMASK
 8003f48:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f4e:	2301      	movs	r3, #1
 8003f50:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f54:	f383 8810 	msr	PRIMASK, r3
}
 8003f58:	46c0      	nop			; (mov r8, r8)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2110      	movs	r1, #16
 8003f66:	438a      	bics	r2, r1
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f70:	f383 8810 	msr	PRIMASK, r3
}
 8003f74:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f7fd ff0c 	bl	8001d98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2258      	movs	r2, #88	; 0x58
 8003f84:	5a9a      	ldrh	r2, [r3, r2]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	215a      	movs	r1, #90	; 0x5a
 8003f8a:	5a5b      	ldrh	r3, [r3, r1]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	0011      	movs	r1, r2
 8003f96:	0018      	movs	r0, r3
 8003f98:	f000 f8dc 	bl	8004154 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f9c:	e0be      	b.n	800411c <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2258      	movs	r2, #88	; 0x58
 8003fa2:	5a99      	ldrh	r1, [r3, r2]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	225a      	movs	r2, #90	; 0x5a
 8003fa8:	5a9b      	ldrh	r3, [r3, r2]
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	208e      	movs	r0, #142	; 0x8e
 8003fae:	183b      	adds	r3, r7, r0
 8003fb0:	1a8a      	subs	r2, r1, r2
 8003fb2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	225a      	movs	r2, #90	; 0x5a
 8003fb8:	5a9b      	ldrh	r3, [r3, r2]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d100      	bne.n	8003fc2 <HAL_UART_IRQHandler+0x43e>
 8003fc0:	e0ae      	b.n	8004120 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8003fc2:	183b      	adds	r3, r7, r0
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d100      	bne.n	8003fcc <HAL_UART_IRQHandler+0x448>
 8003fca:	e0a9      	b.n	8004120 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8003fd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fd4:	2488      	movs	r4, #136	; 0x88
 8003fd6:	193a      	adds	r2, r7, r4
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	2301      	movs	r3, #1
 8003fdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f383 8810 	msr	PRIMASK, r3
}
 8003fe4:	46c0      	nop			; (mov r8, r8)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	494f      	ldr	r1, [pc, #316]	; (8004130 <HAL_UART_IRQHandler+0x5ac>)
 8003ff2:	400a      	ands	r2, r1
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	193b      	adds	r3, r7, r4
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f383 8810 	msr	PRIMASK, r3
}
 8004002:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004004:	f3ef 8310 	mrs	r3, PRIMASK
 8004008:	61bb      	str	r3, [r7, #24]
  return(result);
 800400a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400c:	2484      	movs	r4, #132	; 0x84
 800400e:	193a      	adds	r2, r7, r4
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	2301      	movs	r3, #1
 8004014:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	f383 8810 	msr	PRIMASK, r3
}
 800401c:	46c0      	nop			; (mov r8, r8)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2101      	movs	r1, #1
 800402a:	438a      	bics	r2, r1
 800402c:	609a      	str	r2, [r3, #8]
 800402e:	193b      	adds	r3, r7, r4
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	f383 8810 	msr	PRIMASK, r3
}
 800403a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800404e:	f3ef 8310 	mrs	r3, PRIMASK
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004056:	2480      	movs	r4, #128	; 0x80
 8004058:	193a      	adds	r2, r7, r4
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	2301      	movs	r3, #1
 800405e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004062:	f383 8810 	msr	PRIMASK, r3
}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2110      	movs	r1, #16
 8004074:	438a      	bics	r2, r1
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	193b      	adds	r3, r7, r4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800407e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004080:	f383 8810 	msr	PRIMASK, r3
}
 8004084:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004086:	183b      	adds	r3, r7, r0
 8004088:	881a      	ldrh	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	0011      	movs	r1, r2
 800408e:	0018      	movs	r0, r3
 8004090:	f000 f860 	bl	8004154 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004094:	e044      	b.n	8004120 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004096:	23a4      	movs	r3, #164	; 0xa4
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	2380      	movs	r3, #128	; 0x80
 800409e:	035b      	lsls	r3, r3, #13
 80040a0:	4013      	ands	r3, r2
 80040a2:	d010      	beq.n	80040c6 <HAL_UART_IRQHandler+0x542>
 80040a4:	239c      	movs	r3, #156	; 0x9c
 80040a6:	18fb      	adds	r3, r7, r3
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	2380      	movs	r3, #128	; 0x80
 80040ac:	03db      	lsls	r3, r3, #15
 80040ae:	4013      	ands	r3, r2
 80040b0:	d009      	beq.n	80040c6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2280      	movs	r2, #128	; 0x80
 80040b8:	0352      	lsls	r2, r2, #13
 80040ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	0018      	movs	r0, r3
 80040c0:	f000 fec8 	bl	8004e54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040c4:	e02f      	b.n	8004126 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040c6:	23a4      	movs	r3, #164	; 0xa4
 80040c8:	18fb      	adds	r3, r7, r3
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2280      	movs	r2, #128	; 0x80
 80040ce:	4013      	ands	r3, r2
 80040d0:	d00f      	beq.n	80040f2 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80040d2:	23a0      	movs	r3, #160	; 0xa0
 80040d4:	18fb      	adds	r3, r7, r3
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2280      	movs	r2, #128	; 0x80
 80040da:	4013      	ands	r3, r2
 80040dc:	d009      	beq.n	80040f2 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d01e      	beq.n	8004124 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	0010      	movs	r0, r2
 80040ee:	4798      	blx	r3
    }
    return;
 80040f0:	e018      	b.n	8004124 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040f2:	23a4      	movs	r3, #164	; 0xa4
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2240      	movs	r2, #64	; 0x40
 80040fa:	4013      	ands	r3, r2
 80040fc:	d013      	beq.n	8004126 <HAL_UART_IRQHandler+0x5a2>
 80040fe:	23a0      	movs	r3, #160	; 0xa0
 8004100:	18fb      	adds	r3, r7, r3
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2240      	movs	r2, #64	; 0x40
 8004106:	4013      	ands	r3, r2
 8004108:	d00d      	beq.n	8004126 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	0018      	movs	r0, r3
 800410e:	f000 fd0e 	bl	8004b2e <UART_EndTransmit_IT>
    return;
 8004112:	e008      	b.n	8004126 <HAL_UART_IRQHandler+0x5a2>
      return;
 8004114:	46c0      	nop			; (mov r8, r8)
 8004116:	e006      	b.n	8004126 <HAL_UART_IRQHandler+0x5a2>
    return;
 8004118:	46c0      	nop			; (mov r8, r8)
 800411a:	e004      	b.n	8004126 <HAL_UART_IRQHandler+0x5a2>
      return;
 800411c:	46c0      	nop			; (mov r8, r8)
 800411e:	e002      	b.n	8004126 <HAL_UART_IRQHandler+0x5a2>
      return;
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	e000      	b.n	8004126 <HAL_UART_IRQHandler+0x5a2>
    return;
 8004124:	46c0      	nop			; (mov r8, r8)
  }

}
 8004126:	46bd      	mov	sp, r7
 8004128:	b02b      	add	sp, #172	; 0xac
 800412a:	bd90      	pop	{r4, r7, pc}
 800412c:	fffffeff 	.word	0xfffffeff
 8004130:	fffffedf 	.word	0xfffffedf

08004134 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800413c:	46c0      	nop			; (mov r8, r8)
 800413e:	46bd      	mov	sp, r7
 8004140:	b002      	add	sp, #8
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800414c:	46c0      	nop			; (mov r8, r8)
 800414e:	46bd      	mov	sp, r7
 8004150:	b002      	add	sp, #8
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	000a      	movs	r2, r1
 800415e:	1cbb      	adds	r3, r7, #2
 8004160:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	46bd      	mov	sp, r7
 8004166:	b002      	add	sp, #8
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004174:	231e      	movs	r3, #30
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	2200      	movs	r2, #0
 800417a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	431a      	orrs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	4313      	orrs	r3, r2
 8004192:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a8d      	ldr	r2, [pc, #564]	; (80043d0 <UART_SetConfig+0x264>)
 800419c:	4013      	ands	r3, r2
 800419e:	0019      	movs	r1, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	4a88      	ldr	r2, [pc, #544]	; (80043d4 <UART_SetConfig+0x268>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	0019      	movs	r1, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4a7f      	ldr	r2, [pc, #508]	; (80043d8 <UART_SetConfig+0x26c>)
 80041da:	4013      	ands	r3, r2
 80041dc:	0019      	movs	r1, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a7b      	ldr	r2, [pc, #492]	; (80043dc <UART_SetConfig+0x270>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d127      	bne.n	8004242 <UART_SetConfig+0xd6>
 80041f2:	4b7b      	ldr	r3, [pc, #492]	; (80043e0 <UART_SetConfig+0x274>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	2203      	movs	r2, #3
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d00d      	beq.n	800421a <UART_SetConfig+0xae>
 80041fe:	d81b      	bhi.n	8004238 <UART_SetConfig+0xcc>
 8004200:	2b02      	cmp	r3, #2
 8004202:	d014      	beq.n	800422e <UART_SetConfig+0xc2>
 8004204:	d818      	bhi.n	8004238 <UART_SetConfig+0xcc>
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <UART_SetConfig+0xa4>
 800420a:	2b01      	cmp	r3, #1
 800420c:	d00a      	beq.n	8004224 <UART_SetConfig+0xb8>
 800420e:	e013      	b.n	8004238 <UART_SetConfig+0xcc>
 8004210:	231f      	movs	r3, #31
 8004212:	18fb      	adds	r3, r7, r3
 8004214:	2200      	movs	r2, #0
 8004216:	701a      	strb	r2, [r3, #0]
 8004218:	e021      	b.n	800425e <UART_SetConfig+0xf2>
 800421a:	231f      	movs	r3, #31
 800421c:	18fb      	adds	r3, r7, r3
 800421e:	2202      	movs	r2, #2
 8004220:	701a      	strb	r2, [r3, #0]
 8004222:	e01c      	b.n	800425e <UART_SetConfig+0xf2>
 8004224:	231f      	movs	r3, #31
 8004226:	18fb      	adds	r3, r7, r3
 8004228:	2204      	movs	r2, #4
 800422a:	701a      	strb	r2, [r3, #0]
 800422c:	e017      	b.n	800425e <UART_SetConfig+0xf2>
 800422e:	231f      	movs	r3, #31
 8004230:	18fb      	adds	r3, r7, r3
 8004232:	2208      	movs	r2, #8
 8004234:	701a      	strb	r2, [r3, #0]
 8004236:	e012      	b.n	800425e <UART_SetConfig+0xf2>
 8004238:	231f      	movs	r3, #31
 800423a:	18fb      	adds	r3, r7, r3
 800423c:	2210      	movs	r2, #16
 800423e:	701a      	strb	r2, [r3, #0]
 8004240:	e00d      	b.n	800425e <UART_SetConfig+0xf2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a67      	ldr	r2, [pc, #412]	; (80043e4 <UART_SetConfig+0x278>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d104      	bne.n	8004256 <UART_SetConfig+0xea>
 800424c:	231f      	movs	r3, #31
 800424e:	18fb      	adds	r3, r7, r3
 8004250:	2200      	movs	r2, #0
 8004252:	701a      	strb	r2, [r3, #0]
 8004254:	e003      	b.n	800425e <UART_SetConfig+0xf2>
 8004256:	231f      	movs	r3, #31
 8004258:	18fb      	adds	r3, r7, r3
 800425a:	2210      	movs	r2, #16
 800425c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69da      	ldr	r2, [r3, #28]
 8004262:	2380      	movs	r3, #128	; 0x80
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	429a      	cmp	r2, r3
 8004268:	d15d      	bne.n	8004326 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800426a:	231f      	movs	r3, #31
 800426c:	18fb      	adds	r3, r7, r3
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b08      	cmp	r3, #8
 8004272:	d015      	beq.n	80042a0 <UART_SetConfig+0x134>
 8004274:	dc18      	bgt.n	80042a8 <UART_SetConfig+0x13c>
 8004276:	2b04      	cmp	r3, #4
 8004278:	d00d      	beq.n	8004296 <UART_SetConfig+0x12a>
 800427a:	dc15      	bgt.n	80042a8 <UART_SetConfig+0x13c>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <UART_SetConfig+0x11a>
 8004280:	2b02      	cmp	r3, #2
 8004282:	d005      	beq.n	8004290 <UART_SetConfig+0x124>
 8004284:	e010      	b.n	80042a8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004286:	f7fe fd7b 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 800428a:	0003      	movs	r3, r0
 800428c:	61bb      	str	r3, [r7, #24]
        break;
 800428e:	e012      	b.n	80042b6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004290:	4b55      	ldr	r3, [pc, #340]	; (80043e8 <UART_SetConfig+0x27c>)
 8004292:	61bb      	str	r3, [r7, #24]
        break;
 8004294:	e00f      	b.n	80042b6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004296:	f7fe fce9 	bl	8002c6c <HAL_RCC_GetSysClockFreq>
 800429a:	0003      	movs	r3, r0
 800429c:	61bb      	str	r3, [r7, #24]
        break;
 800429e:	e00a      	b.n	80042b6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	021b      	lsls	r3, r3, #8
 80042a4:	61bb      	str	r3, [r7, #24]
        break;
 80042a6:	e006      	b.n	80042b6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042ac:	231e      	movs	r3, #30
 80042ae:	18fb      	adds	r3, r7, r3
 80042b0:	2201      	movs	r2, #1
 80042b2:	701a      	strb	r2, [r3, #0]
        break;
 80042b4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d100      	bne.n	80042be <UART_SetConfig+0x152>
 80042bc:	e07b      	b.n	80043b6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	005a      	lsls	r2, r3, #1
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	085b      	lsrs	r3, r3, #1
 80042c8:	18d2      	adds	r2, r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	0019      	movs	r1, r3
 80042d0:	0010      	movs	r0, r2
 80042d2:	f7fb ff23 	bl	800011c <__udivsi3>
 80042d6:	0003      	movs	r3, r0
 80042d8:	b29b      	uxth	r3, r3
 80042da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2b0f      	cmp	r3, #15
 80042e0:	d91c      	bls.n	800431c <UART_SetConfig+0x1b0>
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	025b      	lsls	r3, r3, #9
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d217      	bcs.n	800431c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	200e      	movs	r0, #14
 80042f2:	183b      	adds	r3, r7, r0
 80042f4:	210f      	movs	r1, #15
 80042f6:	438a      	bics	r2, r1
 80042f8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	085b      	lsrs	r3, r3, #1
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2207      	movs	r2, #7
 8004302:	4013      	ands	r3, r2
 8004304:	b299      	uxth	r1, r3
 8004306:	183b      	adds	r3, r7, r0
 8004308:	183a      	adds	r2, r7, r0
 800430a:	8812      	ldrh	r2, [r2, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	183a      	adds	r2, r7, r0
 8004316:	8812      	ldrh	r2, [r2, #0]
 8004318:	60da      	str	r2, [r3, #12]
 800431a:	e04c      	b.n	80043b6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800431c:	231e      	movs	r3, #30
 800431e:	18fb      	adds	r3, r7, r3
 8004320:	2201      	movs	r2, #1
 8004322:	701a      	strb	r2, [r3, #0]
 8004324:	e047      	b.n	80043b6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004326:	231f      	movs	r3, #31
 8004328:	18fb      	adds	r3, r7, r3
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b08      	cmp	r3, #8
 800432e:	d015      	beq.n	800435c <UART_SetConfig+0x1f0>
 8004330:	dc18      	bgt.n	8004364 <UART_SetConfig+0x1f8>
 8004332:	2b04      	cmp	r3, #4
 8004334:	d00d      	beq.n	8004352 <UART_SetConfig+0x1e6>
 8004336:	dc15      	bgt.n	8004364 <UART_SetConfig+0x1f8>
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <UART_SetConfig+0x1d6>
 800433c:	2b02      	cmp	r3, #2
 800433e:	d005      	beq.n	800434c <UART_SetConfig+0x1e0>
 8004340:	e010      	b.n	8004364 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004342:	f7fe fd1d 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8004346:	0003      	movs	r3, r0
 8004348:	61bb      	str	r3, [r7, #24]
        break;
 800434a:	e012      	b.n	8004372 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800434c:	4b26      	ldr	r3, [pc, #152]	; (80043e8 <UART_SetConfig+0x27c>)
 800434e:	61bb      	str	r3, [r7, #24]
        break;
 8004350:	e00f      	b.n	8004372 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004352:	f7fe fc8b 	bl	8002c6c <HAL_RCC_GetSysClockFreq>
 8004356:	0003      	movs	r3, r0
 8004358:	61bb      	str	r3, [r7, #24]
        break;
 800435a:	e00a      	b.n	8004372 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800435c:	2380      	movs	r3, #128	; 0x80
 800435e:	021b      	lsls	r3, r3, #8
 8004360:	61bb      	str	r3, [r7, #24]
        break;
 8004362:	e006      	b.n	8004372 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004368:	231e      	movs	r3, #30
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	2201      	movs	r2, #1
 800436e:	701a      	strb	r2, [r3, #0]
        break;
 8004370:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01e      	beq.n	80043b6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	085a      	lsrs	r2, r3, #1
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	18d2      	adds	r2, r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	0019      	movs	r1, r3
 8004388:	0010      	movs	r0, r2
 800438a:	f7fb fec7 	bl	800011c <__udivsi3>
 800438e:	0003      	movs	r3, r0
 8004390:	b29b      	uxth	r3, r3
 8004392:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b0f      	cmp	r3, #15
 8004398:	d909      	bls.n	80043ae <UART_SetConfig+0x242>
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	2380      	movs	r3, #128	; 0x80
 800439e:	025b      	lsls	r3, r3, #9
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d204      	bcs.n	80043ae <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	60da      	str	r2, [r3, #12]
 80043ac:	e003      	b.n	80043b6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80043ae:	231e      	movs	r3, #30
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	2201      	movs	r2, #1
 80043b4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80043c2:	231e      	movs	r3, #30
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	781b      	ldrb	r3, [r3, #0]
}
 80043c8:	0018      	movs	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b008      	add	sp, #32
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	efff69f3 	.word	0xefff69f3
 80043d4:	ffffcfff 	.word	0xffffcfff
 80043d8:	fffff4ff 	.word	0xfffff4ff
 80043dc:	40013800 	.word	0x40013800
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40004400 	.word	0x40004400
 80043e8:	007a1200 	.word	0x007a1200

080043ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	2201      	movs	r2, #1
 80043fa:	4013      	ands	r3, r2
 80043fc:	d00b      	beq.n	8004416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	4a4a      	ldr	r2, [pc, #296]	; (8004530 <UART_AdvFeatureConfig+0x144>)
 8004406:	4013      	ands	r3, r2
 8004408:	0019      	movs	r1, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	2202      	movs	r2, #2
 800441c:	4013      	ands	r3, r2
 800441e:	d00b      	beq.n	8004438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4a43      	ldr	r2, [pc, #268]	; (8004534 <UART_AdvFeatureConfig+0x148>)
 8004428:	4013      	ands	r3, r2
 800442a:	0019      	movs	r1, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	2204      	movs	r2, #4
 800443e:	4013      	ands	r3, r2
 8004440:	d00b      	beq.n	800445a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a3b      	ldr	r2, [pc, #236]	; (8004538 <UART_AdvFeatureConfig+0x14c>)
 800444a:	4013      	ands	r3, r2
 800444c:	0019      	movs	r1, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	2208      	movs	r2, #8
 8004460:	4013      	ands	r3, r2
 8004462:	d00b      	beq.n	800447c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	4a34      	ldr	r2, [pc, #208]	; (800453c <UART_AdvFeatureConfig+0x150>)
 800446c:	4013      	ands	r3, r2
 800446e:	0019      	movs	r1, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	2210      	movs	r2, #16
 8004482:	4013      	ands	r3, r2
 8004484:	d00b      	beq.n	800449e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	4a2c      	ldr	r2, [pc, #176]	; (8004540 <UART_AdvFeatureConfig+0x154>)
 800448e:	4013      	ands	r3, r2
 8004490:	0019      	movs	r1, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	2220      	movs	r2, #32
 80044a4:	4013      	ands	r3, r2
 80044a6:	d00b      	beq.n	80044c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	4a25      	ldr	r2, [pc, #148]	; (8004544 <UART_AdvFeatureConfig+0x158>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	0019      	movs	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	2240      	movs	r2, #64	; 0x40
 80044c6:	4013      	ands	r3, r2
 80044c8:	d01d      	beq.n	8004506 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <UART_AdvFeatureConfig+0x15c>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	0019      	movs	r1, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044e6:	2380      	movs	r3, #128	; 0x80
 80044e8:	035b      	lsls	r3, r3, #13
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d10b      	bne.n	8004506 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	4a15      	ldr	r2, [pc, #84]	; (800454c <UART_AdvFeatureConfig+0x160>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	0019      	movs	r1, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	2280      	movs	r2, #128	; 0x80
 800450c:	4013      	ands	r3, r2
 800450e:	d00b      	beq.n	8004528 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4a0e      	ldr	r2, [pc, #56]	; (8004550 <UART_AdvFeatureConfig+0x164>)
 8004518:	4013      	ands	r3, r2
 800451a:	0019      	movs	r1, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	605a      	str	r2, [r3, #4]
  }
}
 8004528:	46c0      	nop			; (mov r8, r8)
 800452a:	46bd      	mov	sp, r7
 800452c:	b002      	add	sp, #8
 800452e:	bd80      	pop	{r7, pc}
 8004530:	fffdffff 	.word	0xfffdffff
 8004534:	fffeffff 	.word	0xfffeffff
 8004538:	fffbffff 	.word	0xfffbffff
 800453c:	ffff7fff 	.word	0xffff7fff
 8004540:	ffffefff 	.word	0xffffefff
 8004544:	ffffdfff 	.word	0xffffdfff
 8004548:	ffefffff 	.word	0xffefffff
 800454c:	ff9fffff 	.word	0xff9fffff
 8004550:	fff7ffff 	.word	0xfff7ffff

08004554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af02      	add	r7, sp, #8
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2280      	movs	r2, #128	; 0x80
 8004560:	2100      	movs	r1, #0
 8004562:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004564:	f7fc fe76 	bl	8001254 <HAL_GetTick>
 8004568:	0003      	movs	r3, r0
 800456a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2208      	movs	r2, #8
 8004574:	4013      	ands	r3, r2
 8004576:	2b08      	cmp	r3, #8
 8004578:	d10c      	bne.n	8004594 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2280      	movs	r2, #128	; 0x80
 800457e:	0391      	lsls	r1, r2, #14
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	4a17      	ldr	r2, [pc, #92]	; (80045e0 <UART_CheckIdleState+0x8c>)
 8004584:	9200      	str	r2, [sp, #0]
 8004586:	2200      	movs	r2, #0
 8004588:	f000 f82c 	bl	80045e4 <UART_WaitOnFlagUntilTimeout>
 800458c:	1e03      	subs	r3, r0, #0
 800458e:	d001      	beq.n	8004594 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e021      	b.n	80045d8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2204      	movs	r2, #4
 800459c:	4013      	ands	r3, r2
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d10c      	bne.n	80045bc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2280      	movs	r2, #128	; 0x80
 80045a6:	03d1      	lsls	r1, r2, #15
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	4a0d      	ldr	r2, [pc, #52]	; (80045e0 <UART_CheckIdleState+0x8c>)
 80045ac:	9200      	str	r2, [sp, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f000 f818 	bl	80045e4 <UART_WaitOnFlagUntilTimeout>
 80045b4:	1e03      	subs	r3, r0, #0
 80045b6:	d001      	beq.n	80045bc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e00d      	b.n	80045d8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2274      	movs	r2, #116	; 0x74
 80045d2:	2100      	movs	r1, #0
 80045d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	0018      	movs	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	b004      	add	sp, #16
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	01ffffff 	.word	0x01ffffff

080045e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b094      	sub	sp, #80	; 0x50
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	1dfb      	adds	r3, r7, #7
 80045f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f4:	e0a3      	b.n	800473e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045f8:	3301      	adds	r3, #1
 80045fa:	d100      	bne.n	80045fe <UART_WaitOnFlagUntilTimeout+0x1a>
 80045fc:	e09f      	b.n	800473e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fe:	f7fc fe29 	bl	8001254 <HAL_GetTick>
 8004602:	0002      	movs	r2, r0
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800460a:	429a      	cmp	r2, r3
 800460c:	d302      	bcc.n	8004614 <UART_WaitOnFlagUntilTimeout+0x30>
 800460e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004610:	2b00      	cmp	r3, #0
 8004612:	d13d      	bne.n	8004690 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004614:	f3ef 8310 	mrs	r3, PRIMASK
 8004618:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800461a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800461c:	647b      	str	r3, [r7, #68]	; 0x44
 800461e:	2301      	movs	r3, #1
 8004620:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004624:	f383 8810 	msr	PRIMASK, r3
}
 8004628:	46c0      	nop			; (mov r8, r8)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	494c      	ldr	r1, [pc, #304]	; (8004768 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004636:	400a      	ands	r2, r1
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800463c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	f383 8810 	msr	PRIMASK, r3
}
 8004644:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004646:	f3ef 8310 	mrs	r3, PRIMASK
 800464a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800464c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464e:	643b      	str	r3, [r7, #64]	; 0x40
 8004650:	2301      	movs	r3, #1
 8004652:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004656:	f383 8810 	msr	PRIMASK, r3
}
 800465a:	46c0      	nop			; (mov r8, r8)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2101      	movs	r1, #1
 8004668:	438a      	bics	r2, r1
 800466a:	609a      	str	r2, [r3, #8]
 800466c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800466e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004672:	f383 8810 	msr	PRIMASK, r3
}
 8004676:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2220      	movs	r2, #32
 8004682:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2274      	movs	r2, #116	; 0x74
 8004688:	2100      	movs	r1, #0
 800468a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e067      	b.n	8004760 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2204      	movs	r2, #4
 8004698:	4013      	ands	r3, r2
 800469a:	d050      	beq.n	800473e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69da      	ldr	r2, [r3, #28]
 80046a2:	2380      	movs	r3, #128	; 0x80
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	401a      	ands	r2, r3
 80046a8:	2380      	movs	r3, #128	; 0x80
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d146      	bne.n	800473e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2280      	movs	r2, #128	; 0x80
 80046b6:	0112      	lsls	r2, r2, #4
 80046b8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ba:	f3ef 8310 	mrs	r3, PRIMASK
 80046be:	613b      	str	r3, [r7, #16]
  return(result);
 80046c0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046c4:	2301      	movs	r3, #1
 80046c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f383 8810 	msr	PRIMASK, r3
}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4923      	ldr	r1, [pc, #140]	; (8004768 <UART_WaitOnFlagUntilTimeout+0x184>)
 80046dc:	400a      	ands	r2, r1
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	f383 8810 	msr	PRIMASK, r3
}
 80046ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ec:	f3ef 8310 	mrs	r3, PRIMASK
 80046f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80046f2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80046f6:	2301      	movs	r3, #1
 80046f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	f383 8810 	msr	PRIMASK, r3
}
 8004700:	46c0      	nop			; (mov r8, r8)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2101      	movs	r1, #1
 800470e:	438a      	bics	r2, r1
 8004710:	609a      	str	r2, [r3, #8]
 8004712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	f383 8810 	msr	PRIMASK, r3
}
 800471c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2220      	movs	r2, #32
 8004722:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2220      	movs	r2, #32
 8004728:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2280      	movs	r2, #128	; 0x80
 800472e:	2120      	movs	r1, #32
 8004730:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2274      	movs	r2, #116	; 0x74
 8004736:	2100      	movs	r1, #0
 8004738:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e010      	b.n	8004760 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	4013      	ands	r3, r2
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	425a      	negs	r2, r3
 800474e:	4153      	adcs	r3, r2
 8004750:	b2db      	uxtb	r3, r3
 8004752:	001a      	movs	r2, r3
 8004754:	1dfb      	adds	r3, r7, #7
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d100      	bne.n	800475e <UART_WaitOnFlagUntilTimeout+0x17a>
 800475c:	e74b      	b.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	0018      	movs	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	b014      	add	sp, #80	; 0x50
 8004766:	bd80      	pop	{r7, pc}
 8004768:	fffffe5f 	.word	0xfffffe5f

0800476c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b08c      	sub	sp, #48	; 0x30
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	1dbb      	adds	r3, r7, #6
 8004778:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	1dba      	adds	r2, r7, #6
 8004784:	2158      	movs	r1, #88	; 0x58
 8004786:	8812      	ldrh	r2, [r2, #0]
 8004788:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	1dba      	adds	r2, r7, #6
 800478e:	215a      	movs	r1, #90	; 0x5a
 8004790:	8812      	ldrh	r2, [r2, #0]
 8004792:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	2380      	movs	r3, #128	; 0x80
 80047a0:	015b      	lsls	r3, r3, #5
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d10d      	bne.n	80047c2 <UART_Start_Receive_IT+0x56>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d104      	bne.n	80047b8 <UART_Start_Receive_IT+0x4c>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	225c      	movs	r2, #92	; 0x5c
 80047b2:	4943      	ldr	r1, [pc, #268]	; (80048c0 <UART_Start_Receive_IT+0x154>)
 80047b4:	5299      	strh	r1, [r3, r2]
 80047b6:	e02e      	b.n	8004816 <UART_Start_Receive_IT+0xaa>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	225c      	movs	r2, #92	; 0x5c
 80047bc:	21ff      	movs	r1, #255	; 0xff
 80047be:	5299      	strh	r1, [r3, r2]
 80047c0:	e029      	b.n	8004816 <UART_Start_Receive_IT+0xaa>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10d      	bne.n	80047e6 <UART_Start_Receive_IT+0x7a>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d104      	bne.n	80047dc <UART_Start_Receive_IT+0x70>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	225c      	movs	r2, #92	; 0x5c
 80047d6:	21ff      	movs	r1, #255	; 0xff
 80047d8:	5299      	strh	r1, [r3, r2]
 80047da:	e01c      	b.n	8004816 <UART_Start_Receive_IT+0xaa>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	225c      	movs	r2, #92	; 0x5c
 80047e0:	217f      	movs	r1, #127	; 0x7f
 80047e2:	5299      	strh	r1, [r3, r2]
 80047e4:	e017      	b.n	8004816 <UART_Start_Receive_IT+0xaa>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	2380      	movs	r3, #128	; 0x80
 80047ec:	055b      	lsls	r3, r3, #21
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d10d      	bne.n	800480e <UART_Start_Receive_IT+0xa2>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d104      	bne.n	8004804 <UART_Start_Receive_IT+0x98>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	225c      	movs	r2, #92	; 0x5c
 80047fe:	217f      	movs	r1, #127	; 0x7f
 8004800:	5299      	strh	r1, [r3, r2]
 8004802:	e008      	b.n	8004816 <UART_Start_Receive_IT+0xaa>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	225c      	movs	r2, #92	; 0x5c
 8004808:	213f      	movs	r1, #63	; 0x3f
 800480a:	5299      	strh	r1, [r3, r2]
 800480c:	e003      	b.n	8004816 <UART_Start_Receive_IT+0xaa>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	225c      	movs	r2, #92	; 0x5c
 8004812:	2100      	movs	r1, #0
 8004814:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2280      	movs	r2, #128	; 0x80
 800481a:	2100      	movs	r1, #0
 800481c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2222      	movs	r2, #34	; 0x22
 8004822:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004824:	f3ef 8310 	mrs	r3, PRIMASK
 8004828:	61fb      	str	r3, [r7, #28]
  return(result);
 800482a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800482c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800482e:	2301      	movs	r3, #1
 8004830:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	f383 8810 	msr	PRIMASK, r3
}
 8004838:	46c0      	nop			; (mov r8, r8)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2101      	movs	r1, #1
 8004846:	430a      	orrs	r2, r1
 8004848:	609a      	str	r2, [r3, #8]
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	f383 8810 	msr	PRIMASK, r3
}
 8004854:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	2380      	movs	r3, #128	; 0x80
 800485c:	015b      	lsls	r3, r3, #5
 800485e:	429a      	cmp	r2, r3
 8004860:	d107      	bne.n	8004872 <UART_Start_Receive_IT+0x106>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d103      	bne.n	8004872 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4a15      	ldr	r2, [pc, #84]	; (80048c4 <UART_Start_Receive_IT+0x158>)
 800486e:	665a      	str	r2, [r3, #100]	; 0x64
 8004870:	e002      	b.n	8004878 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4a14      	ldr	r2, [pc, #80]	; (80048c8 <UART_Start_Receive_IT+0x15c>)
 8004876:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2274      	movs	r2, #116	; 0x74
 800487c:	2100      	movs	r1, #0
 800487e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004880:	f3ef 8310 	mrs	r3, PRIMASK
 8004884:	613b      	str	r3, [r7, #16]
  return(result);
 8004886:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004888:	62bb      	str	r3, [r7, #40]	; 0x28
 800488a:	2301      	movs	r3, #1
 800488c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f383 8810 	msr	PRIMASK, r3
}
 8004894:	46c0      	nop			; (mov r8, r8)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2190      	movs	r1, #144	; 0x90
 80048a2:	0049      	lsls	r1, r1, #1
 80048a4:	430a      	orrs	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	f383 8810 	msr	PRIMASK, r3
}
 80048b2:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	0018      	movs	r0, r3
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b00c      	add	sp, #48	; 0x30
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	000001ff 	.word	0x000001ff
 80048c4:	08004ced 	.word	0x08004ced
 80048c8:	08004b85 	.word	0x08004b85

080048cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b08e      	sub	sp, #56	; 0x38
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d4:	f3ef 8310 	mrs	r3, PRIMASK
 80048d8:	617b      	str	r3, [r7, #20]
  return(result);
 80048da:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048dc:	637b      	str	r3, [r7, #52]	; 0x34
 80048de:	2301      	movs	r3, #1
 80048e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	f383 8810 	msr	PRIMASK, r3
}
 80048e8:	46c0      	nop			; (mov r8, r8)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4925      	ldr	r1, [pc, #148]	; (800498c <UART_EndRxTransfer+0xc0>)
 80048f6:	400a      	ands	r2, r1
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	f383 8810 	msr	PRIMASK, r3
}
 8004904:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004906:	f3ef 8310 	mrs	r3, PRIMASK
 800490a:	623b      	str	r3, [r7, #32]
  return(result);
 800490c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490e:	633b      	str	r3, [r7, #48]	; 0x30
 8004910:	2301      	movs	r3, #1
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	f383 8810 	msr	PRIMASK, r3
}
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2101      	movs	r1, #1
 8004928:	438a      	bics	r2, r1
 800492a:	609a      	str	r2, [r3, #8]
 800492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004932:	f383 8810 	msr	PRIMASK, r3
}
 8004936:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800493c:	2b01      	cmp	r3, #1
 800493e:	d118      	bne.n	8004972 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004940:	f3ef 8310 	mrs	r3, PRIMASK
 8004944:	60bb      	str	r3, [r7, #8]
  return(result);
 8004946:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800494a:	2301      	movs	r3, #1
 800494c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f383 8810 	msr	PRIMASK, r3
}
 8004954:	46c0      	nop			; (mov r8, r8)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2110      	movs	r1, #16
 8004962:	438a      	bics	r2, r1
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004968:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f383 8810 	msr	PRIMASK, r3
}
 8004970:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2220      	movs	r2, #32
 8004976:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004984:	46c0      	nop			; (mov r8, r8)
 8004986:	46bd      	mov	sp, r7
 8004988:	b00e      	add	sp, #56	; 0x38
 800498a:	bd80      	pop	{r7, pc}
 800498c:	fffffedf 	.word	0xfffffedf

08004990 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	225a      	movs	r2, #90	; 0x5a
 80049a2:	2100      	movs	r1, #0
 80049a4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2252      	movs	r2, #82	; 0x52
 80049aa:	2100      	movs	r1, #0
 80049ac:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	0018      	movs	r0, r3
 80049b2:	f7ff fbc7 	bl	8004144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	46bd      	mov	sp, r7
 80049ba:	b004      	add	sp, #16
 80049bc:	bd80      	pop	{r7, pc}

080049be <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b08a      	sub	sp, #40	; 0x28
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ca:	2b21      	cmp	r3, #33	; 0x21
 80049cc:	d14d      	bne.n	8004a6a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2252      	movs	r2, #82	; 0x52
 80049d2:	5a9b      	ldrh	r3, [r3, r2]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d132      	bne.n	8004a40 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049da:	f3ef 8310 	mrs	r3, PRIMASK
 80049de:	60bb      	str	r3, [r7, #8]
  return(result);
 80049e0:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
 80049e4:	2301      	movs	r3, #1
 80049e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f383 8810 	msr	PRIMASK, r3
}
 80049ee:	46c0      	nop			; (mov r8, r8)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2180      	movs	r1, #128	; 0x80
 80049fc:	438a      	bics	r2, r1
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f383 8810 	msr	PRIMASK, r3
}
 8004a0a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a10:	617b      	str	r3, [r7, #20]
  return(result);
 8004a12:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a14:	623b      	str	r3, [r7, #32]
 8004a16:	2301      	movs	r3, #1
 8004a18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	f383 8810 	msr	PRIMASK, r3
}
 8004a20:	46c0      	nop			; (mov r8, r8)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2140      	movs	r1, #64	; 0x40
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	f383 8810 	msr	PRIMASK, r3
}
 8004a3c:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004a3e:	e014      	b.n	8004a6a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a44:	781a      	ldrb	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	b292      	uxth	r2, r2
 8004a4c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2252      	movs	r2, #82	; 0x52
 8004a5c:	5a9b      	ldrh	r3, [r3, r2]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b299      	uxth	r1, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2252      	movs	r2, #82	; 0x52
 8004a68:	5299      	strh	r1, [r3, r2]
}
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	b00a      	add	sp, #40	; 0x28
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b08c      	sub	sp, #48	; 0x30
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a7e:	2b21      	cmp	r3, #33	; 0x21
 8004a80:	d151      	bne.n	8004b26 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2252      	movs	r2, #82	; 0x52
 8004a86:	5a9b      	ldrh	r3, [r3, r2]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d132      	bne.n	8004af4 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a92:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a94:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a98:	2301      	movs	r3, #1
 8004a9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f383 8810 	msr	PRIMASK, r3
}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2180      	movs	r1, #128	; 0x80
 8004ab0:	438a      	bics	r2, r1
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f383 8810 	msr	PRIMASK, r3
}
 8004abe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ac4:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ac6:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aca:	2301      	movs	r3, #1
 8004acc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	f383 8810 	msr	PRIMASK, r3
}
 8004ad4:	46c0      	nop			; (mov r8, r8)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2140      	movs	r1, #64	; 0x40
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	f383 8810 	msr	PRIMASK, r3
}
 8004af0:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004af2:	e018      	b.n	8004b26 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afc:	881a      	ldrh	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	05d2      	lsls	r2, r2, #23
 8004b04:	0dd2      	lsrs	r2, r2, #23
 8004b06:	b292      	uxth	r2, r2
 8004b08:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0e:	1c9a      	adds	r2, r3, #2
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2252      	movs	r2, #82	; 0x52
 8004b18:	5a9b      	ldrh	r3, [r3, r2]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b299      	uxth	r1, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2252      	movs	r2, #82	; 0x52
 8004b24:	5299      	strh	r1, [r3, r2]
}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	b00c      	add	sp, #48	; 0x30
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b086      	sub	sp, #24
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b36:	f3ef 8310 	mrs	r3, PRIMASK
 8004b3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	2301      	movs	r3, #1
 8004b42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f383 8810 	msr	PRIMASK, r3
}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2140      	movs	r1, #64	; 0x40
 8004b58:	438a      	bics	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f383 8810 	msr	PRIMASK, r3
}
 8004b66:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	0018      	movs	r0, r3
 8004b78:	f7ff fadc 	bl	8004134 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b7c:	46c0      	nop			; (mov r8, r8)
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	b006      	add	sp, #24
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b090      	sub	sp, #64	; 0x40
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004b8c:	203e      	movs	r0, #62	; 0x3e
 8004b8e:	183b      	adds	r3, r7, r0
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	215c      	movs	r1, #92	; 0x5c
 8004b94:	5a52      	ldrh	r2, [r2, r1]
 8004b96:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b9c:	2b22      	cmp	r3, #34	; 0x22
 8004b9e:	d000      	beq.n	8004ba2 <UART_RxISR_8BIT+0x1e>
 8004ba0:	e095      	b.n	8004cce <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	213c      	movs	r1, #60	; 0x3c
 8004ba8:	187b      	adds	r3, r7, r1
 8004baa:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004bac:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004bae:	187b      	adds	r3, r7, r1
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	183b      	adds	r3, r7, r0
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	b2d9      	uxtb	r1, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbe:	400a      	ands	r2, r1
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	225a      	movs	r2, #90	; 0x5a
 8004bd2:	5a9b      	ldrh	r3, [r3, r2]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b299      	uxth	r1, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	225a      	movs	r2, #90	; 0x5a
 8004bde:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	225a      	movs	r2, #90	; 0x5a
 8004be4:	5a9b      	ldrh	r3, [r3, r2]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d178      	bne.n	8004cde <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bec:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004bf2:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	f383 8810 	msr	PRIMASK, r3
}
 8004c00:	46c0      	nop			; (mov r8, r8)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4936      	ldr	r1, [pc, #216]	; (8004ce8 <UART_RxISR_8BIT+0x164>)
 8004c0e:	400a      	ands	r2, r1
 8004c10:	601a      	str	r2, [r3, #0]
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	f383 8810 	msr	PRIMASK, r3
}
 8004c1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c26:	637b      	str	r3, [r7, #52]	; 0x34
 8004c28:	2301      	movs	r3, #1
 8004c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2e:	f383 8810 	msr	PRIMASK, r3
}
 8004c32:	46c0      	nop			; (mov r8, r8)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2101      	movs	r1, #1
 8004c40:	438a      	bics	r2, r1
 8004c42:	609a      	str	r2, [r3, #8]
 8004c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4a:	f383 8810 	msr	PRIMASK, r3
}
 8004c4e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2220      	movs	r2, #32
 8004c54:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d12f      	bne.n	8004cc4 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c70:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c72:	633b      	str	r3, [r7, #48]	; 0x30
 8004c74:	2301      	movs	r3, #1
 8004c76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f383 8810 	msr	PRIMASK, r3
}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2110      	movs	r1, #16
 8004c8c:	438a      	bics	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f383 8810 	msr	PRIMASK, r3
}
 8004c9a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	2210      	movs	r2, #16
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	2b10      	cmp	r3, #16
 8004ca8:	d103      	bne.n	8004cb2 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2210      	movs	r2, #16
 8004cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2258      	movs	r2, #88	; 0x58
 8004cb6:	5a9a      	ldrh	r2, [r3, r2]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	0011      	movs	r1, r2
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f7ff fa49 	bl	8004154 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004cc2:	e00c      	b.n	8004cde <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f7fb ffc6 	bl	8000c58 <HAL_UART_RxCpltCallback>
}
 8004ccc:	e007      	b.n	8004cde <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699a      	ldr	r2, [r3, #24]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2108      	movs	r1, #8
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	619a      	str	r2, [r3, #24]
}
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	b010      	add	sp, #64	; 0x40
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	fffffedf 	.word	0xfffffedf

08004cec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b090      	sub	sp, #64	; 0x40
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004cf4:	203e      	movs	r0, #62	; 0x3e
 8004cf6:	183b      	adds	r3, r7, r0
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	215c      	movs	r1, #92	; 0x5c
 8004cfc:	5a52      	ldrh	r2, [r2, r1]
 8004cfe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d04:	2b22      	cmp	r3, #34	; 0x22
 8004d06:	d000      	beq.n	8004d0a <UART_RxISR_16BIT+0x1e>
 8004d08:	e095      	b.n	8004e36 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	213c      	movs	r1, #60	; 0x3c
 8004d10:	187b      	adds	r3, r7, r1
 8004d12:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004d14:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1a:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8004d1c:	187b      	adds	r3, r7, r1
 8004d1e:	183a      	adds	r2, r7, r0
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	8812      	ldrh	r2, [r2, #0]
 8004d24:	4013      	ands	r3, r2
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d30:	1c9a      	adds	r2, r3, #2
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	225a      	movs	r2, #90	; 0x5a
 8004d3a:	5a9b      	ldrh	r3, [r3, r2]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b299      	uxth	r1, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	225a      	movs	r2, #90	; 0x5a
 8004d46:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	225a      	movs	r2, #90	; 0x5a
 8004d4c:	5a9b      	ldrh	r3, [r3, r2]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d178      	bne.n	8004e46 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d54:	f3ef 8310 	mrs	r3, PRIMASK
 8004d58:	617b      	str	r3, [r7, #20]
  return(result);
 8004d5a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d5e:	2301      	movs	r3, #1
 8004d60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	f383 8810 	msr	PRIMASK, r3
}
 8004d68:	46c0      	nop			; (mov r8, r8)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4936      	ldr	r1, [pc, #216]	; (8004e50 <UART_RxISR_16BIT+0x164>)
 8004d76:	400a      	ands	r2, r1
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f383 8810 	msr	PRIMASK, r3
}
 8004d84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d86:	f3ef 8310 	mrs	r3, PRIMASK
 8004d8a:	623b      	str	r3, [r7, #32]
  return(result);
 8004d8c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d8e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d90:	2301      	movs	r3, #1
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	f383 8810 	msr	PRIMASK, r3
}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2101      	movs	r1, #1
 8004da8:	438a      	bics	r2, r1
 8004daa:	609a      	str	r2, [r3, #8]
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	f383 8810 	msr	PRIMASK, r3
}
 8004db6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d12f      	bne.n	8004e2c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8004dd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dd8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ddc:	2301      	movs	r3, #1
 8004dde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f383 8810 	msr	PRIMASK, r3
}
 8004de6:	46c0      	nop			; (mov r8, r8)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2110      	movs	r1, #16
 8004df4:	438a      	bics	r2, r1
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f383 8810 	msr	PRIMASK, r3
}
 8004e02:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	2210      	movs	r2, #16
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	2b10      	cmp	r3, #16
 8004e10:	d103      	bne.n	8004e1a <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2210      	movs	r2, #16
 8004e18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2258      	movs	r2, #88	; 0x58
 8004e1e:	5a9a      	ldrh	r2, [r3, r2]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	0011      	movs	r1, r2
 8004e24:	0018      	movs	r0, r3
 8004e26:	f7ff f995 	bl	8004154 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e2a:	e00c      	b.n	8004e46 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f7fb ff12 	bl	8000c58 <HAL_UART_RxCpltCallback>
}
 8004e34:	e007      	b.n	8004e46 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699a      	ldr	r2, [r3, #24]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2108      	movs	r1, #8
 8004e42:	430a      	orrs	r2, r1
 8004e44:	619a      	str	r2, [r3, #24]
}
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b010      	add	sp, #64	; 0x40
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	fffffedf 	.word	0xfffffedf

08004e54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e5c:	46c0      	nop			; (mov r8, r8)
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	b002      	add	sp, #8
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <__errno>:
 8004e64:	4b01      	ldr	r3, [pc, #4]	; (8004e6c <__errno+0x8>)
 8004e66:	6818      	ldr	r0, [r3, #0]
 8004e68:	4770      	bx	lr
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	2000000c 	.word	0x2000000c

08004e70 <__libc_init_array>:
 8004e70:	b570      	push	{r4, r5, r6, lr}
 8004e72:	2600      	movs	r6, #0
 8004e74:	4d0c      	ldr	r5, [pc, #48]	; (8004ea8 <__libc_init_array+0x38>)
 8004e76:	4c0d      	ldr	r4, [pc, #52]	; (8004eac <__libc_init_array+0x3c>)
 8004e78:	1b64      	subs	r4, r4, r5
 8004e7a:	10a4      	asrs	r4, r4, #2
 8004e7c:	42a6      	cmp	r6, r4
 8004e7e:	d109      	bne.n	8004e94 <__libc_init_array+0x24>
 8004e80:	2600      	movs	r6, #0
 8004e82:	f001 f875 	bl	8005f70 <_init>
 8004e86:	4d0a      	ldr	r5, [pc, #40]	; (8004eb0 <__libc_init_array+0x40>)
 8004e88:	4c0a      	ldr	r4, [pc, #40]	; (8004eb4 <__libc_init_array+0x44>)
 8004e8a:	1b64      	subs	r4, r4, r5
 8004e8c:	10a4      	asrs	r4, r4, #2
 8004e8e:	42a6      	cmp	r6, r4
 8004e90:	d105      	bne.n	8004e9e <__libc_init_array+0x2e>
 8004e92:	bd70      	pop	{r4, r5, r6, pc}
 8004e94:	00b3      	lsls	r3, r6, #2
 8004e96:	58eb      	ldr	r3, [r5, r3]
 8004e98:	4798      	blx	r3
 8004e9a:	3601      	adds	r6, #1
 8004e9c:	e7ee      	b.n	8004e7c <__libc_init_array+0xc>
 8004e9e:	00b3      	lsls	r3, r6, #2
 8004ea0:	58eb      	ldr	r3, [r5, r3]
 8004ea2:	4798      	blx	r3
 8004ea4:	3601      	adds	r6, #1
 8004ea6:	e7f2      	b.n	8004e8e <__libc_init_array+0x1e>
 8004ea8:	08006180 	.word	0x08006180
 8004eac:	08006180 	.word	0x08006180
 8004eb0:	08006180 	.word	0x08006180
 8004eb4:	08006184 	.word	0x08006184

08004eb8 <memset>:
 8004eb8:	0003      	movs	r3, r0
 8004eba:	1882      	adds	r2, r0, r2
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d100      	bne.n	8004ec2 <memset+0xa>
 8004ec0:	4770      	bx	lr
 8004ec2:	7019      	strb	r1, [r3, #0]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	e7f9      	b.n	8004ebc <memset+0x4>

08004ec8 <iprintf>:
 8004ec8:	b40f      	push	{r0, r1, r2, r3}
 8004eca:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <iprintf+0x30>)
 8004ecc:	b513      	push	{r0, r1, r4, lr}
 8004ece:	681c      	ldr	r4, [r3, #0]
 8004ed0:	2c00      	cmp	r4, #0
 8004ed2:	d005      	beq.n	8004ee0 <iprintf+0x18>
 8004ed4:	69a3      	ldr	r3, [r4, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d102      	bne.n	8004ee0 <iprintf+0x18>
 8004eda:	0020      	movs	r0, r4
 8004edc:	f000 fa86 	bl	80053ec <__sinit>
 8004ee0:	ab05      	add	r3, sp, #20
 8004ee2:	0020      	movs	r0, r4
 8004ee4:	9a04      	ldr	r2, [sp, #16]
 8004ee6:	68a1      	ldr	r1, [r4, #8]
 8004ee8:	9301      	str	r3, [sp, #4]
 8004eea:	f000 fc99 	bl	8005820 <_vfiprintf_r>
 8004eee:	bc16      	pop	{r1, r2, r4}
 8004ef0:	bc08      	pop	{r3}
 8004ef2:	b004      	add	sp, #16
 8004ef4:	4718      	bx	r3
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	2000000c 	.word	0x2000000c

08004efc <_puts_r>:
 8004efc:	b570      	push	{r4, r5, r6, lr}
 8004efe:	0005      	movs	r5, r0
 8004f00:	000e      	movs	r6, r1
 8004f02:	2800      	cmp	r0, #0
 8004f04:	d004      	beq.n	8004f10 <_puts_r+0x14>
 8004f06:	6983      	ldr	r3, [r0, #24]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <_puts_r+0x14>
 8004f0c:	f000 fa6e 	bl	80053ec <__sinit>
 8004f10:	69ab      	ldr	r3, [r5, #24]
 8004f12:	68ac      	ldr	r4, [r5, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d102      	bne.n	8004f1e <_puts_r+0x22>
 8004f18:	0028      	movs	r0, r5
 8004f1a:	f000 fa67 	bl	80053ec <__sinit>
 8004f1e:	4b2d      	ldr	r3, [pc, #180]	; (8004fd4 <_puts_r+0xd8>)
 8004f20:	429c      	cmp	r4, r3
 8004f22:	d122      	bne.n	8004f6a <_puts_r+0x6e>
 8004f24:	686c      	ldr	r4, [r5, #4]
 8004f26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f28:	07db      	lsls	r3, r3, #31
 8004f2a:	d405      	bmi.n	8004f38 <_puts_r+0x3c>
 8004f2c:	89a3      	ldrh	r3, [r4, #12]
 8004f2e:	059b      	lsls	r3, r3, #22
 8004f30:	d402      	bmi.n	8004f38 <_puts_r+0x3c>
 8004f32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f34:	f000 fafb 	bl	800552e <__retarget_lock_acquire_recursive>
 8004f38:	89a3      	ldrh	r3, [r4, #12]
 8004f3a:	071b      	lsls	r3, r3, #28
 8004f3c:	d502      	bpl.n	8004f44 <_puts_r+0x48>
 8004f3e:	6923      	ldr	r3, [r4, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d129      	bne.n	8004f98 <_puts_r+0x9c>
 8004f44:	0021      	movs	r1, r4
 8004f46:	0028      	movs	r0, r5
 8004f48:	f000 f8aa 	bl	80050a0 <__swsetup_r>
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d023      	beq.n	8004f98 <_puts_r+0x9c>
 8004f50:	2501      	movs	r5, #1
 8004f52:	426d      	negs	r5, r5
 8004f54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f56:	07db      	lsls	r3, r3, #31
 8004f58:	d405      	bmi.n	8004f66 <_puts_r+0x6a>
 8004f5a:	89a3      	ldrh	r3, [r4, #12]
 8004f5c:	059b      	lsls	r3, r3, #22
 8004f5e:	d402      	bmi.n	8004f66 <_puts_r+0x6a>
 8004f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f62:	f000 fae5 	bl	8005530 <__retarget_lock_release_recursive>
 8004f66:	0028      	movs	r0, r5
 8004f68:	bd70      	pop	{r4, r5, r6, pc}
 8004f6a:	4b1b      	ldr	r3, [pc, #108]	; (8004fd8 <_puts_r+0xdc>)
 8004f6c:	429c      	cmp	r4, r3
 8004f6e:	d101      	bne.n	8004f74 <_puts_r+0x78>
 8004f70:	68ac      	ldr	r4, [r5, #8]
 8004f72:	e7d8      	b.n	8004f26 <_puts_r+0x2a>
 8004f74:	4b19      	ldr	r3, [pc, #100]	; (8004fdc <_puts_r+0xe0>)
 8004f76:	429c      	cmp	r4, r3
 8004f78:	d1d5      	bne.n	8004f26 <_puts_r+0x2a>
 8004f7a:	68ec      	ldr	r4, [r5, #12]
 8004f7c:	e7d3      	b.n	8004f26 <_puts_r+0x2a>
 8004f7e:	3601      	adds	r6, #1
 8004f80:	60a3      	str	r3, [r4, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	da04      	bge.n	8004f90 <_puts_r+0x94>
 8004f86:	69a2      	ldr	r2, [r4, #24]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	dc16      	bgt.n	8004fba <_puts_r+0xbe>
 8004f8c:	290a      	cmp	r1, #10
 8004f8e:	d014      	beq.n	8004fba <_puts_r+0xbe>
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	6022      	str	r2, [r4, #0]
 8004f96:	7019      	strb	r1, [r3, #0]
 8004f98:	68a3      	ldr	r3, [r4, #8]
 8004f9a:	7831      	ldrb	r1, [r6, #0]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	2900      	cmp	r1, #0
 8004fa0:	d1ed      	bne.n	8004f7e <_puts_r+0x82>
 8004fa2:	60a3      	str	r3, [r4, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	da0f      	bge.n	8004fc8 <_puts_r+0xcc>
 8004fa8:	0028      	movs	r0, r5
 8004faa:	0022      	movs	r2, r4
 8004fac:	310a      	adds	r1, #10
 8004fae:	f000 f821 	bl	8004ff4 <__swbuf_r>
 8004fb2:	250a      	movs	r5, #10
 8004fb4:	1c43      	adds	r3, r0, #1
 8004fb6:	d1cd      	bne.n	8004f54 <_puts_r+0x58>
 8004fb8:	e7ca      	b.n	8004f50 <_puts_r+0x54>
 8004fba:	0022      	movs	r2, r4
 8004fbc:	0028      	movs	r0, r5
 8004fbe:	f000 f819 	bl	8004ff4 <__swbuf_r>
 8004fc2:	1c43      	adds	r3, r0, #1
 8004fc4:	d1e8      	bne.n	8004f98 <_puts_r+0x9c>
 8004fc6:	e7c3      	b.n	8004f50 <_puts_r+0x54>
 8004fc8:	250a      	movs	r5, #10
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	6022      	str	r2, [r4, #0]
 8004fd0:	701d      	strb	r5, [r3, #0]
 8004fd2:	e7bf      	b.n	8004f54 <_puts_r+0x58>
 8004fd4:	0800610c 	.word	0x0800610c
 8004fd8:	0800612c 	.word	0x0800612c
 8004fdc:	080060ec 	.word	0x080060ec

08004fe0 <puts>:
 8004fe0:	b510      	push	{r4, lr}
 8004fe2:	4b03      	ldr	r3, [pc, #12]	; (8004ff0 <puts+0x10>)
 8004fe4:	0001      	movs	r1, r0
 8004fe6:	6818      	ldr	r0, [r3, #0]
 8004fe8:	f7ff ff88 	bl	8004efc <_puts_r>
 8004fec:	bd10      	pop	{r4, pc}
 8004fee:	46c0      	nop			; (mov r8, r8)
 8004ff0:	2000000c 	.word	0x2000000c

08004ff4 <__swbuf_r>:
 8004ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff6:	0005      	movs	r5, r0
 8004ff8:	000e      	movs	r6, r1
 8004ffa:	0014      	movs	r4, r2
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d004      	beq.n	800500a <__swbuf_r+0x16>
 8005000:	6983      	ldr	r3, [r0, #24]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <__swbuf_r+0x16>
 8005006:	f000 f9f1 	bl	80053ec <__sinit>
 800500a:	4b22      	ldr	r3, [pc, #136]	; (8005094 <__swbuf_r+0xa0>)
 800500c:	429c      	cmp	r4, r3
 800500e:	d12e      	bne.n	800506e <__swbuf_r+0x7a>
 8005010:	686c      	ldr	r4, [r5, #4]
 8005012:	69a3      	ldr	r3, [r4, #24]
 8005014:	60a3      	str	r3, [r4, #8]
 8005016:	89a3      	ldrh	r3, [r4, #12]
 8005018:	071b      	lsls	r3, r3, #28
 800501a:	d532      	bpl.n	8005082 <__swbuf_r+0x8e>
 800501c:	6923      	ldr	r3, [r4, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d02f      	beq.n	8005082 <__swbuf_r+0x8e>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	6922      	ldr	r2, [r4, #16]
 8005026:	b2f7      	uxtb	r7, r6
 8005028:	1a98      	subs	r0, r3, r2
 800502a:	6963      	ldr	r3, [r4, #20]
 800502c:	b2f6      	uxtb	r6, r6
 800502e:	4283      	cmp	r3, r0
 8005030:	dc05      	bgt.n	800503e <__swbuf_r+0x4a>
 8005032:	0021      	movs	r1, r4
 8005034:	0028      	movs	r0, r5
 8005036:	f000 f937 	bl	80052a8 <_fflush_r>
 800503a:	2800      	cmp	r0, #0
 800503c:	d127      	bne.n	800508e <__swbuf_r+0x9a>
 800503e:	68a3      	ldr	r3, [r4, #8]
 8005040:	3001      	adds	r0, #1
 8005042:	3b01      	subs	r3, #1
 8005044:	60a3      	str	r3, [r4, #8]
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	6022      	str	r2, [r4, #0]
 800504c:	701f      	strb	r7, [r3, #0]
 800504e:	6963      	ldr	r3, [r4, #20]
 8005050:	4283      	cmp	r3, r0
 8005052:	d004      	beq.n	800505e <__swbuf_r+0x6a>
 8005054:	89a3      	ldrh	r3, [r4, #12]
 8005056:	07db      	lsls	r3, r3, #31
 8005058:	d507      	bpl.n	800506a <__swbuf_r+0x76>
 800505a:	2e0a      	cmp	r6, #10
 800505c:	d105      	bne.n	800506a <__swbuf_r+0x76>
 800505e:	0021      	movs	r1, r4
 8005060:	0028      	movs	r0, r5
 8005062:	f000 f921 	bl	80052a8 <_fflush_r>
 8005066:	2800      	cmp	r0, #0
 8005068:	d111      	bne.n	800508e <__swbuf_r+0x9a>
 800506a:	0030      	movs	r0, r6
 800506c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800506e:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <__swbuf_r+0xa4>)
 8005070:	429c      	cmp	r4, r3
 8005072:	d101      	bne.n	8005078 <__swbuf_r+0x84>
 8005074:	68ac      	ldr	r4, [r5, #8]
 8005076:	e7cc      	b.n	8005012 <__swbuf_r+0x1e>
 8005078:	4b08      	ldr	r3, [pc, #32]	; (800509c <__swbuf_r+0xa8>)
 800507a:	429c      	cmp	r4, r3
 800507c:	d1c9      	bne.n	8005012 <__swbuf_r+0x1e>
 800507e:	68ec      	ldr	r4, [r5, #12]
 8005080:	e7c7      	b.n	8005012 <__swbuf_r+0x1e>
 8005082:	0021      	movs	r1, r4
 8005084:	0028      	movs	r0, r5
 8005086:	f000 f80b 	bl	80050a0 <__swsetup_r>
 800508a:	2800      	cmp	r0, #0
 800508c:	d0c9      	beq.n	8005022 <__swbuf_r+0x2e>
 800508e:	2601      	movs	r6, #1
 8005090:	4276      	negs	r6, r6
 8005092:	e7ea      	b.n	800506a <__swbuf_r+0x76>
 8005094:	0800610c 	.word	0x0800610c
 8005098:	0800612c 	.word	0x0800612c
 800509c:	080060ec 	.word	0x080060ec

080050a0 <__swsetup_r>:
 80050a0:	4b37      	ldr	r3, [pc, #220]	; (8005180 <__swsetup_r+0xe0>)
 80050a2:	b570      	push	{r4, r5, r6, lr}
 80050a4:	681d      	ldr	r5, [r3, #0]
 80050a6:	0006      	movs	r6, r0
 80050a8:	000c      	movs	r4, r1
 80050aa:	2d00      	cmp	r5, #0
 80050ac:	d005      	beq.n	80050ba <__swsetup_r+0x1a>
 80050ae:	69ab      	ldr	r3, [r5, #24]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d102      	bne.n	80050ba <__swsetup_r+0x1a>
 80050b4:	0028      	movs	r0, r5
 80050b6:	f000 f999 	bl	80053ec <__sinit>
 80050ba:	4b32      	ldr	r3, [pc, #200]	; (8005184 <__swsetup_r+0xe4>)
 80050bc:	429c      	cmp	r4, r3
 80050be:	d10f      	bne.n	80050e0 <__swsetup_r+0x40>
 80050c0:	686c      	ldr	r4, [r5, #4]
 80050c2:	230c      	movs	r3, #12
 80050c4:	5ee2      	ldrsh	r2, [r4, r3]
 80050c6:	b293      	uxth	r3, r2
 80050c8:	0711      	lsls	r1, r2, #28
 80050ca:	d42d      	bmi.n	8005128 <__swsetup_r+0x88>
 80050cc:	06d9      	lsls	r1, r3, #27
 80050ce:	d411      	bmi.n	80050f4 <__swsetup_r+0x54>
 80050d0:	2309      	movs	r3, #9
 80050d2:	2001      	movs	r0, #1
 80050d4:	6033      	str	r3, [r6, #0]
 80050d6:	3337      	adds	r3, #55	; 0x37
 80050d8:	4313      	orrs	r3, r2
 80050da:	81a3      	strh	r3, [r4, #12]
 80050dc:	4240      	negs	r0, r0
 80050de:	bd70      	pop	{r4, r5, r6, pc}
 80050e0:	4b29      	ldr	r3, [pc, #164]	; (8005188 <__swsetup_r+0xe8>)
 80050e2:	429c      	cmp	r4, r3
 80050e4:	d101      	bne.n	80050ea <__swsetup_r+0x4a>
 80050e6:	68ac      	ldr	r4, [r5, #8]
 80050e8:	e7eb      	b.n	80050c2 <__swsetup_r+0x22>
 80050ea:	4b28      	ldr	r3, [pc, #160]	; (800518c <__swsetup_r+0xec>)
 80050ec:	429c      	cmp	r4, r3
 80050ee:	d1e8      	bne.n	80050c2 <__swsetup_r+0x22>
 80050f0:	68ec      	ldr	r4, [r5, #12]
 80050f2:	e7e6      	b.n	80050c2 <__swsetup_r+0x22>
 80050f4:	075b      	lsls	r3, r3, #29
 80050f6:	d513      	bpl.n	8005120 <__swsetup_r+0x80>
 80050f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050fa:	2900      	cmp	r1, #0
 80050fc:	d008      	beq.n	8005110 <__swsetup_r+0x70>
 80050fe:	0023      	movs	r3, r4
 8005100:	3344      	adds	r3, #68	; 0x44
 8005102:	4299      	cmp	r1, r3
 8005104:	d002      	beq.n	800510c <__swsetup_r+0x6c>
 8005106:	0030      	movs	r0, r6
 8005108:	f000 fa80 	bl	800560c <_free_r>
 800510c:	2300      	movs	r3, #0
 800510e:	6363      	str	r3, [r4, #52]	; 0x34
 8005110:	2224      	movs	r2, #36	; 0x24
 8005112:	89a3      	ldrh	r3, [r4, #12]
 8005114:	4393      	bics	r3, r2
 8005116:	81a3      	strh	r3, [r4, #12]
 8005118:	2300      	movs	r3, #0
 800511a:	6063      	str	r3, [r4, #4]
 800511c:	6923      	ldr	r3, [r4, #16]
 800511e:	6023      	str	r3, [r4, #0]
 8005120:	2308      	movs	r3, #8
 8005122:	89a2      	ldrh	r2, [r4, #12]
 8005124:	4313      	orrs	r3, r2
 8005126:	81a3      	strh	r3, [r4, #12]
 8005128:	6923      	ldr	r3, [r4, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10b      	bne.n	8005146 <__swsetup_r+0xa6>
 800512e:	21a0      	movs	r1, #160	; 0xa0
 8005130:	2280      	movs	r2, #128	; 0x80
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	0089      	lsls	r1, r1, #2
 8005136:	0092      	lsls	r2, r2, #2
 8005138:	400b      	ands	r3, r1
 800513a:	4293      	cmp	r3, r2
 800513c:	d003      	beq.n	8005146 <__swsetup_r+0xa6>
 800513e:	0021      	movs	r1, r4
 8005140:	0030      	movs	r0, r6
 8005142:	f000 fa1f 	bl	8005584 <__smakebuf_r>
 8005146:	220c      	movs	r2, #12
 8005148:	5ea3      	ldrsh	r3, [r4, r2]
 800514a:	2001      	movs	r0, #1
 800514c:	001a      	movs	r2, r3
 800514e:	b299      	uxth	r1, r3
 8005150:	4002      	ands	r2, r0
 8005152:	4203      	tst	r3, r0
 8005154:	d00f      	beq.n	8005176 <__swsetup_r+0xd6>
 8005156:	2200      	movs	r2, #0
 8005158:	60a2      	str	r2, [r4, #8]
 800515a:	6962      	ldr	r2, [r4, #20]
 800515c:	4252      	negs	r2, r2
 800515e:	61a2      	str	r2, [r4, #24]
 8005160:	2000      	movs	r0, #0
 8005162:	6922      	ldr	r2, [r4, #16]
 8005164:	4282      	cmp	r2, r0
 8005166:	d1ba      	bne.n	80050de <__swsetup_r+0x3e>
 8005168:	060a      	lsls	r2, r1, #24
 800516a:	d5b8      	bpl.n	80050de <__swsetup_r+0x3e>
 800516c:	2240      	movs	r2, #64	; 0x40
 800516e:	4313      	orrs	r3, r2
 8005170:	81a3      	strh	r3, [r4, #12]
 8005172:	3801      	subs	r0, #1
 8005174:	e7b3      	b.n	80050de <__swsetup_r+0x3e>
 8005176:	0788      	lsls	r0, r1, #30
 8005178:	d400      	bmi.n	800517c <__swsetup_r+0xdc>
 800517a:	6962      	ldr	r2, [r4, #20]
 800517c:	60a2      	str	r2, [r4, #8]
 800517e:	e7ef      	b.n	8005160 <__swsetup_r+0xc0>
 8005180:	2000000c 	.word	0x2000000c
 8005184:	0800610c 	.word	0x0800610c
 8005188:	0800612c 	.word	0x0800612c
 800518c:	080060ec 	.word	0x080060ec

08005190 <__sflush_r>:
 8005190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005192:	898b      	ldrh	r3, [r1, #12]
 8005194:	0005      	movs	r5, r0
 8005196:	000c      	movs	r4, r1
 8005198:	071a      	lsls	r2, r3, #28
 800519a:	d45f      	bmi.n	800525c <__sflush_r+0xcc>
 800519c:	684a      	ldr	r2, [r1, #4]
 800519e:	2a00      	cmp	r2, #0
 80051a0:	dc04      	bgt.n	80051ac <__sflush_r+0x1c>
 80051a2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80051a4:	2a00      	cmp	r2, #0
 80051a6:	dc01      	bgt.n	80051ac <__sflush_r+0x1c>
 80051a8:	2000      	movs	r0, #0
 80051aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051ac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80051ae:	2f00      	cmp	r7, #0
 80051b0:	d0fa      	beq.n	80051a8 <__sflush_r+0x18>
 80051b2:	2200      	movs	r2, #0
 80051b4:	2180      	movs	r1, #128	; 0x80
 80051b6:	682e      	ldr	r6, [r5, #0]
 80051b8:	602a      	str	r2, [r5, #0]
 80051ba:	001a      	movs	r2, r3
 80051bc:	0149      	lsls	r1, r1, #5
 80051be:	400a      	ands	r2, r1
 80051c0:	420b      	tst	r3, r1
 80051c2:	d034      	beq.n	800522e <__sflush_r+0x9e>
 80051c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80051c6:	89a3      	ldrh	r3, [r4, #12]
 80051c8:	075b      	lsls	r3, r3, #29
 80051ca:	d506      	bpl.n	80051da <__sflush_r+0x4a>
 80051cc:	6863      	ldr	r3, [r4, #4]
 80051ce:	1ac0      	subs	r0, r0, r3
 80051d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <__sflush_r+0x4a>
 80051d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051d8:	1ac0      	subs	r0, r0, r3
 80051da:	0002      	movs	r2, r0
 80051dc:	6a21      	ldr	r1, [r4, #32]
 80051de:	2300      	movs	r3, #0
 80051e0:	0028      	movs	r0, r5
 80051e2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80051e4:	47b8      	blx	r7
 80051e6:	89a1      	ldrh	r1, [r4, #12]
 80051e8:	1c43      	adds	r3, r0, #1
 80051ea:	d106      	bne.n	80051fa <__sflush_r+0x6a>
 80051ec:	682b      	ldr	r3, [r5, #0]
 80051ee:	2b1d      	cmp	r3, #29
 80051f0:	d831      	bhi.n	8005256 <__sflush_r+0xc6>
 80051f2:	4a2c      	ldr	r2, [pc, #176]	; (80052a4 <__sflush_r+0x114>)
 80051f4:	40da      	lsrs	r2, r3
 80051f6:	07d3      	lsls	r3, r2, #31
 80051f8:	d52d      	bpl.n	8005256 <__sflush_r+0xc6>
 80051fa:	2300      	movs	r3, #0
 80051fc:	6063      	str	r3, [r4, #4]
 80051fe:	6923      	ldr	r3, [r4, #16]
 8005200:	6023      	str	r3, [r4, #0]
 8005202:	04cb      	lsls	r3, r1, #19
 8005204:	d505      	bpl.n	8005212 <__sflush_r+0x82>
 8005206:	1c43      	adds	r3, r0, #1
 8005208:	d102      	bne.n	8005210 <__sflush_r+0x80>
 800520a:	682b      	ldr	r3, [r5, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d100      	bne.n	8005212 <__sflush_r+0x82>
 8005210:	6560      	str	r0, [r4, #84]	; 0x54
 8005212:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005214:	602e      	str	r6, [r5, #0]
 8005216:	2900      	cmp	r1, #0
 8005218:	d0c6      	beq.n	80051a8 <__sflush_r+0x18>
 800521a:	0023      	movs	r3, r4
 800521c:	3344      	adds	r3, #68	; 0x44
 800521e:	4299      	cmp	r1, r3
 8005220:	d002      	beq.n	8005228 <__sflush_r+0x98>
 8005222:	0028      	movs	r0, r5
 8005224:	f000 f9f2 	bl	800560c <_free_r>
 8005228:	2000      	movs	r0, #0
 800522a:	6360      	str	r0, [r4, #52]	; 0x34
 800522c:	e7bd      	b.n	80051aa <__sflush_r+0x1a>
 800522e:	2301      	movs	r3, #1
 8005230:	0028      	movs	r0, r5
 8005232:	6a21      	ldr	r1, [r4, #32]
 8005234:	47b8      	blx	r7
 8005236:	1c43      	adds	r3, r0, #1
 8005238:	d1c5      	bne.n	80051c6 <__sflush_r+0x36>
 800523a:	682b      	ldr	r3, [r5, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0c2      	beq.n	80051c6 <__sflush_r+0x36>
 8005240:	2b1d      	cmp	r3, #29
 8005242:	d001      	beq.n	8005248 <__sflush_r+0xb8>
 8005244:	2b16      	cmp	r3, #22
 8005246:	d101      	bne.n	800524c <__sflush_r+0xbc>
 8005248:	602e      	str	r6, [r5, #0]
 800524a:	e7ad      	b.n	80051a8 <__sflush_r+0x18>
 800524c:	2340      	movs	r3, #64	; 0x40
 800524e:	89a2      	ldrh	r2, [r4, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	81a3      	strh	r3, [r4, #12]
 8005254:	e7a9      	b.n	80051aa <__sflush_r+0x1a>
 8005256:	2340      	movs	r3, #64	; 0x40
 8005258:	430b      	orrs	r3, r1
 800525a:	e7fa      	b.n	8005252 <__sflush_r+0xc2>
 800525c:	690f      	ldr	r7, [r1, #16]
 800525e:	2f00      	cmp	r7, #0
 8005260:	d0a2      	beq.n	80051a8 <__sflush_r+0x18>
 8005262:	680a      	ldr	r2, [r1, #0]
 8005264:	600f      	str	r7, [r1, #0]
 8005266:	1bd2      	subs	r2, r2, r7
 8005268:	9201      	str	r2, [sp, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	079b      	lsls	r3, r3, #30
 800526e:	d100      	bne.n	8005272 <__sflush_r+0xe2>
 8005270:	694a      	ldr	r2, [r1, #20]
 8005272:	60a2      	str	r2, [r4, #8]
 8005274:	9b01      	ldr	r3, [sp, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	dc00      	bgt.n	800527c <__sflush_r+0xec>
 800527a:	e795      	b.n	80051a8 <__sflush_r+0x18>
 800527c:	003a      	movs	r2, r7
 800527e:	0028      	movs	r0, r5
 8005280:	9b01      	ldr	r3, [sp, #4]
 8005282:	6a21      	ldr	r1, [r4, #32]
 8005284:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005286:	47b0      	blx	r6
 8005288:	2800      	cmp	r0, #0
 800528a:	dc06      	bgt.n	800529a <__sflush_r+0x10a>
 800528c:	2340      	movs	r3, #64	; 0x40
 800528e:	2001      	movs	r0, #1
 8005290:	89a2      	ldrh	r2, [r4, #12]
 8005292:	4240      	negs	r0, r0
 8005294:	4313      	orrs	r3, r2
 8005296:	81a3      	strh	r3, [r4, #12]
 8005298:	e787      	b.n	80051aa <__sflush_r+0x1a>
 800529a:	9b01      	ldr	r3, [sp, #4]
 800529c:	183f      	adds	r7, r7, r0
 800529e:	1a1b      	subs	r3, r3, r0
 80052a0:	9301      	str	r3, [sp, #4]
 80052a2:	e7e7      	b.n	8005274 <__sflush_r+0xe4>
 80052a4:	20400001 	.word	0x20400001

080052a8 <_fflush_r>:
 80052a8:	690b      	ldr	r3, [r1, #16]
 80052aa:	b570      	push	{r4, r5, r6, lr}
 80052ac:	0005      	movs	r5, r0
 80052ae:	000c      	movs	r4, r1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d102      	bne.n	80052ba <_fflush_r+0x12>
 80052b4:	2500      	movs	r5, #0
 80052b6:	0028      	movs	r0, r5
 80052b8:	bd70      	pop	{r4, r5, r6, pc}
 80052ba:	2800      	cmp	r0, #0
 80052bc:	d004      	beq.n	80052c8 <_fflush_r+0x20>
 80052be:	6983      	ldr	r3, [r0, #24]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <_fflush_r+0x20>
 80052c4:	f000 f892 	bl	80053ec <__sinit>
 80052c8:	4b14      	ldr	r3, [pc, #80]	; (800531c <_fflush_r+0x74>)
 80052ca:	429c      	cmp	r4, r3
 80052cc:	d11b      	bne.n	8005306 <_fflush_r+0x5e>
 80052ce:	686c      	ldr	r4, [r5, #4]
 80052d0:	220c      	movs	r2, #12
 80052d2:	5ea3      	ldrsh	r3, [r4, r2]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0ed      	beq.n	80052b4 <_fflush_r+0xc>
 80052d8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80052da:	07d2      	lsls	r2, r2, #31
 80052dc:	d404      	bmi.n	80052e8 <_fflush_r+0x40>
 80052de:	059b      	lsls	r3, r3, #22
 80052e0:	d402      	bmi.n	80052e8 <_fflush_r+0x40>
 80052e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052e4:	f000 f923 	bl	800552e <__retarget_lock_acquire_recursive>
 80052e8:	0028      	movs	r0, r5
 80052ea:	0021      	movs	r1, r4
 80052ec:	f7ff ff50 	bl	8005190 <__sflush_r>
 80052f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052f2:	0005      	movs	r5, r0
 80052f4:	07db      	lsls	r3, r3, #31
 80052f6:	d4de      	bmi.n	80052b6 <_fflush_r+0xe>
 80052f8:	89a3      	ldrh	r3, [r4, #12]
 80052fa:	059b      	lsls	r3, r3, #22
 80052fc:	d4db      	bmi.n	80052b6 <_fflush_r+0xe>
 80052fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005300:	f000 f916 	bl	8005530 <__retarget_lock_release_recursive>
 8005304:	e7d7      	b.n	80052b6 <_fflush_r+0xe>
 8005306:	4b06      	ldr	r3, [pc, #24]	; (8005320 <_fflush_r+0x78>)
 8005308:	429c      	cmp	r4, r3
 800530a:	d101      	bne.n	8005310 <_fflush_r+0x68>
 800530c:	68ac      	ldr	r4, [r5, #8]
 800530e:	e7df      	b.n	80052d0 <_fflush_r+0x28>
 8005310:	4b04      	ldr	r3, [pc, #16]	; (8005324 <_fflush_r+0x7c>)
 8005312:	429c      	cmp	r4, r3
 8005314:	d1dc      	bne.n	80052d0 <_fflush_r+0x28>
 8005316:	68ec      	ldr	r4, [r5, #12]
 8005318:	e7da      	b.n	80052d0 <_fflush_r+0x28>
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	0800610c 	.word	0x0800610c
 8005320:	0800612c 	.word	0x0800612c
 8005324:	080060ec 	.word	0x080060ec

08005328 <std>:
 8005328:	2300      	movs	r3, #0
 800532a:	b510      	push	{r4, lr}
 800532c:	0004      	movs	r4, r0
 800532e:	6003      	str	r3, [r0, #0]
 8005330:	6043      	str	r3, [r0, #4]
 8005332:	6083      	str	r3, [r0, #8]
 8005334:	8181      	strh	r1, [r0, #12]
 8005336:	6643      	str	r3, [r0, #100]	; 0x64
 8005338:	0019      	movs	r1, r3
 800533a:	81c2      	strh	r2, [r0, #14]
 800533c:	6103      	str	r3, [r0, #16]
 800533e:	6143      	str	r3, [r0, #20]
 8005340:	6183      	str	r3, [r0, #24]
 8005342:	2208      	movs	r2, #8
 8005344:	305c      	adds	r0, #92	; 0x5c
 8005346:	f7ff fdb7 	bl	8004eb8 <memset>
 800534a:	4b05      	ldr	r3, [pc, #20]	; (8005360 <std+0x38>)
 800534c:	6224      	str	r4, [r4, #32]
 800534e:	6263      	str	r3, [r4, #36]	; 0x24
 8005350:	4b04      	ldr	r3, [pc, #16]	; (8005364 <std+0x3c>)
 8005352:	62a3      	str	r3, [r4, #40]	; 0x28
 8005354:	4b04      	ldr	r3, [pc, #16]	; (8005368 <std+0x40>)
 8005356:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005358:	4b04      	ldr	r3, [pc, #16]	; (800536c <std+0x44>)
 800535a:	6323      	str	r3, [r4, #48]	; 0x30
 800535c:	bd10      	pop	{r4, pc}
 800535e:	46c0      	nop			; (mov r8, r8)
 8005360:	08005dbd 	.word	0x08005dbd
 8005364:	08005de5 	.word	0x08005de5
 8005368:	08005e1d 	.word	0x08005e1d
 800536c:	08005e49 	.word	0x08005e49

08005370 <_cleanup_r>:
 8005370:	b510      	push	{r4, lr}
 8005372:	4902      	ldr	r1, [pc, #8]	; (800537c <_cleanup_r+0xc>)
 8005374:	f000 f8ba 	bl	80054ec <_fwalk_reent>
 8005378:	bd10      	pop	{r4, pc}
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	080052a9 	.word	0x080052a9

08005380 <__sfmoreglue>:
 8005380:	b570      	push	{r4, r5, r6, lr}
 8005382:	2568      	movs	r5, #104	; 0x68
 8005384:	1e4a      	subs	r2, r1, #1
 8005386:	4355      	muls	r5, r2
 8005388:	000e      	movs	r6, r1
 800538a:	0029      	movs	r1, r5
 800538c:	3174      	adds	r1, #116	; 0x74
 800538e:	f000 f9a9 	bl	80056e4 <_malloc_r>
 8005392:	1e04      	subs	r4, r0, #0
 8005394:	d008      	beq.n	80053a8 <__sfmoreglue+0x28>
 8005396:	2100      	movs	r1, #0
 8005398:	002a      	movs	r2, r5
 800539a:	6001      	str	r1, [r0, #0]
 800539c:	6046      	str	r6, [r0, #4]
 800539e:	300c      	adds	r0, #12
 80053a0:	60a0      	str	r0, [r4, #8]
 80053a2:	3268      	adds	r2, #104	; 0x68
 80053a4:	f7ff fd88 	bl	8004eb8 <memset>
 80053a8:	0020      	movs	r0, r4
 80053aa:	bd70      	pop	{r4, r5, r6, pc}

080053ac <__sfp_lock_acquire>:
 80053ac:	b510      	push	{r4, lr}
 80053ae:	4802      	ldr	r0, [pc, #8]	; (80053b8 <__sfp_lock_acquire+0xc>)
 80053b0:	f000 f8bd 	bl	800552e <__retarget_lock_acquire_recursive>
 80053b4:	bd10      	pop	{r4, pc}
 80053b6:	46c0      	nop			; (mov r8, r8)
 80053b8:	2000028d 	.word	0x2000028d

080053bc <__sfp_lock_release>:
 80053bc:	b510      	push	{r4, lr}
 80053be:	4802      	ldr	r0, [pc, #8]	; (80053c8 <__sfp_lock_release+0xc>)
 80053c0:	f000 f8b6 	bl	8005530 <__retarget_lock_release_recursive>
 80053c4:	bd10      	pop	{r4, pc}
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	2000028d 	.word	0x2000028d

080053cc <__sinit_lock_acquire>:
 80053cc:	b510      	push	{r4, lr}
 80053ce:	4802      	ldr	r0, [pc, #8]	; (80053d8 <__sinit_lock_acquire+0xc>)
 80053d0:	f000 f8ad 	bl	800552e <__retarget_lock_acquire_recursive>
 80053d4:	bd10      	pop	{r4, pc}
 80053d6:	46c0      	nop			; (mov r8, r8)
 80053d8:	2000028e 	.word	0x2000028e

080053dc <__sinit_lock_release>:
 80053dc:	b510      	push	{r4, lr}
 80053de:	4802      	ldr	r0, [pc, #8]	; (80053e8 <__sinit_lock_release+0xc>)
 80053e0:	f000 f8a6 	bl	8005530 <__retarget_lock_release_recursive>
 80053e4:	bd10      	pop	{r4, pc}
 80053e6:	46c0      	nop			; (mov r8, r8)
 80053e8:	2000028e 	.word	0x2000028e

080053ec <__sinit>:
 80053ec:	b513      	push	{r0, r1, r4, lr}
 80053ee:	0004      	movs	r4, r0
 80053f0:	f7ff ffec 	bl	80053cc <__sinit_lock_acquire>
 80053f4:	69a3      	ldr	r3, [r4, #24]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <__sinit+0x14>
 80053fa:	f7ff ffef 	bl	80053dc <__sinit_lock_release>
 80053fe:	bd13      	pop	{r0, r1, r4, pc}
 8005400:	64a3      	str	r3, [r4, #72]	; 0x48
 8005402:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005404:	6523      	str	r3, [r4, #80]	; 0x50
 8005406:	4b13      	ldr	r3, [pc, #76]	; (8005454 <__sinit+0x68>)
 8005408:	4a13      	ldr	r2, [pc, #76]	; (8005458 <__sinit+0x6c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	62a2      	str	r2, [r4, #40]	; 0x28
 800540e:	9301      	str	r3, [sp, #4]
 8005410:	42a3      	cmp	r3, r4
 8005412:	d101      	bne.n	8005418 <__sinit+0x2c>
 8005414:	2301      	movs	r3, #1
 8005416:	61a3      	str	r3, [r4, #24]
 8005418:	0020      	movs	r0, r4
 800541a:	f000 f81f 	bl	800545c <__sfp>
 800541e:	6060      	str	r0, [r4, #4]
 8005420:	0020      	movs	r0, r4
 8005422:	f000 f81b 	bl	800545c <__sfp>
 8005426:	60a0      	str	r0, [r4, #8]
 8005428:	0020      	movs	r0, r4
 800542a:	f000 f817 	bl	800545c <__sfp>
 800542e:	2200      	movs	r2, #0
 8005430:	2104      	movs	r1, #4
 8005432:	60e0      	str	r0, [r4, #12]
 8005434:	6860      	ldr	r0, [r4, #4]
 8005436:	f7ff ff77 	bl	8005328 <std>
 800543a:	2201      	movs	r2, #1
 800543c:	2109      	movs	r1, #9
 800543e:	68a0      	ldr	r0, [r4, #8]
 8005440:	f7ff ff72 	bl	8005328 <std>
 8005444:	2202      	movs	r2, #2
 8005446:	2112      	movs	r1, #18
 8005448:	68e0      	ldr	r0, [r4, #12]
 800544a:	f7ff ff6d 	bl	8005328 <std>
 800544e:	2301      	movs	r3, #1
 8005450:	61a3      	str	r3, [r4, #24]
 8005452:	e7d2      	b.n	80053fa <__sinit+0xe>
 8005454:	080060e8 	.word	0x080060e8
 8005458:	08005371 	.word	0x08005371

0800545c <__sfp>:
 800545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545e:	0007      	movs	r7, r0
 8005460:	f7ff ffa4 	bl	80053ac <__sfp_lock_acquire>
 8005464:	4b1f      	ldr	r3, [pc, #124]	; (80054e4 <__sfp+0x88>)
 8005466:	681e      	ldr	r6, [r3, #0]
 8005468:	69b3      	ldr	r3, [r6, #24]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d102      	bne.n	8005474 <__sfp+0x18>
 800546e:	0030      	movs	r0, r6
 8005470:	f7ff ffbc 	bl	80053ec <__sinit>
 8005474:	3648      	adds	r6, #72	; 0x48
 8005476:	68b4      	ldr	r4, [r6, #8]
 8005478:	6873      	ldr	r3, [r6, #4]
 800547a:	3b01      	subs	r3, #1
 800547c:	d504      	bpl.n	8005488 <__sfp+0x2c>
 800547e:	6833      	ldr	r3, [r6, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d022      	beq.n	80054ca <__sfp+0x6e>
 8005484:	6836      	ldr	r6, [r6, #0]
 8005486:	e7f6      	b.n	8005476 <__sfp+0x1a>
 8005488:	220c      	movs	r2, #12
 800548a:	5ea5      	ldrsh	r5, [r4, r2]
 800548c:	2d00      	cmp	r5, #0
 800548e:	d11a      	bne.n	80054c6 <__sfp+0x6a>
 8005490:	0020      	movs	r0, r4
 8005492:	4b15      	ldr	r3, [pc, #84]	; (80054e8 <__sfp+0x8c>)
 8005494:	3058      	adds	r0, #88	; 0x58
 8005496:	60e3      	str	r3, [r4, #12]
 8005498:	6665      	str	r5, [r4, #100]	; 0x64
 800549a:	f000 f847 	bl	800552c <__retarget_lock_init_recursive>
 800549e:	f7ff ff8d 	bl	80053bc <__sfp_lock_release>
 80054a2:	0020      	movs	r0, r4
 80054a4:	2208      	movs	r2, #8
 80054a6:	0029      	movs	r1, r5
 80054a8:	6025      	str	r5, [r4, #0]
 80054aa:	60a5      	str	r5, [r4, #8]
 80054ac:	6065      	str	r5, [r4, #4]
 80054ae:	6125      	str	r5, [r4, #16]
 80054b0:	6165      	str	r5, [r4, #20]
 80054b2:	61a5      	str	r5, [r4, #24]
 80054b4:	305c      	adds	r0, #92	; 0x5c
 80054b6:	f7ff fcff 	bl	8004eb8 <memset>
 80054ba:	6365      	str	r5, [r4, #52]	; 0x34
 80054bc:	63a5      	str	r5, [r4, #56]	; 0x38
 80054be:	64a5      	str	r5, [r4, #72]	; 0x48
 80054c0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80054c2:	0020      	movs	r0, r4
 80054c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054c6:	3468      	adds	r4, #104	; 0x68
 80054c8:	e7d7      	b.n	800547a <__sfp+0x1e>
 80054ca:	2104      	movs	r1, #4
 80054cc:	0038      	movs	r0, r7
 80054ce:	f7ff ff57 	bl	8005380 <__sfmoreglue>
 80054d2:	1e04      	subs	r4, r0, #0
 80054d4:	6030      	str	r0, [r6, #0]
 80054d6:	d1d5      	bne.n	8005484 <__sfp+0x28>
 80054d8:	f7ff ff70 	bl	80053bc <__sfp_lock_release>
 80054dc:	230c      	movs	r3, #12
 80054de:	603b      	str	r3, [r7, #0]
 80054e0:	e7ef      	b.n	80054c2 <__sfp+0x66>
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	080060e8 	.word	0x080060e8
 80054e8:	ffff0001 	.word	0xffff0001

080054ec <_fwalk_reent>:
 80054ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ee:	0004      	movs	r4, r0
 80054f0:	0006      	movs	r6, r0
 80054f2:	2700      	movs	r7, #0
 80054f4:	9101      	str	r1, [sp, #4]
 80054f6:	3448      	adds	r4, #72	; 0x48
 80054f8:	6863      	ldr	r3, [r4, #4]
 80054fa:	68a5      	ldr	r5, [r4, #8]
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	9b00      	ldr	r3, [sp, #0]
 8005500:	3b01      	subs	r3, #1
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	d504      	bpl.n	8005510 <_fwalk_reent+0x24>
 8005506:	6824      	ldr	r4, [r4, #0]
 8005508:	2c00      	cmp	r4, #0
 800550a:	d1f5      	bne.n	80054f8 <_fwalk_reent+0xc>
 800550c:	0038      	movs	r0, r7
 800550e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005510:	89ab      	ldrh	r3, [r5, #12]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d908      	bls.n	8005528 <_fwalk_reent+0x3c>
 8005516:	220e      	movs	r2, #14
 8005518:	5eab      	ldrsh	r3, [r5, r2]
 800551a:	3301      	adds	r3, #1
 800551c:	d004      	beq.n	8005528 <_fwalk_reent+0x3c>
 800551e:	0029      	movs	r1, r5
 8005520:	0030      	movs	r0, r6
 8005522:	9b01      	ldr	r3, [sp, #4]
 8005524:	4798      	blx	r3
 8005526:	4307      	orrs	r7, r0
 8005528:	3568      	adds	r5, #104	; 0x68
 800552a:	e7e8      	b.n	80054fe <_fwalk_reent+0x12>

0800552c <__retarget_lock_init_recursive>:
 800552c:	4770      	bx	lr

0800552e <__retarget_lock_acquire_recursive>:
 800552e:	4770      	bx	lr

08005530 <__retarget_lock_release_recursive>:
 8005530:	4770      	bx	lr
	...

08005534 <__swhatbuf_r>:
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	000e      	movs	r6, r1
 8005538:	001d      	movs	r5, r3
 800553a:	230e      	movs	r3, #14
 800553c:	5ec9      	ldrsh	r1, [r1, r3]
 800553e:	0014      	movs	r4, r2
 8005540:	b096      	sub	sp, #88	; 0x58
 8005542:	2900      	cmp	r1, #0
 8005544:	da08      	bge.n	8005558 <__swhatbuf_r+0x24>
 8005546:	220c      	movs	r2, #12
 8005548:	5eb3      	ldrsh	r3, [r6, r2]
 800554a:	2200      	movs	r2, #0
 800554c:	602a      	str	r2, [r5, #0]
 800554e:	061b      	lsls	r3, r3, #24
 8005550:	d411      	bmi.n	8005576 <__swhatbuf_r+0x42>
 8005552:	2380      	movs	r3, #128	; 0x80
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	e00f      	b.n	8005578 <__swhatbuf_r+0x44>
 8005558:	466a      	mov	r2, sp
 800555a:	f000 fca1 	bl	8005ea0 <_fstat_r>
 800555e:	2800      	cmp	r0, #0
 8005560:	dbf1      	blt.n	8005546 <__swhatbuf_r+0x12>
 8005562:	23f0      	movs	r3, #240	; 0xf0
 8005564:	9901      	ldr	r1, [sp, #4]
 8005566:	021b      	lsls	r3, r3, #8
 8005568:	4019      	ands	r1, r3
 800556a:	4b05      	ldr	r3, [pc, #20]	; (8005580 <__swhatbuf_r+0x4c>)
 800556c:	18c9      	adds	r1, r1, r3
 800556e:	424b      	negs	r3, r1
 8005570:	4159      	adcs	r1, r3
 8005572:	6029      	str	r1, [r5, #0]
 8005574:	e7ed      	b.n	8005552 <__swhatbuf_r+0x1e>
 8005576:	2340      	movs	r3, #64	; 0x40
 8005578:	2000      	movs	r0, #0
 800557a:	6023      	str	r3, [r4, #0]
 800557c:	b016      	add	sp, #88	; 0x58
 800557e:	bd70      	pop	{r4, r5, r6, pc}
 8005580:	ffffe000 	.word	0xffffe000

08005584 <__smakebuf_r>:
 8005584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005586:	2602      	movs	r6, #2
 8005588:	898b      	ldrh	r3, [r1, #12]
 800558a:	0005      	movs	r5, r0
 800558c:	000c      	movs	r4, r1
 800558e:	4233      	tst	r3, r6
 8005590:	d006      	beq.n	80055a0 <__smakebuf_r+0x1c>
 8005592:	0023      	movs	r3, r4
 8005594:	3347      	adds	r3, #71	; 0x47
 8005596:	6023      	str	r3, [r4, #0]
 8005598:	6123      	str	r3, [r4, #16]
 800559a:	2301      	movs	r3, #1
 800559c:	6163      	str	r3, [r4, #20]
 800559e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80055a0:	466a      	mov	r2, sp
 80055a2:	ab01      	add	r3, sp, #4
 80055a4:	f7ff ffc6 	bl	8005534 <__swhatbuf_r>
 80055a8:	9900      	ldr	r1, [sp, #0]
 80055aa:	0007      	movs	r7, r0
 80055ac:	0028      	movs	r0, r5
 80055ae:	f000 f899 	bl	80056e4 <_malloc_r>
 80055b2:	2800      	cmp	r0, #0
 80055b4:	d108      	bne.n	80055c8 <__smakebuf_r+0x44>
 80055b6:	220c      	movs	r2, #12
 80055b8:	5ea3      	ldrsh	r3, [r4, r2]
 80055ba:	059a      	lsls	r2, r3, #22
 80055bc:	d4ef      	bmi.n	800559e <__smakebuf_r+0x1a>
 80055be:	2203      	movs	r2, #3
 80055c0:	4393      	bics	r3, r2
 80055c2:	431e      	orrs	r6, r3
 80055c4:	81a6      	strh	r6, [r4, #12]
 80055c6:	e7e4      	b.n	8005592 <__smakebuf_r+0xe>
 80055c8:	4b0f      	ldr	r3, [pc, #60]	; (8005608 <__smakebuf_r+0x84>)
 80055ca:	62ab      	str	r3, [r5, #40]	; 0x28
 80055cc:	2380      	movs	r3, #128	; 0x80
 80055ce:	89a2      	ldrh	r2, [r4, #12]
 80055d0:	6020      	str	r0, [r4, #0]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	81a3      	strh	r3, [r4, #12]
 80055d6:	9b00      	ldr	r3, [sp, #0]
 80055d8:	6120      	str	r0, [r4, #16]
 80055da:	6163      	str	r3, [r4, #20]
 80055dc:	9b01      	ldr	r3, [sp, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00d      	beq.n	80055fe <__smakebuf_r+0x7a>
 80055e2:	0028      	movs	r0, r5
 80055e4:	230e      	movs	r3, #14
 80055e6:	5ee1      	ldrsh	r1, [r4, r3]
 80055e8:	f000 fc6c 	bl	8005ec4 <_isatty_r>
 80055ec:	2800      	cmp	r0, #0
 80055ee:	d006      	beq.n	80055fe <__smakebuf_r+0x7a>
 80055f0:	2203      	movs	r2, #3
 80055f2:	89a3      	ldrh	r3, [r4, #12]
 80055f4:	4393      	bics	r3, r2
 80055f6:	001a      	movs	r2, r3
 80055f8:	2301      	movs	r3, #1
 80055fa:	4313      	orrs	r3, r2
 80055fc:	81a3      	strh	r3, [r4, #12]
 80055fe:	89a0      	ldrh	r0, [r4, #12]
 8005600:	4307      	orrs	r7, r0
 8005602:	81a7      	strh	r7, [r4, #12]
 8005604:	e7cb      	b.n	800559e <__smakebuf_r+0x1a>
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	08005371 	.word	0x08005371

0800560c <_free_r>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	0005      	movs	r5, r0
 8005610:	2900      	cmp	r1, #0
 8005612:	d010      	beq.n	8005636 <_free_r+0x2a>
 8005614:	1f0c      	subs	r4, r1, #4
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	da00      	bge.n	800561e <_free_r+0x12>
 800561c:	18e4      	adds	r4, r4, r3
 800561e:	0028      	movs	r0, r5
 8005620:	f000 fc82 	bl	8005f28 <__malloc_lock>
 8005624:	4a1d      	ldr	r2, [pc, #116]	; (800569c <_free_r+0x90>)
 8005626:	6813      	ldr	r3, [r2, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d105      	bne.n	8005638 <_free_r+0x2c>
 800562c:	6063      	str	r3, [r4, #4]
 800562e:	6014      	str	r4, [r2, #0]
 8005630:	0028      	movs	r0, r5
 8005632:	f000 fc81 	bl	8005f38 <__malloc_unlock>
 8005636:	bd70      	pop	{r4, r5, r6, pc}
 8005638:	42a3      	cmp	r3, r4
 800563a:	d908      	bls.n	800564e <_free_r+0x42>
 800563c:	6821      	ldr	r1, [r4, #0]
 800563e:	1860      	adds	r0, r4, r1
 8005640:	4283      	cmp	r3, r0
 8005642:	d1f3      	bne.n	800562c <_free_r+0x20>
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	1841      	adds	r1, r0, r1
 800564a:	6021      	str	r1, [r4, #0]
 800564c:	e7ee      	b.n	800562c <_free_r+0x20>
 800564e:	001a      	movs	r2, r3
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <_free_r+0x4e>
 8005656:	42a3      	cmp	r3, r4
 8005658:	d9f9      	bls.n	800564e <_free_r+0x42>
 800565a:	6811      	ldr	r1, [r2, #0]
 800565c:	1850      	adds	r0, r2, r1
 800565e:	42a0      	cmp	r0, r4
 8005660:	d10b      	bne.n	800567a <_free_r+0x6e>
 8005662:	6820      	ldr	r0, [r4, #0]
 8005664:	1809      	adds	r1, r1, r0
 8005666:	1850      	adds	r0, r2, r1
 8005668:	6011      	str	r1, [r2, #0]
 800566a:	4283      	cmp	r3, r0
 800566c:	d1e0      	bne.n	8005630 <_free_r+0x24>
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	1841      	adds	r1, r0, r1
 8005674:	6011      	str	r1, [r2, #0]
 8005676:	6053      	str	r3, [r2, #4]
 8005678:	e7da      	b.n	8005630 <_free_r+0x24>
 800567a:	42a0      	cmp	r0, r4
 800567c:	d902      	bls.n	8005684 <_free_r+0x78>
 800567e:	230c      	movs	r3, #12
 8005680:	602b      	str	r3, [r5, #0]
 8005682:	e7d5      	b.n	8005630 <_free_r+0x24>
 8005684:	6821      	ldr	r1, [r4, #0]
 8005686:	1860      	adds	r0, r4, r1
 8005688:	4283      	cmp	r3, r0
 800568a:	d103      	bne.n	8005694 <_free_r+0x88>
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	1841      	adds	r1, r0, r1
 8005692:	6021      	str	r1, [r4, #0]
 8005694:	6063      	str	r3, [r4, #4]
 8005696:	6054      	str	r4, [r2, #4]
 8005698:	e7ca      	b.n	8005630 <_free_r+0x24>
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	20000290 	.word	0x20000290

080056a0 <sbrk_aligned>:
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	4e0f      	ldr	r6, [pc, #60]	; (80056e0 <sbrk_aligned+0x40>)
 80056a4:	000d      	movs	r5, r1
 80056a6:	6831      	ldr	r1, [r6, #0]
 80056a8:	0004      	movs	r4, r0
 80056aa:	2900      	cmp	r1, #0
 80056ac:	d102      	bne.n	80056b4 <sbrk_aligned+0x14>
 80056ae:	f000 fb73 	bl	8005d98 <_sbrk_r>
 80056b2:	6030      	str	r0, [r6, #0]
 80056b4:	0029      	movs	r1, r5
 80056b6:	0020      	movs	r0, r4
 80056b8:	f000 fb6e 	bl	8005d98 <_sbrk_r>
 80056bc:	1c43      	adds	r3, r0, #1
 80056be:	d00a      	beq.n	80056d6 <sbrk_aligned+0x36>
 80056c0:	2303      	movs	r3, #3
 80056c2:	1cc5      	adds	r5, r0, #3
 80056c4:	439d      	bics	r5, r3
 80056c6:	42a8      	cmp	r0, r5
 80056c8:	d007      	beq.n	80056da <sbrk_aligned+0x3a>
 80056ca:	1a29      	subs	r1, r5, r0
 80056cc:	0020      	movs	r0, r4
 80056ce:	f000 fb63 	bl	8005d98 <_sbrk_r>
 80056d2:	1c43      	adds	r3, r0, #1
 80056d4:	d101      	bne.n	80056da <sbrk_aligned+0x3a>
 80056d6:	2501      	movs	r5, #1
 80056d8:	426d      	negs	r5, r5
 80056da:	0028      	movs	r0, r5
 80056dc:	bd70      	pop	{r4, r5, r6, pc}
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	20000294 	.word	0x20000294

080056e4 <_malloc_r>:
 80056e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056e6:	2203      	movs	r2, #3
 80056e8:	1ccb      	adds	r3, r1, #3
 80056ea:	4393      	bics	r3, r2
 80056ec:	3308      	adds	r3, #8
 80056ee:	0006      	movs	r6, r0
 80056f0:	001f      	movs	r7, r3
 80056f2:	2b0c      	cmp	r3, #12
 80056f4:	d232      	bcs.n	800575c <_malloc_r+0x78>
 80056f6:	270c      	movs	r7, #12
 80056f8:	42b9      	cmp	r1, r7
 80056fa:	d831      	bhi.n	8005760 <_malloc_r+0x7c>
 80056fc:	0030      	movs	r0, r6
 80056fe:	f000 fc13 	bl	8005f28 <__malloc_lock>
 8005702:	4d32      	ldr	r5, [pc, #200]	; (80057cc <_malloc_r+0xe8>)
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	001c      	movs	r4, r3
 8005708:	2c00      	cmp	r4, #0
 800570a:	d12e      	bne.n	800576a <_malloc_r+0x86>
 800570c:	0039      	movs	r1, r7
 800570e:	0030      	movs	r0, r6
 8005710:	f7ff ffc6 	bl	80056a0 <sbrk_aligned>
 8005714:	0004      	movs	r4, r0
 8005716:	1c43      	adds	r3, r0, #1
 8005718:	d11e      	bne.n	8005758 <_malloc_r+0x74>
 800571a:	682c      	ldr	r4, [r5, #0]
 800571c:	0025      	movs	r5, r4
 800571e:	2d00      	cmp	r5, #0
 8005720:	d14a      	bne.n	80057b8 <_malloc_r+0xd4>
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	0029      	movs	r1, r5
 8005726:	18e3      	adds	r3, r4, r3
 8005728:	0030      	movs	r0, r6
 800572a:	9301      	str	r3, [sp, #4]
 800572c:	f000 fb34 	bl	8005d98 <_sbrk_r>
 8005730:	9b01      	ldr	r3, [sp, #4]
 8005732:	4283      	cmp	r3, r0
 8005734:	d143      	bne.n	80057be <_malloc_r+0xda>
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	3703      	adds	r7, #3
 800573a:	1aff      	subs	r7, r7, r3
 800573c:	2303      	movs	r3, #3
 800573e:	439f      	bics	r7, r3
 8005740:	3708      	adds	r7, #8
 8005742:	2f0c      	cmp	r7, #12
 8005744:	d200      	bcs.n	8005748 <_malloc_r+0x64>
 8005746:	270c      	movs	r7, #12
 8005748:	0039      	movs	r1, r7
 800574a:	0030      	movs	r0, r6
 800574c:	f7ff ffa8 	bl	80056a0 <sbrk_aligned>
 8005750:	1c43      	adds	r3, r0, #1
 8005752:	d034      	beq.n	80057be <_malloc_r+0xda>
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	19df      	adds	r7, r3, r7
 8005758:	6027      	str	r7, [r4, #0]
 800575a:	e013      	b.n	8005784 <_malloc_r+0xa0>
 800575c:	2b00      	cmp	r3, #0
 800575e:	dacb      	bge.n	80056f8 <_malloc_r+0x14>
 8005760:	230c      	movs	r3, #12
 8005762:	2500      	movs	r5, #0
 8005764:	6033      	str	r3, [r6, #0]
 8005766:	0028      	movs	r0, r5
 8005768:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800576a:	6822      	ldr	r2, [r4, #0]
 800576c:	1bd1      	subs	r1, r2, r7
 800576e:	d420      	bmi.n	80057b2 <_malloc_r+0xce>
 8005770:	290b      	cmp	r1, #11
 8005772:	d917      	bls.n	80057a4 <_malloc_r+0xc0>
 8005774:	19e2      	adds	r2, r4, r7
 8005776:	6027      	str	r7, [r4, #0]
 8005778:	42a3      	cmp	r3, r4
 800577a:	d111      	bne.n	80057a0 <_malloc_r+0xbc>
 800577c:	602a      	str	r2, [r5, #0]
 800577e:	6863      	ldr	r3, [r4, #4]
 8005780:	6011      	str	r1, [r2, #0]
 8005782:	6053      	str	r3, [r2, #4]
 8005784:	0030      	movs	r0, r6
 8005786:	0025      	movs	r5, r4
 8005788:	f000 fbd6 	bl	8005f38 <__malloc_unlock>
 800578c:	2207      	movs	r2, #7
 800578e:	350b      	adds	r5, #11
 8005790:	1d23      	adds	r3, r4, #4
 8005792:	4395      	bics	r5, r2
 8005794:	1aea      	subs	r2, r5, r3
 8005796:	429d      	cmp	r5, r3
 8005798:	d0e5      	beq.n	8005766 <_malloc_r+0x82>
 800579a:	1b5b      	subs	r3, r3, r5
 800579c:	50a3      	str	r3, [r4, r2]
 800579e:	e7e2      	b.n	8005766 <_malloc_r+0x82>
 80057a0:	605a      	str	r2, [r3, #4]
 80057a2:	e7ec      	b.n	800577e <_malloc_r+0x9a>
 80057a4:	6862      	ldr	r2, [r4, #4]
 80057a6:	42a3      	cmp	r3, r4
 80057a8:	d101      	bne.n	80057ae <_malloc_r+0xca>
 80057aa:	602a      	str	r2, [r5, #0]
 80057ac:	e7ea      	b.n	8005784 <_malloc_r+0xa0>
 80057ae:	605a      	str	r2, [r3, #4]
 80057b0:	e7e8      	b.n	8005784 <_malloc_r+0xa0>
 80057b2:	0023      	movs	r3, r4
 80057b4:	6864      	ldr	r4, [r4, #4]
 80057b6:	e7a7      	b.n	8005708 <_malloc_r+0x24>
 80057b8:	002c      	movs	r4, r5
 80057ba:	686d      	ldr	r5, [r5, #4]
 80057bc:	e7af      	b.n	800571e <_malloc_r+0x3a>
 80057be:	230c      	movs	r3, #12
 80057c0:	0030      	movs	r0, r6
 80057c2:	6033      	str	r3, [r6, #0]
 80057c4:	f000 fbb8 	bl	8005f38 <__malloc_unlock>
 80057c8:	e7cd      	b.n	8005766 <_malloc_r+0x82>
 80057ca:	46c0      	nop			; (mov r8, r8)
 80057cc:	20000290 	.word	0x20000290

080057d0 <__sfputc_r>:
 80057d0:	6893      	ldr	r3, [r2, #8]
 80057d2:	b510      	push	{r4, lr}
 80057d4:	3b01      	subs	r3, #1
 80057d6:	6093      	str	r3, [r2, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	da04      	bge.n	80057e6 <__sfputc_r+0x16>
 80057dc:	6994      	ldr	r4, [r2, #24]
 80057de:	42a3      	cmp	r3, r4
 80057e0:	db07      	blt.n	80057f2 <__sfputc_r+0x22>
 80057e2:	290a      	cmp	r1, #10
 80057e4:	d005      	beq.n	80057f2 <__sfputc_r+0x22>
 80057e6:	6813      	ldr	r3, [r2, #0]
 80057e8:	1c58      	adds	r0, r3, #1
 80057ea:	6010      	str	r0, [r2, #0]
 80057ec:	7019      	strb	r1, [r3, #0]
 80057ee:	0008      	movs	r0, r1
 80057f0:	bd10      	pop	{r4, pc}
 80057f2:	f7ff fbff 	bl	8004ff4 <__swbuf_r>
 80057f6:	0001      	movs	r1, r0
 80057f8:	e7f9      	b.n	80057ee <__sfputc_r+0x1e>

080057fa <__sfputs_r>:
 80057fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fc:	0006      	movs	r6, r0
 80057fe:	000f      	movs	r7, r1
 8005800:	0014      	movs	r4, r2
 8005802:	18d5      	adds	r5, r2, r3
 8005804:	42ac      	cmp	r4, r5
 8005806:	d101      	bne.n	800580c <__sfputs_r+0x12>
 8005808:	2000      	movs	r0, #0
 800580a:	e007      	b.n	800581c <__sfputs_r+0x22>
 800580c:	7821      	ldrb	r1, [r4, #0]
 800580e:	003a      	movs	r2, r7
 8005810:	0030      	movs	r0, r6
 8005812:	f7ff ffdd 	bl	80057d0 <__sfputc_r>
 8005816:	3401      	adds	r4, #1
 8005818:	1c43      	adds	r3, r0, #1
 800581a:	d1f3      	bne.n	8005804 <__sfputs_r+0xa>
 800581c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005820 <_vfiprintf_r>:
 8005820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005822:	b0a1      	sub	sp, #132	; 0x84
 8005824:	0006      	movs	r6, r0
 8005826:	000c      	movs	r4, r1
 8005828:	001f      	movs	r7, r3
 800582a:	9203      	str	r2, [sp, #12]
 800582c:	2800      	cmp	r0, #0
 800582e:	d004      	beq.n	800583a <_vfiprintf_r+0x1a>
 8005830:	6983      	ldr	r3, [r0, #24]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <_vfiprintf_r+0x1a>
 8005836:	f7ff fdd9 	bl	80053ec <__sinit>
 800583a:	4b8e      	ldr	r3, [pc, #568]	; (8005a74 <_vfiprintf_r+0x254>)
 800583c:	429c      	cmp	r4, r3
 800583e:	d11c      	bne.n	800587a <_vfiprintf_r+0x5a>
 8005840:	6874      	ldr	r4, [r6, #4]
 8005842:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005844:	07db      	lsls	r3, r3, #31
 8005846:	d405      	bmi.n	8005854 <_vfiprintf_r+0x34>
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	059b      	lsls	r3, r3, #22
 800584c:	d402      	bmi.n	8005854 <_vfiprintf_r+0x34>
 800584e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005850:	f7ff fe6d 	bl	800552e <__retarget_lock_acquire_recursive>
 8005854:	89a3      	ldrh	r3, [r4, #12]
 8005856:	071b      	lsls	r3, r3, #28
 8005858:	d502      	bpl.n	8005860 <_vfiprintf_r+0x40>
 800585a:	6923      	ldr	r3, [r4, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d11d      	bne.n	800589c <_vfiprintf_r+0x7c>
 8005860:	0021      	movs	r1, r4
 8005862:	0030      	movs	r0, r6
 8005864:	f7ff fc1c 	bl	80050a0 <__swsetup_r>
 8005868:	2800      	cmp	r0, #0
 800586a:	d017      	beq.n	800589c <_vfiprintf_r+0x7c>
 800586c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800586e:	07db      	lsls	r3, r3, #31
 8005870:	d50d      	bpl.n	800588e <_vfiprintf_r+0x6e>
 8005872:	2001      	movs	r0, #1
 8005874:	4240      	negs	r0, r0
 8005876:	b021      	add	sp, #132	; 0x84
 8005878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800587a:	4b7f      	ldr	r3, [pc, #508]	; (8005a78 <_vfiprintf_r+0x258>)
 800587c:	429c      	cmp	r4, r3
 800587e:	d101      	bne.n	8005884 <_vfiprintf_r+0x64>
 8005880:	68b4      	ldr	r4, [r6, #8]
 8005882:	e7de      	b.n	8005842 <_vfiprintf_r+0x22>
 8005884:	4b7d      	ldr	r3, [pc, #500]	; (8005a7c <_vfiprintf_r+0x25c>)
 8005886:	429c      	cmp	r4, r3
 8005888:	d1db      	bne.n	8005842 <_vfiprintf_r+0x22>
 800588a:	68f4      	ldr	r4, [r6, #12]
 800588c:	e7d9      	b.n	8005842 <_vfiprintf_r+0x22>
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	059b      	lsls	r3, r3, #22
 8005892:	d4ee      	bmi.n	8005872 <_vfiprintf_r+0x52>
 8005894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005896:	f7ff fe4b 	bl	8005530 <__retarget_lock_release_recursive>
 800589a:	e7ea      	b.n	8005872 <_vfiprintf_r+0x52>
 800589c:	2300      	movs	r3, #0
 800589e:	ad08      	add	r5, sp, #32
 80058a0:	616b      	str	r3, [r5, #20]
 80058a2:	3320      	adds	r3, #32
 80058a4:	766b      	strb	r3, [r5, #25]
 80058a6:	3310      	adds	r3, #16
 80058a8:	76ab      	strb	r3, [r5, #26]
 80058aa:	9707      	str	r7, [sp, #28]
 80058ac:	9f03      	ldr	r7, [sp, #12]
 80058ae:	783b      	ldrb	r3, [r7, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <_vfiprintf_r+0x98>
 80058b4:	2b25      	cmp	r3, #37	; 0x25
 80058b6:	d14e      	bne.n	8005956 <_vfiprintf_r+0x136>
 80058b8:	9b03      	ldr	r3, [sp, #12]
 80058ba:	1afb      	subs	r3, r7, r3
 80058bc:	9305      	str	r3, [sp, #20]
 80058be:	9b03      	ldr	r3, [sp, #12]
 80058c0:	429f      	cmp	r7, r3
 80058c2:	d00d      	beq.n	80058e0 <_vfiprintf_r+0xc0>
 80058c4:	9b05      	ldr	r3, [sp, #20]
 80058c6:	0021      	movs	r1, r4
 80058c8:	0030      	movs	r0, r6
 80058ca:	9a03      	ldr	r2, [sp, #12]
 80058cc:	f7ff ff95 	bl	80057fa <__sfputs_r>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d100      	bne.n	80058d6 <_vfiprintf_r+0xb6>
 80058d4:	e0b5      	b.n	8005a42 <_vfiprintf_r+0x222>
 80058d6:	696a      	ldr	r2, [r5, #20]
 80058d8:	9b05      	ldr	r3, [sp, #20]
 80058da:	4694      	mov	ip, r2
 80058dc:	4463      	add	r3, ip
 80058de:	616b      	str	r3, [r5, #20]
 80058e0:	783b      	ldrb	r3, [r7, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d100      	bne.n	80058e8 <_vfiprintf_r+0xc8>
 80058e6:	e0ac      	b.n	8005a42 <_vfiprintf_r+0x222>
 80058e8:	2201      	movs	r2, #1
 80058ea:	1c7b      	adds	r3, r7, #1
 80058ec:	9303      	str	r3, [sp, #12]
 80058ee:	2300      	movs	r3, #0
 80058f0:	4252      	negs	r2, r2
 80058f2:	606a      	str	r2, [r5, #4]
 80058f4:	a904      	add	r1, sp, #16
 80058f6:	3254      	adds	r2, #84	; 0x54
 80058f8:	1852      	adds	r2, r2, r1
 80058fa:	602b      	str	r3, [r5, #0]
 80058fc:	60eb      	str	r3, [r5, #12]
 80058fe:	60ab      	str	r3, [r5, #8]
 8005900:	7013      	strb	r3, [r2, #0]
 8005902:	65ab      	str	r3, [r5, #88]	; 0x58
 8005904:	9b03      	ldr	r3, [sp, #12]
 8005906:	2205      	movs	r2, #5
 8005908:	7819      	ldrb	r1, [r3, #0]
 800590a:	485d      	ldr	r0, [pc, #372]	; (8005a80 <_vfiprintf_r+0x260>)
 800590c:	f000 fb00 	bl	8005f10 <memchr>
 8005910:	9b03      	ldr	r3, [sp, #12]
 8005912:	1c5f      	adds	r7, r3, #1
 8005914:	2800      	cmp	r0, #0
 8005916:	d120      	bne.n	800595a <_vfiprintf_r+0x13a>
 8005918:	682a      	ldr	r2, [r5, #0]
 800591a:	06d3      	lsls	r3, r2, #27
 800591c:	d504      	bpl.n	8005928 <_vfiprintf_r+0x108>
 800591e:	2353      	movs	r3, #83	; 0x53
 8005920:	a904      	add	r1, sp, #16
 8005922:	185b      	adds	r3, r3, r1
 8005924:	2120      	movs	r1, #32
 8005926:	7019      	strb	r1, [r3, #0]
 8005928:	0713      	lsls	r3, r2, #28
 800592a:	d504      	bpl.n	8005936 <_vfiprintf_r+0x116>
 800592c:	2353      	movs	r3, #83	; 0x53
 800592e:	a904      	add	r1, sp, #16
 8005930:	185b      	adds	r3, r3, r1
 8005932:	212b      	movs	r1, #43	; 0x2b
 8005934:	7019      	strb	r1, [r3, #0]
 8005936:	9b03      	ldr	r3, [sp, #12]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b2a      	cmp	r3, #42	; 0x2a
 800593c:	d016      	beq.n	800596c <_vfiprintf_r+0x14c>
 800593e:	2100      	movs	r1, #0
 8005940:	68eb      	ldr	r3, [r5, #12]
 8005942:	9f03      	ldr	r7, [sp, #12]
 8005944:	783a      	ldrb	r2, [r7, #0]
 8005946:	1c78      	adds	r0, r7, #1
 8005948:	3a30      	subs	r2, #48	; 0x30
 800594a:	4684      	mov	ip, r0
 800594c:	2a09      	cmp	r2, #9
 800594e:	d94f      	bls.n	80059f0 <_vfiprintf_r+0x1d0>
 8005950:	2900      	cmp	r1, #0
 8005952:	d111      	bne.n	8005978 <_vfiprintf_r+0x158>
 8005954:	e017      	b.n	8005986 <_vfiprintf_r+0x166>
 8005956:	3701      	adds	r7, #1
 8005958:	e7a9      	b.n	80058ae <_vfiprintf_r+0x8e>
 800595a:	4b49      	ldr	r3, [pc, #292]	; (8005a80 <_vfiprintf_r+0x260>)
 800595c:	682a      	ldr	r2, [r5, #0]
 800595e:	1ac0      	subs	r0, r0, r3
 8005960:	2301      	movs	r3, #1
 8005962:	4083      	lsls	r3, r0
 8005964:	4313      	orrs	r3, r2
 8005966:	602b      	str	r3, [r5, #0]
 8005968:	9703      	str	r7, [sp, #12]
 800596a:	e7cb      	b.n	8005904 <_vfiprintf_r+0xe4>
 800596c:	9b07      	ldr	r3, [sp, #28]
 800596e:	1d19      	adds	r1, r3, #4
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	9107      	str	r1, [sp, #28]
 8005974:	2b00      	cmp	r3, #0
 8005976:	db01      	blt.n	800597c <_vfiprintf_r+0x15c>
 8005978:	930b      	str	r3, [sp, #44]	; 0x2c
 800597a:	e004      	b.n	8005986 <_vfiprintf_r+0x166>
 800597c:	425b      	negs	r3, r3
 800597e:	60eb      	str	r3, [r5, #12]
 8005980:	2302      	movs	r3, #2
 8005982:	4313      	orrs	r3, r2
 8005984:	602b      	str	r3, [r5, #0]
 8005986:	783b      	ldrb	r3, [r7, #0]
 8005988:	2b2e      	cmp	r3, #46	; 0x2e
 800598a:	d10a      	bne.n	80059a2 <_vfiprintf_r+0x182>
 800598c:	787b      	ldrb	r3, [r7, #1]
 800598e:	2b2a      	cmp	r3, #42	; 0x2a
 8005990:	d137      	bne.n	8005a02 <_vfiprintf_r+0x1e2>
 8005992:	9b07      	ldr	r3, [sp, #28]
 8005994:	3702      	adds	r7, #2
 8005996:	1d1a      	adds	r2, r3, #4
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	9207      	str	r2, [sp, #28]
 800599c:	2b00      	cmp	r3, #0
 800599e:	db2d      	blt.n	80059fc <_vfiprintf_r+0x1dc>
 80059a0:	9309      	str	r3, [sp, #36]	; 0x24
 80059a2:	2203      	movs	r2, #3
 80059a4:	7839      	ldrb	r1, [r7, #0]
 80059a6:	4837      	ldr	r0, [pc, #220]	; (8005a84 <_vfiprintf_r+0x264>)
 80059a8:	f000 fab2 	bl	8005f10 <memchr>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d007      	beq.n	80059c0 <_vfiprintf_r+0x1a0>
 80059b0:	4b34      	ldr	r3, [pc, #208]	; (8005a84 <_vfiprintf_r+0x264>)
 80059b2:	682a      	ldr	r2, [r5, #0]
 80059b4:	1ac0      	subs	r0, r0, r3
 80059b6:	2340      	movs	r3, #64	; 0x40
 80059b8:	4083      	lsls	r3, r0
 80059ba:	4313      	orrs	r3, r2
 80059bc:	3701      	adds	r7, #1
 80059be:	602b      	str	r3, [r5, #0]
 80059c0:	7839      	ldrb	r1, [r7, #0]
 80059c2:	1c7b      	adds	r3, r7, #1
 80059c4:	2206      	movs	r2, #6
 80059c6:	4830      	ldr	r0, [pc, #192]	; (8005a88 <_vfiprintf_r+0x268>)
 80059c8:	9303      	str	r3, [sp, #12]
 80059ca:	7629      	strb	r1, [r5, #24]
 80059cc:	f000 faa0 	bl	8005f10 <memchr>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	d045      	beq.n	8005a60 <_vfiprintf_r+0x240>
 80059d4:	4b2d      	ldr	r3, [pc, #180]	; (8005a8c <_vfiprintf_r+0x26c>)
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d127      	bne.n	8005a2a <_vfiprintf_r+0x20a>
 80059da:	2207      	movs	r2, #7
 80059dc:	9b07      	ldr	r3, [sp, #28]
 80059de:	3307      	adds	r3, #7
 80059e0:	4393      	bics	r3, r2
 80059e2:	3308      	adds	r3, #8
 80059e4:	9307      	str	r3, [sp, #28]
 80059e6:	696b      	ldr	r3, [r5, #20]
 80059e8:	9a04      	ldr	r2, [sp, #16]
 80059ea:	189b      	adds	r3, r3, r2
 80059ec:	616b      	str	r3, [r5, #20]
 80059ee:	e75d      	b.n	80058ac <_vfiprintf_r+0x8c>
 80059f0:	210a      	movs	r1, #10
 80059f2:	434b      	muls	r3, r1
 80059f4:	4667      	mov	r7, ip
 80059f6:	189b      	adds	r3, r3, r2
 80059f8:	3909      	subs	r1, #9
 80059fa:	e7a3      	b.n	8005944 <_vfiprintf_r+0x124>
 80059fc:	2301      	movs	r3, #1
 80059fe:	425b      	negs	r3, r3
 8005a00:	e7ce      	b.n	80059a0 <_vfiprintf_r+0x180>
 8005a02:	2300      	movs	r3, #0
 8005a04:	001a      	movs	r2, r3
 8005a06:	3701      	adds	r7, #1
 8005a08:	606b      	str	r3, [r5, #4]
 8005a0a:	7839      	ldrb	r1, [r7, #0]
 8005a0c:	1c78      	adds	r0, r7, #1
 8005a0e:	3930      	subs	r1, #48	; 0x30
 8005a10:	4684      	mov	ip, r0
 8005a12:	2909      	cmp	r1, #9
 8005a14:	d903      	bls.n	8005a1e <_vfiprintf_r+0x1fe>
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0c3      	beq.n	80059a2 <_vfiprintf_r+0x182>
 8005a1a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a1c:	e7c1      	b.n	80059a2 <_vfiprintf_r+0x182>
 8005a1e:	230a      	movs	r3, #10
 8005a20:	435a      	muls	r2, r3
 8005a22:	4667      	mov	r7, ip
 8005a24:	1852      	adds	r2, r2, r1
 8005a26:	3b09      	subs	r3, #9
 8005a28:	e7ef      	b.n	8005a0a <_vfiprintf_r+0x1ea>
 8005a2a:	ab07      	add	r3, sp, #28
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	0022      	movs	r2, r4
 8005a30:	0029      	movs	r1, r5
 8005a32:	0030      	movs	r0, r6
 8005a34:	4b16      	ldr	r3, [pc, #88]	; (8005a90 <_vfiprintf_r+0x270>)
 8005a36:	e000      	b.n	8005a3a <_vfiprintf_r+0x21a>
 8005a38:	bf00      	nop
 8005a3a:	9004      	str	r0, [sp, #16]
 8005a3c:	9b04      	ldr	r3, [sp, #16]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	d1d1      	bne.n	80059e6 <_vfiprintf_r+0x1c6>
 8005a42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a44:	07db      	lsls	r3, r3, #31
 8005a46:	d405      	bmi.n	8005a54 <_vfiprintf_r+0x234>
 8005a48:	89a3      	ldrh	r3, [r4, #12]
 8005a4a:	059b      	lsls	r3, r3, #22
 8005a4c:	d402      	bmi.n	8005a54 <_vfiprintf_r+0x234>
 8005a4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a50:	f7ff fd6e 	bl	8005530 <__retarget_lock_release_recursive>
 8005a54:	89a3      	ldrh	r3, [r4, #12]
 8005a56:	065b      	lsls	r3, r3, #25
 8005a58:	d500      	bpl.n	8005a5c <_vfiprintf_r+0x23c>
 8005a5a:	e70a      	b.n	8005872 <_vfiprintf_r+0x52>
 8005a5c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005a5e:	e70a      	b.n	8005876 <_vfiprintf_r+0x56>
 8005a60:	ab07      	add	r3, sp, #28
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	0022      	movs	r2, r4
 8005a66:	0029      	movs	r1, r5
 8005a68:	0030      	movs	r0, r6
 8005a6a:	4b09      	ldr	r3, [pc, #36]	; (8005a90 <_vfiprintf_r+0x270>)
 8005a6c:	f000 f882 	bl	8005b74 <_printf_i>
 8005a70:	e7e3      	b.n	8005a3a <_vfiprintf_r+0x21a>
 8005a72:	46c0      	nop			; (mov r8, r8)
 8005a74:	0800610c 	.word	0x0800610c
 8005a78:	0800612c 	.word	0x0800612c
 8005a7c:	080060ec 	.word	0x080060ec
 8005a80:	0800614c 	.word	0x0800614c
 8005a84:	08006152 	.word	0x08006152
 8005a88:	08006156 	.word	0x08006156
 8005a8c:	00000000 	.word	0x00000000
 8005a90:	080057fb 	.word	0x080057fb

08005a94 <_printf_common>:
 8005a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a96:	0015      	movs	r5, r2
 8005a98:	9301      	str	r3, [sp, #4]
 8005a9a:	688a      	ldr	r2, [r1, #8]
 8005a9c:	690b      	ldr	r3, [r1, #16]
 8005a9e:	000c      	movs	r4, r1
 8005aa0:	9000      	str	r0, [sp, #0]
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	da00      	bge.n	8005aa8 <_printf_common+0x14>
 8005aa6:	0013      	movs	r3, r2
 8005aa8:	0022      	movs	r2, r4
 8005aaa:	602b      	str	r3, [r5, #0]
 8005aac:	3243      	adds	r2, #67	; 0x43
 8005aae:	7812      	ldrb	r2, [r2, #0]
 8005ab0:	2a00      	cmp	r2, #0
 8005ab2:	d001      	beq.n	8005ab8 <_printf_common+0x24>
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	602b      	str	r3, [r5, #0]
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	069b      	lsls	r3, r3, #26
 8005abc:	d502      	bpl.n	8005ac4 <_printf_common+0x30>
 8005abe:	682b      	ldr	r3, [r5, #0]
 8005ac0:	3302      	adds	r3, #2
 8005ac2:	602b      	str	r3, [r5, #0]
 8005ac4:	6822      	ldr	r2, [r4, #0]
 8005ac6:	2306      	movs	r3, #6
 8005ac8:	0017      	movs	r7, r2
 8005aca:	401f      	ands	r7, r3
 8005acc:	421a      	tst	r2, r3
 8005ace:	d027      	beq.n	8005b20 <_printf_common+0x8c>
 8005ad0:	0023      	movs	r3, r4
 8005ad2:	3343      	adds	r3, #67	; 0x43
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	1e5a      	subs	r2, r3, #1
 8005ad8:	4193      	sbcs	r3, r2
 8005ada:	6822      	ldr	r2, [r4, #0]
 8005adc:	0692      	lsls	r2, r2, #26
 8005ade:	d430      	bmi.n	8005b42 <_printf_common+0xae>
 8005ae0:	0022      	movs	r2, r4
 8005ae2:	9901      	ldr	r1, [sp, #4]
 8005ae4:	9800      	ldr	r0, [sp, #0]
 8005ae6:	9e08      	ldr	r6, [sp, #32]
 8005ae8:	3243      	adds	r2, #67	; 0x43
 8005aea:	47b0      	blx	r6
 8005aec:	1c43      	adds	r3, r0, #1
 8005aee:	d025      	beq.n	8005b3c <_printf_common+0xa8>
 8005af0:	2306      	movs	r3, #6
 8005af2:	6820      	ldr	r0, [r4, #0]
 8005af4:	682a      	ldr	r2, [r5, #0]
 8005af6:	68e1      	ldr	r1, [r4, #12]
 8005af8:	2500      	movs	r5, #0
 8005afa:	4003      	ands	r3, r0
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d103      	bne.n	8005b08 <_printf_common+0x74>
 8005b00:	1a8d      	subs	r5, r1, r2
 8005b02:	43eb      	mvns	r3, r5
 8005b04:	17db      	asrs	r3, r3, #31
 8005b06:	401d      	ands	r5, r3
 8005b08:	68a3      	ldr	r3, [r4, #8]
 8005b0a:	6922      	ldr	r2, [r4, #16]
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	dd01      	ble.n	8005b14 <_printf_common+0x80>
 8005b10:	1a9b      	subs	r3, r3, r2
 8005b12:	18ed      	adds	r5, r5, r3
 8005b14:	2700      	movs	r7, #0
 8005b16:	42bd      	cmp	r5, r7
 8005b18:	d120      	bne.n	8005b5c <_printf_common+0xc8>
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	e010      	b.n	8005b40 <_printf_common+0xac>
 8005b1e:	3701      	adds	r7, #1
 8005b20:	68e3      	ldr	r3, [r4, #12]
 8005b22:	682a      	ldr	r2, [r5, #0]
 8005b24:	1a9b      	subs	r3, r3, r2
 8005b26:	42bb      	cmp	r3, r7
 8005b28:	ddd2      	ble.n	8005ad0 <_printf_common+0x3c>
 8005b2a:	0022      	movs	r2, r4
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	9901      	ldr	r1, [sp, #4]
 8005b30:	9800      	ldr	r0, [sp, #0]
 8005b32:	9e08      	ldr	r6, [sp, #32]
 8005b34:	3219      	adds	r2, #25
 8005b36:	47b0      	blx	r6
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	d1f0      	bne.n	8005b1e <_printf_common+0x8a>
 8005b3c:	2001      	movs	r0, #1
 8005b3e:	4240      	negs	r0, r0
 8005b40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b42:	2030      	movs	r0, #48	; 0x30
 8005b44:	18e1      	adds	r1, r4, r3
 8005b46:	3143      	adds	r1, #67	; 0x43
 8005b48:	7008      	strb	r0, [r1, #0]
 8005b4a:	0021      	movs	r1, r4
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	3145      	adds	r1, #69	; 0x45
 8005b50:	7809      	ldrb	r1, [r1, #0]
 8005b52:	18a2      	adds	r2, r4, r2
 8005b54:	3243      	adds	r2, #67	; 0x43
 8005b56:	3302      	adds	r3, #2
 8005b58:	7011      	strb	r1, [r2, #0]
 8005b5a:	e7c1      	b.n	8005ae0 <_printf_common+0x4c>
 8005b5c:	0022      	movs	r2, r4
 8005b5e:	2301      	movs	r3, #1
 8005b60:	9901      	ldr	r1, [sp, #4]
 8005b62:	9800      	ldr	r0, [sp, #0]
 8005b64:	9e08      	ldr	r6, [sp, #32]
 8005b66:	321a      	adds	r2, #26
 8005b68:	47b0      	blx	r6
 8005b6a:	1c43      	adds	r3, r0, #1
 8005b6c:	d0e6      	beq.n	8005b3c <_printf_common+0xa8>
 8005b6e:	3701      	adds	r7, #1
 8005b70:	e7d1      	b.n	8005b16 <_printf_common+0x82>
	...

08005b74 <_printf_i>:
 8005b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b76:	b08b      	sub	sp, #44	; 0x2c
 8005b78:	9206      	str	r2, [sp, #24]
 8005b7a:	000a      	movs	r2, r1
 8005b7c:	3243      	adds	r2, #67	; 0x43
 8005b7e:	9307      	str	r3, [sp, #28]
 8005b80:	9005      	str	r0, [sp, #20]
 8005b82:	9204      	str	r2, [sp, #16]
 8005b84:	7e0a      	ldrb	r2, [r1, #24]
 8005b86:	000c      	movs	r4, r1
 8005b88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b8a:	2a78      	cmp	r2, #120	; 0x78
 8005b8c:	d807      	bhi.n	8005b9e <_printf_i+0x2a>
 8005b8e:	2a62      	cmp	r2, #98	; 0x62
 8005b90:	d809      	bhi.n	8005ba6 <_printf_i+0x32>
 8005b92:	2a00      	cmp	r2, #0
 8005b94:	d100      	bne.n	8005b98 <_printf_i+0x24>
 8005b96:	e0c1      	b.n	8005d1c <_printf_i+0x1a8>
 8005b98:	2a58      	cmp	r2, #88	; 0x58
 8005b9a:	d100      	bne.n	8005b9e <_printf_i+0x2a>
 8005b9c:	e08c      	b.n	8005cb8 <_printf_i+0x144>
 8005b9e:	0026      	movs	r6, r4
 8005ba0:	3642      	adds	r6, #66	; 0x42
 8005ba2:	7032      	strb	r2, [r6, #0]
 8005ba4:	e022      	b.n	8005bec <_printf_i+0x78>
 8005ba6:	0010      	movs	r0, r2
 8005ba8:	3863      	subs	r0, #99	; 0x63
 8005baa:	2815      	cmp	r0, #21
 8005bac:	d8f7      	bhi.n	8005b9e <_printf_i+0x2a>
 8005bae:	f7fa faab 	bl	8000108 <__gnu_thumb1_case_shi>
 8005bb2:	0016      	.short	0x0016
 8005bb4:	fff6001f 	.word	0xfff6001f
 8005bb8:	fff6fff6 	.word	0xfff6fff6
 8005bbc:	001ffff6 	.word	0x001ffff6
 8005bc0:	fff6fff6 	.word	0xfff6fff6
 8005bc4:	fff6fff6 	.word	0xfff6fff6
 8005bc8:	003600a8 	.word	0x003600a8
 8005bcc:	fff6009a 	.word	0xfff6009a
 8005bd0:	00b9fff6 	.word	0x00b9fff6
 8005bd4:	0036fff6 	.word	0x0036fff6
 8005bd8:	fff6fff6 	.word	0xfff6fff6
 8005bdc:	009e      	.short	0x009e
 8005bde:	0026      	movs	r6, r4
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	3642      	adds	r6, #66	; 0x42
 8005be4:	1d11      	adds	r1, r2, #4
 8005be6:	6019      	str	r1, [r3, #0]
 8005be8:	6813      	ldr	r3, [r2, #0]
 8005bea:	7033      	strb	r3, [r6, #0]
 8005bec:	2301      	movs	r3, #1
 8005bee:	e0a7      	b.n	8005d40 <_printf_i+0x1cc>
 8005bf0:	6808      	ldr	r0, [r1, #0]
 8005bf2:	6819      	ldr	r1, [r3, #0]
 8005bf4:	1d0a      	adds	r2, r1, #4
 8005bf6:	0605      	lsls	r5, r0, #24
 8005bf8:	d50b      	bpl.n	8005c12 <_printf_i+0x9e>
 8005bfa:	680d      	ldr	r5, [r1, #0]
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	2d00      	cmp	r5, #0
 8005c00:	da03      	bge.n	8005c0a <_printf_i+0x96>
 8005c02:	232d      	movs	r3, #45	; 0x2d
 8005c04:	9a04      	ldr	r2, [sp, #16]
 8005c06:	426d      	negs	r5, r5
 8005c08:	7013      	strb	r3, [r2, #0]
 8005c0a:	4b61      	ldr	r3, [pc, #388]	; (8005d90 <_printf_i+0x21c>)
 8005c0c:	270a      	movs	r7, #10
 8005c0e:	9303      	str	r3, [sp, #12]
 8005c10:	e01b      	b.n	8005c4a <_printf_i+0xd6>
 8005c12:	680d      	ldr	r5, [r1, #0]
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	0641      	lsls	r1, r0, #25
 8005c18:	d5f1      	bpl.n	8005bfe <_printf_i+0x8a>
 8005c1a:	b22d      	sxth	r5, r5
 8005c1c:	e7ef      	b.n	8005bfe <_printf_i+0x8a>
 8005c1e:	680d      	ldr	r5, [r1, #0]
 8005c20:	6819      	ldr	r1, [r3, #0]
 8005c22:	1d08      	adds	r0, r1, #4
 8005c24:	6018      	str	r0, [r3, #0]
 8005c26:	062e      	lsls	r6, r5, #24
 8005c28:	d501      	bpl.n	8005c2e <_printf_i+0xba>
 8005c2a:	680d      	ldr	r5, [r1, #0]
 8005c2c:	e003      	b.n	8005c36 <_printf_i+0xc2>
 8005c2e:	066d      	lsls	r5, r5, #25
 8005c30:	d5fb      	bpl.n	8005c2a <_printf_i+0xb6>
 8005c32:	680d      	ldr	r5, [r1, #0]
 8005c34:	b2ad      	uxth	r5, r5
 8005c36:	4b56      	ldr	r3, [pc, #344]	; (8005d90 <_printf_i+0x21c>)
 8005c38:	2708      	movs	r7, #8
 8005c3a:	9303      	str	r3, [sp, #12]
 8005c3c:	2a6f      	cmp	r2, #111	; 0x6f
 8005c3e:	d000      	beq.n	8005c42 <_printf_i+0xce>
 8005c40:	3702      	adds	r7, #2
 8005c42:	0023      	movs	r3, r4
 8005c44:	2200      	movs	r2, #0
 8005c46:	3343      	adds	r3, #67	; 0x43
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	6863      	ldr	r3, [r4, #4]
 8005c4c:	60a3      	str	r3, [r4, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	db03      	blt.n	8005c5a <_printf_i+0xe6>
 8005c52:	2204      	movs	r2, #4
 8005c54:	6821      	ldr	r1, [r4, #0]
 8005c56:	4391      	bics	r1, r2
 8005c58:	6021      	str	r1, [r4, #0]
 8005c5a:	2d00      	cmp	r5, #0
 8005c5c:	d102      	bne.n	8005c64 <_printf_i+0xf0>
 8005c5e:	9e04      	ldr	r6, [sp, #16]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00c      	beq.n	8005c7e <_printf_i+0x10a>
 8005c64:	9e04      	ldr	r6, [sp, #16]
 8005c66:	0028      	movs	r0, r5
 8005c68:	0039      	movs	r1, r7
 8005c6a:	f7fa fadd 	bl	8000228 <__aeabi_uidivmod>
 8005c6e:	9b03      	ldr	r3, [sp, #12]
 8005c70:	3e01      	subs	r6, #1
 8005c72:	5c5b      	ldrb	r3, [r3, r1]
 8005c74:	7033      	strb	r3, [r6, #0]
 8005c76:	002b      	movs	r3, r5
 8005c78:	0005      	movs	r5, r0
 8005c7a:	429f      	cmp	r7, r3
 8005c7c:	d9f3      	bls.n	8005c66 <_printf_i+0xf2>
 8005c7e:	2f08      	cmp	r7, #8
 8005c80:	d109      	bne.n	8005c96 <_printf_i+0x122>
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	07db      	lsls	r3, r3, #31
 8005c86:	d506      	bpl.n	8005c96 <_printf_i+0x122>
 8005c88:	6863      	ldr	r3, [r4, #4]
 8005c8a:	6922      	ldr	r2, [r4, #16]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	dc02      	bgt.n	8005c96 <_printf_i+0x122>
 8005c90:	2330      	movs	r3, #48	; 0x30
 8005c92:	3e01      	subs	r6, #1
 8005c94:	7033      	strb	r3, [r6, #0]
 8005c96:	9b04      	ldr	r3, [sp, #16]
 8005c98:	1b9b      	subs	r3, r3, r6
 8005c9a:	6123      	str	r3, [r4, #16]
 8005c9c:	9b07      	ldr	r3, [sp, #28]
 8005c9e:	0021      	movs	r1, r4
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	9805      	ldr	r0, [sp, #20]
 8005ca4:	9b06      	ldr	r3, [sp, #24]
 8005ca6:	aa09      	add	r2, sp, #36	; 0x24
 8005ca8:	f7ff fef4 	bl	8005a94 <_printf_common>
 8005cac:	1c43      	adds	r3, r0, #1
 8005cae:	d14c      	bne.n	8005d4a <_printf_i+0x1d6>
 8005cb0:	2001      	movs	r0, #1
 8005cb2:	4240      	negs	r0, r0
 8005cb4:	b00b      	add	sp, #44	; 0x2c
 8005cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cb8:	3145      	adds	r1, #69	; 0x45
 8005cba:	700a      	strb	r2, [r1, #0]
 8005cbc:	4a34      	ldr	r2, [pc, #208]	; (8005d90 <_printf_i+0x21c>)
 8005cbe:	9203      	str	r2, [sp, #12]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	6821      	ldr	r1, [r4, #0]
 8005cc4:	ca20      	ldmia	r2!, {r5}
 8005cc6:	601a      	str	r2, [r3, #0]
 8005cc8:	0608      	lsls	r0, r1, #24
 8005cca:	d516      	bpl.n	8005cfa <_printf_i+0x186>
 8005ccc:	07cb      	lsls	r3, r1, #31
 8005cce:	d502      	bpl.n	8005cd6 <_printf_i+0x162>
 8005cd0:	2320      	movs	r3, #32
 8005cd2:	4319      	orrs	r1, r3
 8005cd4:	6021      	str	r1, [r4, #0]
 8005cd6:	2710      	movs	r7, #16
 8005cd8:	2d00      	cmp	r5, #0
 8005cda:	d1b2      	bne.n	8005c42 <_printf_i+0xce>
 8005cdc:	2320      	movs	r3, #32
 8005cde:	6822      	ldr	r2, [r4, #0]
 8005ce0:	439a      	bics	r2, r3
 8005ce2:	6022      	str	r2, [r4, #0]
 8005ce4:	e7ad      	b.n	8005c42 <_printf_i+0xce>
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	6809      	ldr	r1, [r1, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	6022      	str	r2, [r4, #0]
 8005cee:	0022      	movs	r2, r4
 8005cf0:	2178      	movs	r1, #120	; 0x78
 8005cf2:	3245      	adds	r2, #69	; 0x45
 8005cf4:	7011      	strb	r1, [r2, #0]
 8005cf6:	4a27      	ldr	r2, [pc, #156]	; (8005d94 <_printf_i+0x220>)
 8005cf8:	e7e1      	b.n	8005cbe <_printf_i+0x14a>
 8005cfa:	0648      	lsls	r0, r1, #25
 8005cfc:	d5e6      	bpl.n	8005ccc <_printf_i+0x158>
 8005cfe:	b2ad      	uxth	r5, r5
 8005d00:	e7e4      	b.n	8005ccc <_printf_i+0x158>
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	680d      	ldr	r5, [r1, #0]
 8005d06:	1d10      	adds	r0, r2, #4
 8005d08:	6949      	ldr	r1, [r1, #20]
 8005d0a:	6018      	str	r0, [r3, #0]
 8005d0c:	6813      	ldr	r3, [r2, #0]
 8005d0e:	062e      	lsls	r6, r5, #24
 8005d10:	d501      	bpl.n	8005d16 <_printf_i+0x1a2>
 8005d12:	6019      	str	r1, [r3, #0]
 8005d14:	e002      	b.n	8005d1c <_printf_i+0x1a8>
 8005d16:	066d      	lsls	r5, r5, #25
 8005d18:	d5fb      	bpl.n	8005d12 <_printf_i+0x19e>
 8005d1a:	8019      	strh	r1, [r3, #0]
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	9e04      	ldr	r6, [sp, #16]
 8005d20:	6123      	str	r3, [r4, #16]
 8005d22:	e7bb      	b.n	8005c9c <_printf_i+0x128>
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	1d11      	adds	r1, r2, #4
 8005d28:	6019      	str	r1, [r3, #0]
 8005d2a:	6816      	ldr	r6, [r2, #0]
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	0030      	movs	r0, r6
 8005d30:	6862      	ldr	r2, [r4, #4]
 8005d32:	f000 f8ed 	bl	8005f10 <memchr>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d001      	beq.n	8005d3e <_printf_i+0x1ca>
 8005d3a:	1b80      	subs	r0, r0, r6
 8005d3c:	6060      	str	r0, [r4, #4]
 8005d3e:	6863      	ldr	r3, [r4, #4]
 8005d40:	6123      	str	r3, [r4, #16]
 8005d42:	2300      	movs	r3, #0
 8005d44:	9a04      	ldr	r2, [sp, #16]
 8005d46:	7013      	strb	r3, [r2, #0]
 8005d48:	e7a8      	b.n	8005c9c <_printf_i+0x128>
 8005d4a:	6923      	ldr	r3, [r4, #16]
 8005d4c:	0032      	movs	r2, r6
 8005d4e:	9906      	ldr	r1, [sp, #24]
 8005d50:	9805      	ldr	r0, [sp, #20]
 8005d52:	9d07      	ldr	r5, [sp, #28]
 8005d54:	47a8      	blx	r5
 8005d56:	1c43      	adds	r3, r0, #1
 8005d58:	d0aa      	beq.n	8005cb0 <_printf_i+0x13c>
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	079b      	lsls	r3, r3, #30
 8005d5e:	d415      	bmi.n	8005d8c <_printf_i+0x218>
 8005d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d62:	68e0      	ldr	r0, [r4, #12]
 8005d64:	4298      	cmp	r0, r3
 8005d66:	daa5      	bge.n	8005cb4 <_printf_i+0x140>
 8005d68:	0018      	movs	r0, r3
 8005d6a:	e7a3      	b.n	8005cb4 <_printf_i+0x140>
 8005d6c:	0022      	movs	r2, r4
 8005d6e:	2301      	movs	r3, #1
 8005d70:	9906      	ldr	r1, [sp, #24]
 8005d72:	9805      	ldr	r0, [sp, #20]
 8005d74:	9e07      	ldr	r6, [sp, #28]
 8005d76:	3219      	adds	r2, #25
 8005d78:	47b0      	blx	r6
 8005d7a:	1c43      	adds	r3, r0, #1
 8005d7c:	d098      	beq.n	8005cb0 <_printf_i+0x13c>
 8005d7e:	3501      	adds	r5, #1
 8005d80:	68e3      	ldr	r3, [r4, #12]
 8005d82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d84:	1a9b      	subs	r3, r3, r2
 8005d86:	42ab      	cmp	r3, r5
 8005d88:	dcf0      	bgt.n	8005d6c <_printf_i+0x1f8>
 8005d8a:	e7e9      	b.n	8005d60 <_printf_i+0x1ec>
 8005d8c:	2500      	movs	r5, #0
 8005d8e:	e7f7      	b.n	8005d80 <_printf_i+0x20c>
 8005d90:	0800615d 	.word	0x0800615d
 8005d94:	0800616e 	.word	0x0800616e

08005d98 <_sbrk_r>:
 8005d98:	2300      	movs	r3, #0
 8005d9a:	b570      	push	{r4, r5, r6, lr}
 8005d9c:	4d06      	ldr	r5, [pc, #24]	; (8005db8 <_sbrk_r+0x20>)
 8005d9e:	0004      	movs	r4, r0
 8005da0:	0008      	movs	r0, r1
 8005da2:	602b      	str	r3, [r5, #0]
 8005da4:	f7fb f97e 	bl	80010a4 <_sbrk>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d103      	bne.n	8005db4 <_sbrk_r+0x1c>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d000      	beq.n	8005db4 <_sbrk_r+0x1c>
 8005db2:	6023      	str	r3, [r4, #0]
 8005db4:	bd70      	pop	{r4, r5, r6, pc}
 8005db6:	46c0      	nop			; (mov r8, r8)
 8005db8:	20000298 	.word	0x20000298

08005dbc <__sread>:
 8005dbc:	b570      	push	{r4, r5, r6, lr}
 8005dbe:	000c      	movs	r4, r1
 8005dc0:	250e      	movs	r5, #14
 8005dc2:	5f49      	ldrsh	r1, [r1, r5]
 8005dc4:	f000 f8c0 	bl	8005f48 <_read_r>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	db03      	blt.n	8005dd4 <__sread+0x18>
 8005dcc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005dce:	181b      	adds	r3, r3, r0
 8005dd0:	6563      	str	r3, [r4, #84]	; 0x54
 8005dd2:	bd70      	pop	{r4, r5, r6, pc}
 8005dd4:	89a3      	ldrh	r3, [r4, #12]
 8005dd6:	4a02      	ldr	r2, [pc, #8]	; (8005de0 <__sread+0x24>)
 8005dd8:	4013      	ands	r3, r2
 8005dda:	81a3      	strh	r3, [r4, #12]
 8005ddc:	e7f9      	b.n	8005dd2 <__sread+0x16>
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	ffffefff 	.word	0xffffefff

08005de4 <__swrite>:
 8005de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de6:	001f      	movs	r7, r3
 8005de8:	898b      	ldrh	r3, [r1, #12]
 8005dea:	0005      	movs	r5, r0
 8005dec:	000c      	movs	r4, r1
 8005dee:	0016      	movs	r6, r2
 8005df0:	05db      	lsls	r3, r3, #23
 8005df2:	d505      	bpl.n	8005e00 <__swrite+0x1c>
 8005df4:	230e      	movs	r3, #14
 8005df6:	5ec9      	ldrsh	r1, [r1, r3]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	f000 f874 	bl	8005ee8 <_lseek_r>
 8005e00:	89a3      	ldrh	r3, [r4, #12]
 8005e02:	4a05      	ldr	r2, [pc, #20]	; (8005e18 <__swrite+0x34>)
 8005e04:	0028      	movs	r0, r5
 8005e06:	4013      	ands	r3, r2
 8005e08:	81a3      	strh	r3, [r4, #12]
 8005e0a:	0032      	movs	r2, r6
 8005e0c:	230e      	movs	r3, #14
 8005e0e:	5ee1      	ldrsh	r1, [r4, r3]
 8005e10:	003b      	movs	r3, r7
 8005e12:	f000 f81f 	bl	8005e54 <_write_r>
 8005e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e18:	ffffefff 	.word	0xffffefff

08005e1c <__sseek>:
 8005e1c:	b570      	push	{r4, r5, r6, lr}
 8005e1e:	000c      	movs	r4, r1
 8005e20:	250e      	movs	r5, #14
 8005e22:	5f49      	ldrsh	r1, [r1, r5]
 8005e24:	f000 f860 	bl	8005ee8 <_lseek_r>
 8005e28:	89a3      	ldrh	r3, [r4, #12]
 8005e2a:	1c42      	adds	r2, r0, #1
 8005e2c:	d103      	bne.n	8005e36 <__sseek+0x1a>
 8005e2e:	4a05      	ldr	r2, [pc, #20]	; (8005e44 <__sseek+0x28>)
 8005e30:	4013      	ands	r3, r2
 8005e32:	81a3      	strh	r3, [r4, #12]
 8005e34:	bd70      	pop	{r4, r5, r6, pc}
 8005e36:	2280      	movs	r2, #128	; 0x80
 8005e38:	0152      	lsls	r2, r2, #5
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	81a3      	strh	r3, [r4, #12]
 8005e3e:	6560      	str	r0, [r4, #84]	; 0x54
 8005e40:	e7f8      	b.n	8005e34 <__sseek+0x18>
 8005e42:	46c0      	nop			; (mov r8, r8)
 8005e44:	ffffefff 	.word	0xffffefff

08005e48 <__sclose>:
 8005e48:	b510      	push	{r4, lr}
 8005e4a:	230e      	movs	r3, #14
 8005e4c:	5ec9      	ldrsh	r1, [r1, r3]
 8005e4e:	f000 f815 	bl	8005e7c <_close_r>
 8005e52:	bd10      	pop	{r4, pc}

08005e54 <_write_r>:
 8005e54:	b570      	push	{r4, r5, r6, lr}
 8005e56:	0004      	movs	r4, r0
 8005e58:	0008      	movs	r0, r1
 8005e5a:	0011      	movs	r1, r2
 8005e5c:	001a      	movs	r2, r3
 8005e5e:	2300      	movs	r3, #0
 8005e60:	4d05      	ldr	r5, [pc, #20]	; (8005e78 <_write_r+0x24>)
 8005e62:	602b      	str	r3, [r5, #0]
 8005e64:	f7fb f8d5 	bl	8001012 <_write>
 8005e68:	1c43      	adds	r3, r0, #1
 8005e6a:	d103      	bne.n	8005e74 <_write_r+0x20>
 8005e6c:	682b      	ldr	r3, [r5, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d000      	beq.n	8005e74 <_write_r+0x20>
 8005e72:	6023      	str	r3, [r4, #0]
 8005e74:	bd70      	pop	{r4, r5, r6, pc}
 8005e76:	46c0      	nop			; (mov r8, r8)
 8005e78:	20000298 	.word	0x20000298

08005e7c <_close_r>:
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	b570      	push	{r4, r5, r6, lr}
 8005e80:	4d06      	ldr	r5, [pc, #24]	; (8005e9c <_close_r+0x20>)
 8005e82:	0004      	movs	r4, r0
 8005e84:	0008      	movs	r0, r1
 8005e86:	602b      	str	r3, [r5, #0]
 8005e88:	f7fb f8df 	bl	800104a <_close>
 8005e8c:	1c43      	adds	r3, r0, #1
 8005e8e:	d103      	bne.n	8005e98 <_close_r+0x1c>
 8005e90:	682b      	ldr	r3, [r5, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d000      	beq.n	8005e98 <_close_r+0x1c>
 8005e96:	6023      	str	r3, [r4, #0]
 8005e98:	bd70      	pop	{r4, r5, r6, pc}
 8005e9a:	46c0      	nop			; (mov r8, r8)
 8005e9c:	20000298 	.word	0x20000298

08005ea0 <_fstat_r>:
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	b570      	push	{r4, r5, r6, lr}
 8005ea4:	4d06      	ldr	r5, [pc, #24]	; (8005ec0 <_fstat_r+0x20>)
 8005ea6:	0004      	movs	r4, r0
 8005ea8:	0008      	movs	r0, r1
 8005eaa:	0011      	movs	r1, r2
 8005eac:	602b      	str	r3, [r5, #0]
 8005eae:	f7fb f8d6 	bl	800105e <_fstat>
 8005eb2:	1c43      	adds	r3, r0, #1
 8005eb4:	d103      	bne.n	8005ebe <_fstat_r+0x1e>
 8005eb6:	682b      	ldr	r3, [r5, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d000      	beq.n	8005ebe <_fstat_r+0x1e>
 8005ebc:	6023      	str	r3, [r4, #0]
 8005ebe:	bd70      	pop	{r4, r5, r6, pc}
 8005ec0:	20000298 	.word	0x20000298

08005ec4 <_isatty_r>:
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	b570      	push	{r4, r5, r6, lr}
 8005ec8:	4d06      	ldr	r5, [pc, #24]	; (8005ee4 <_isatty_r+0x20>)
 8005eca:	0004      	movs	r4, r0
 8005ecc:	0008      	movs	r0, r1
 8005ece:	602b      	str	r3, [r5, #0]
 8005ed0:	f7fb f8d3 	bl	800107a <_isatty>
 8005ed4:	1c43      	adds	r3, r0, #1
 8005ed6:	d103      	bne.n	8005ee0 <_isatty_r+0x1c>
 8005ed8:	682b      	ldr	r3, [r5, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d000      	beq.n	8005ee0 <_isatty_r+0x1c>
 8005ede:	6023      	str	r3, [r4, #0]
 8005ee0:	bd70      	pop	{r4, r5, r6, pc}
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	20000298 	.word	0x20000298

08005ee8 <_lseek_r>:
 8005ee8:	b570      	push	{r4, r5, r6, lr}
 8005eea:	0004      	movs	r4, r0
 8005eec:	0008      	movs	r0, r1
 8005eee:	0011      	movs	r1, r2
 8005ef0:	001a      	movs	r2, r3
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	4d05      	ldr	r5, [pc, #20]	; (8005f0c <_lseek_r+0x24>)
 8005ef6:	602b      	str	r3, [r5, #0]
 8005ef8:	f7fb f8c8 	bl	800108c <_lseek>
 8005efc:	1c43      	adds	r3, r0, #1
 8005efe:	d103      	bne.n	8005f08 <_lseek_r+0x20>
 8005f00:	682b      	ldr	r3, [r5, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d000      	beq.n	8005f08 <_lseek_r+0x20>
 8005f06:	6023      	str	r3, [r4, #0]
 8005f08:	bd70      	pop	{r4, r5, r6, pc}
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	20000298 	.word	0x20000298

08005f10 <memchr>:
 8005f10:	b2c9      	uxtb	r1, r1
 8005f12:	1882      	adds	r2, r0, r2
 8005f14:	4290      	cmp	r0, r2
 8005f16:	d101      	bne.n	8005f1c <memchr+0xc>
 8005f18:	2000      	movs	r0, #0
 8005f1a:	4770      	bx	lr
 8005f1c:	7803      	ldrb	r3, [r0, #0]
 8005f1e:	428b      	cmp	r3, r1
 8005f20:	d0fb      	beq.n	8005f1a <memchr+0xa>
 8005f22:	3001      	adds	r0, #1
 8005f24:	e7f6      	b.n	8005f14 <memchr+0x4>
	...

08005f28 <__malloc_lock>:
 8005f28:	b510      	push	{r4, lr}
 8005f2a:	4802      	ldr	r0, [pc, #8]	; (8005f34 <__malloc_lock+0xc>)
 8005f2c:	f7ff faff 	bl	800552e <__retarget_lock_acquire_recursive>
 8005f30:	bd10      	pop	{r4, pc}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	2000028c 	.word	0x2000028c

08005f38 <__malloc_unlock>:
 8005f38:	b510      	push	{r4, lr}
 8005f3a:	4802      	ldr	r0, [pc, #8]	; (8005f44 <__malloc_unlock+0xc>)
 8005f3c:	f7ff faf8 	bl	8005530 <__retarget_lock_release_recursive>
 8005f40:	bd10      	pop	{r4, pc}
 8005f42:	46c0      	nop			; (mov r8, r8)
 8005f44:	2000028c 	.word	0x2000028c

08005f48 <_read_r>:
 8005f48:	b570      	push	{r4, r5, r6, lr}
 8005f4a:	0004      	movs	r4, r0
 8005f4c:	0008      	movs	r0, r1
 8005f4e:	0011      	movs	r1, r2
 8005f50:	001a      	movs	r2, r3
 8005f52:	2300      	movs	r3, #0
 8005f54:	4d05      	ldr	r5, [pc, #20]	; (8005f6c <_read_r+0x24>)
 8005f56:	602b      	str	r3, [r5, #0]
 8005f58:	f7fb f83e 	bl	8000fd8 <_read>
 8005f5c:	1c43      	adds	r3, r0, #1
 8005f5e:	d103      	bne.n	8005f68 <_read_r+0x20>
 8005f60:	682b      	ldr	r3, [r5, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d000      	beq.n	8005f68 <_read_r+0x20>
 8005f66:	6023      	str	r3, [r4, #0]
 8005f68:	bd70      	pop	{r4, r5, r6, pc}
 8005f6a:	46c0      	nop			; (mov r8, r8)
 8005f6c:	20000298 	.word	0x20000298

08005f70 <_init>:
 8005f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f76:	bc08      	pop	{r3}
 8005f78:	469e      	mov	lr, r3
 8005f7a:	4770      	bx	lr

08005f7c <_fini>:
 8005f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7e:	46c0      	nop			; (mov r8, r8)
 8005f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f82:	bc08      	pop	{r3}
 8005f84:	469e      	mov	lr, r3
 8005f86:	4770      	bx	lr
